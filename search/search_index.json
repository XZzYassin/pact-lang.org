{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Pact Pact Developer Tutorials","title":"Home"},{"location":"#welcome-to-pact","text":"Pact Developer Tutorials","title":"Welcome to Pact"},{"location":"beginner/atom-sdk/","text":"","title":"Atom sdk"},{"location":"beginner/hello-world-with-pact/","text":"NAME OF TUTORIAL LEARNING-OBJECTIVE OUTLINE-POINT-1 OUTLINE-POINT-2 OUTLINE-POINT-3 Key Takeaway KEY-TAKEAWAY NAME OF TUTORIAL VIDEO-INTRODUCTION OUTLINE-POINT-1 OUTLINE-POINT-2 OUTLINE-POINT-3 Key Terms Knowledge Check KNOWLEDGE-CHECK-OVERVIEW Review REVIEW-LEARNING-OBJECTIVE OUTLINE-POINT-1 OUTLINE-POINT-2 OUTLINE-POINT-3","title":"**NAME OF TUTORIAL**"},{"location":"beginner/hello-world-with-pact/#name-of-tutorial","text":"LEARNING-OBJECTIVE OUTLINE-POINT-1 OUTLINE-POINT-2 OUTLINE-POINT-3 Key Takeaway KEY-TAKEAWAY","title":"NAME OF TUTORIAL"},{"location":"beginner/hello-world-with-pact/#name-of-tutorial_1","text":"VIDEO-INTRODUCTION","title":"NAME OF TUTORIAL"},{"location":"beginner/hello-world-with-pact/#outline-point-1","text":"","title":"OUTLINE-POINT-1"},{"location":"beginner/hello-world-with-pact/#outline-point-2","text":"","title":"OUTLINE-POINT-2"},{"location":"beginner/hello-world-with-pact/#outline-point-3","text":"","title":"OUTLINE-POINT-3"},{"location":"beginner/hello-world-with-pact/#key-terms","text":"","title":"Key Terms"},{"location":"beginner/hello-world-with-pact/#knowledge-check","text":"KNOWLEDGE-CHECK-OVERVIEW","title":"Knowledge Check"},{"location":"beginner/hello-world-with-pact/#review","text":"REVIEW-LEARNING-OBJECTIVE OUTLINE-POINT-1 OUTLINE-POINT-2 OUTLINE-POINT-3","title":"Review"},{"location":"beginner/pact-accounts-and-transfers/","text":"","title":"Pact accounts and transfers"},{"location":"beginner/pact-and-javascript/","text":"","title":"Pact and javascript"},{"location":"beginner/pact-contract-interaction/","text":"","title":"Pact contract interaction"},{"location":"beginner/pact-functions/","text":"","title":"Pact functions"},{"location":"beginner/pact-keysets/","text":"","title":"Pact keysets"},{"location":"beginner/pact-modules/","text":"","title":"Pact modules"},{"location":"beginner/pact-online-editor/","text":"Pact Online Editor Welcome to the Pact Online Editor! In this tutorial, you\u2019ll learn about the Pact Online editor, a powerful tool for developing smart contracts with Pact. Topics covered in this tutorial Introduction to the Editor Navigation Bar Code Editor Tool Panel The goal of this tutorial is to get you familiar with each of the editor\u2019s powerful features so that you can use it to build smart contracts using pact. Key Takeaway The Pact online editor is a robust development environment for Pact. It gives you access to many useful features for smart contract development. These features allow you to easily build and test contracts before deploying them to either your private chain or Chainweb . Introduction to the Editor The Pact Online Editor is a web-based REPL that allows you to write Pact code, manage keysets, deploy smart contracts, and explore other smart contracts. These and many other features make the online editor an ideal place to build, test, and deploy your smart contracts. To get started with the Pact Online Editor, navigate to pact.kadena.io/ . Basic Layout Here you'll see a clean and intuitive layout, giving you access to the tools you need without cluttering the developer experience. The interface consists of three main sections; the code editor , the navigation bar , and the tool panel . Code Editor An area for writing and editing your smart contracts. Navigation Bar Includes relevant documentation links and allows you to load code into the REPL, refresh the repl, or deploy smart contract. Tool Panel Provides essential functionality needed to manage keys, interact with the REPL, view messages, explore modules, and more. Each of these features helps provide an intuitive developer experience. These features make smart contract development both fun and rewarding. Navigation Bar You can locate the navigation bar at the top of the screen. It allows you to load your contract into the REPL, refresh the REPL, or to deploy the contract to a live network. It also shows the Pact version number and links to both the documentation and the Kadena homepage. Load into REPL Selecting \u201cLoad into REPL\u201d loads text from the editor into the REPL and executes the commands. After selecting this button, you\u2019ll also notice that it opens an interactive terminal you can use to run Pact commands. You\u2019ll use this feature often when exploring the REPL later in this tutorial. Reset There are times you may want to reset the REPL. You can clear commands you have run by selecting the reset button from the navigation bar. Deploy The deploy button is used to deploy smart contracts onto the blockchain. Select Deploy to view the features available to you. Here you\u2019ll have the option to choose a server, set a few settings, sign the transaction and more. This tutorial doesn't go over the details of each of these options. If you'd like, view Hello World with Pact for a full description of smart contract deployment with the Online Editor. You can close this window by either hitting cancel or the X on the top right. Navigation The navigation bar also provides some necessary information and links to help you get started with Pact. Pact Version 2.6.1 At the time of this tutorial, Pact is currently on version 2.6.1. As this continues to update its likely that some of the features we explore will continue to improve. View the Documentation Links to both the Pact Developer Documentation and Kadena homepage exist on the navigation bar. Feel free to check out the documentation for an in-depth look at the Pact programming language. Visit Kadena.io You can also explore Kadena.io to explore more about the Kadena blockchain, which is the enterprise-grade blockchain that Pact runs on. Newsletter You can also join the newsletter to stay up to date on the latest Kadena and Pact information here . Code Editor The code editor provides a familiar editing interface. It comes equipped with both inline error reporting and formal verification . Inline Error Reporting Inline error reporting ensures that you have clear direction on how to fix errors that may exist in your code. For example, if you look at line 17 of your smart contract you\u2019ll see the error shown above. This and other errors types state the issue and help you to fix problems that may be affecting your smart contract. Error You can fix this error by creating an admin-keyset. Creating an admin-keyset can be done using the tool panel which we\u2019ll discuss more shortly. Formal Verification The online editor also supports formal verification. Formal verification is a process for automatically testing the correctness of your code. It mathematically proves that your contract has absolutely no security vulnerabilities. It also alerts you to any potential errors and vulnerabilities helping you create secure code quickly and effectively. Formal verification is a tremendous innovation for smart contract languages. For more information on how this helps you develop safer smart contracts, read our Medium post Pact Formal Verification: Making Blockchain Smart Contracts Safer. Tool Panel The tool panel gives you access to many beneficial features while developing smart contracts. It helps you set-up your environment, run commands in the interactive REPL, read messages, and explore other modules that exist on the network. ENV The first option available to you in the tool panel is the environment. Select Env to view sections for addressing errors and creating and managing data and wallets from the UI. Manage Errors Errors can be viewed and fixed using the errors section. As you can see here, it currently shows an error that there is no such key in the message \u2018admin-keyset\u2019. This error is the same as what you saw previously in the editor. To fix this error, select the fix button on the right side of the screen. As you\u2019ll see, this creates a keyset for you in the data section below. This along with many other errors and warnings can be fixed using this simple tool. Coming up you\u2019ll see how to create this keyset manually. Remove the admin-keyset by selecting the x to the right of the recently created keyset. Create and Manage Keysets The data section allows you to create and manage keysets. To get started, select the input Enter Keyset Name type admin-keyset then click create . You should now see admin-keyset appear under your list of available keysets. Tip You can delete keys using the x over on the right. You\u2019ll also see a dropdown that allows you to select keys-all, keys-2, and keys-any. These options refer to the number of key signatures required to validate a transaction. For more information on this and a more in-depth explanation of keys in Pact, see the tutorial on Pact Keysets. Result Each key created has a JSON representation available for programmatic access. In the Result tab, you can see the keys you have created shown in JSON. Raw You can also create keysets using the JSON format rather than the user interface. Creating keysets with JSON is done using the Raw tab. To create a new key, specify a keyset name , keys , and pred , similar to the format seen in the Result tab. Info Pred Stands for \u201cPredicate Function\u201d. A predicate function is a boolean value function evaluating to either true or false. In this case, it will be one of the options keys-any , keys-2 , or keys-all as you had seen in the keysets tab. Predicate functions specify which keys need to sign the transaction for it to be valid. Add Key As the name suggests, keysets are used to hold keys. You can create these keys in the section below Data named Wallet. To create a wallet, first, enter a key name then select Generate . I\u2019ll name mine admin-key, but you can choose whatever you\u2019d like You should now see the key name, the public key, and the private key you generated. This key is useful any time you'd like to deploy or interact with a smart contract. REPL A great way to get started with Pact is to jump in and start writing code for yourself. The REPL helps you to do this quickly and allows you to run Pact commands from directly within the browser. Try running some of the commands shown below to get started with the REPL. Add numbers Pact uses prefix notation for math operators. Prefix notation is standard in LISP-like languages like Pact. What this means is that the operator precedes the two values it\u2019s operating on. (+ 2 2) 4 Strings Concatenate strings using +. Try saying Hello REPL. pact (+ Hello REPL ) \u201cHello REPL\u201d Try More Commands You can view many more commands in the Pact Syntax Documentation and Built-in Functions Documentation . Try running a few for yourself to learn more about the Pact programming langauge. Run Commands from the Code Editor It\u2019s also possible to run REPL commands from the code editor . To get started, delete the existing code from the code editor and select REPL from the tool panel. To run commands using the editor, enter a command and then select Load into REPL at the top of the screen. Experiment with other commands yourself by running some of the ones shown previously. Messages Code editors often provide messages to developers that help them identify errors and log outputs. These are useful ways to debug programs and fix potential issues with your contract. In the Pact Online Editor, these messages can be seen in the messages tab in the Toolbar. Module Explorer Another powerful tool provided by the editor is the Module Explorer . The module explorer allows you to load example contracts, deployed contracts, and to run functions that exist on any contracts that exist on the network! Click on the button module explorer to get started. Here you\u2019ll see a section for example contracts and a section for deployed contracts . Example Contracts The example contracts section allows you to load example contracts directly into your editor. You can use this code however you\u2019d like, and can always come back here to reload the code again if needed. When you first loaded pact.kadena.io/ the Formal Verification contract shown here is automatically loaded. Select view open to reload this contract. View other Smart Contracts You can also view other smart contracts. Select View Open on any smart contract to load its code into the code editor. View Functions You can view a summary of functions that exist within any smart contract from within the module explorer . After selecting View , you will see an overview of these functions. The image below shows the functions in the example Simple Payment . Deployed Contracts You can also view any contract that has been deployed to the network using the module explorer. You can search by name, by chain, or by navigating the pages using the arrow buttons. Once you find a particular contract, select view . From here you can look at each function on the contract, and when you\u2019re ready, select open to see the contract code. You can also call functions on modules from within the editor. For more information on calling functions, see Hello World with Pact. Review Congratulations! You have completed your introduction to the Pact Online Editor . The Pact Online Editor is an excellent tool built to make developing smart contracts with Pact both fun and simple. Topic Summary Throughout this tutorial, you explored each core feature of the editor's interface. This included each of the following topics. Introduction to the Editor Navigation Bar Code Editor Tool Panel Take some time now to explore each of the features we discussed and get used to navigating this new environment. As you continue with Pact, you\u2019ll use this tool regularly to help explore new ideas, write smart contracts, manage keysets, and explore modules. Throughout these tutorials, you\u2019ll use this tool very often. By getting used to these core features, you're on your way to making amazing new applications using Pact.","title":"Pact Online Editor"},{"location":"beginner/pact-online-editor/#pact-online-editor","text":"Welcome to the Pact Online Editor! In this tutorial, you\u2019ll learn about the Pact Online editor, a powerful tool for developing smart contracts with Pact. Topics covered in this tutorial Introduction to the Editor Navigation Bar Code Editor Tool Panel The goal of this tutorial is to get you familiar with each of the editor\u2019s powerful features so that you can use it to build smart contracts using pact. Key Takeaway The Pact online editor is a robust development environment for Pact. It gives you access to many useful features for smart contract development. These features allow you to easily build and test contracts before deploying them to either your private chain or Chainweb .","title":"Pact Online Editor"},{"location":"beginner/pact-online-editor/#introduction-to-the-editor","text":"The Pact Online Editor is a web-based REPL that allows you to write Pact code, manage keysets, deploy smart contracts, and explore other smart contracts. These and many other features make the online editor an ideal place to build, test, and deploy your smart contracts. To get started with the Pact Online Editor, navigate to pact.kadena.io/ .","title":"Introduction to the Editor"},{"location":"beginner/pact-online-editor/#basic-layout","text":"Here you'll see a clean and intuitive layout, giving you access to the tools you need without cluttering the developer experience. The interface consists of three main sections; the code editor , the navigation bar , and the tool panel . Code Editor An area for writing and editing your smart contracts. Navigation Bar Includes relevant documentation links and allows you to load code into the REPL, refresh the repl, or deploy smart contract. Tool Panel Provides essential functionality needed to manage keys, interact with the REPL, view messages, explore modules, and more. Each of these features helps provide an intuitive developer experience. These features make smart contract development both fun and rewarding.","title":"Basic Layout"},{"location":"beginner/pact-online-editor/#navigation-bar","text":"You can locate the navigation bar at the top of the screen. It allows you to load your contract into the REPL, refresh the REPL, or to deploy the contract to a live network. It also shows the Pact version number and links to both the documentation and the Kadena homepage.","title":"Navigation Bar"},{"location":"beginner/pact-online-editor/#load-into-repl","text":"Selecting \u201cLoad into REPL\u201d loads text from the editor into the REPL and executes the commands. After selecting this button, you\u2019ll also notice that it opens an interactive terminal you can use to run Pact commands. You\u2019ll use this feature often when exploring the REPL later in this tutorial.","title":"Load into REPL"},{"location":"beginner/pact-online-editor/#reset","text":"There are times you may want to reset the REPL. You can clear commands you have run by selecting the reset button from the navigation bar.","title":"Reset"},{"location":"beginner/pact-online-editor/#deploy","text":"The deploy button is used to deploy smart contracts onto the blockchain. Select Deploy to view the features available to you. Here you\u2019ll have the option to choose a server, set a few settings, sign the transaction and more. This tutorial doesn't go over the details of each of these options. If you'd like, view Hello World with Pact for a full description of smart contract deployment with the Online Editor. You can close this window by either hitting cancel or the X on the top right.","title":"Deploy"},{"location":"beginner/pact-online-editor/#navigation","text":"The navigation bar also provides some necessary information and links to help you get started with Pact. Pact Version 2.6.1 At the time of this tutorial, Pact is currently on version 2.6.1. As this continues to update its likely that some of the features we explore will continue to improve. View the Documentation Links to both the Pact Developer Documentation and Kadena homepage exist on the navigation bar. Feel free to check out the documentation for an in-depth look at the Pact programming language. Visit Kadena.io You can also explore Kadena.io to explore more about the Kadena blockchain, which is the enterprise-grade blockchain that Pact runs on. Newsletter You can also join the newsletter to stay up to date on the latest Kadena and Pact information here .","title":"Navigation"},{"location":"beginner/pact-online-editor/#code-editor","text":"The code editor provides a familiar editing interface. It comes equipped with both inline error reporting and formal verification .","title":"Code Editor"},{"location":"beginner/pact-online-editor/#inline-error-reporting","text":"Inline error reporting ensures that you have clear direction on how to fix errors that may exist in your code. For example, if you look at line 17 of your smart contract you\u2019ll see the error shown above. This and other errors types state the issue and help you to fix problems that may be affecting your smart contract. Error You can fix this error by creating an admin-keyset. Creating an admin-keyset can be done using the tool panel which we\u2019ll discuss more shortly.","title":"Inline Error Reporting"},{"location":"beginner/pact-online-editor/#formal-verification","text":"The online editor also supports formal verification. Formal verification is a process for automatically testing the correctness of your code. It mathematically proves that your contract has absolutely no security vulnerabilities. It also alerts you to any potential errors and vulnerabilities helping you create secure code quickly and effectively. Formal verification is a tremendous innovation for smart contract languages. For more information on how this helps you develop safer smart contracts, read our Medium post Pact Formal Verification: Making Blockchain Smart Contracts Safer.","title":"Formal Verification"},{"location":"beginner/pact-online-editor/#tool-panel","text":"The tool panel gives you access to many beneficial features while developing smart contracts. It helps you set-up your environment, run commands in the interactive REPL, read messages, and explore other modules that exist on the network.","title":"Tool Panel"},{"location":"beginner/pact-online-editor/#env","text":"The first option available to you in the tool panel is the environment. Select Env to view sections for addressing errors and creating and managing data and wallets from the UI.","title":"ENV"},{"location":"beginner/pact-online-editor/#manage-errors","text":"Errors can be viewed and fixed using the errors section. As you can see here, it currently shows an error that there is no such key in the message \u2018admin-keyset\u2019. This error is the same as what you saw previously in the editor. To fix this error, select the fix button on the right side of the screen. As you\u2019ll see, this creates a keyset for you in the data section below. This along with many other errors and warnings can be fixed using this simple tool. Coming up you\u2019ll see how to create this keyset manually. Remove the admin-keyset by selecting the x to the right of the recently created keyset.","title":"Manage Errors"},{"location":"beginner/pact-online-editor/#create-and-manage-keysets","text":"The data section allows you to create and manage keysets. To get started, select the input Enter Keyset Name type admin-keyset then click create . You should now see admin-keyset appear under your list of available keysets. Tip You can delete keys using the x over on the right. You\u2019ll also see a dropdown that allows you to select keys-all, keys-2, and keys-any. These options refer to the number of key signatures required to validate a transaction. For more information on this and a more in-depth explanation of keys in Pact, see the tutorial on Pact Keysets.","title":"Create and Manage Keysets"},{"location":"beginner/pact-online-editor/#result","text":"Each key created has a JSON representation available for programmatic access. In the Result tab, you can see the keys you have created shown in JSON.","title":"Result"},{"location":"beginner/pact-online-editor/#raw","text":"You can also create keysets using the JSON format rather than the user interface. Creating keysets with JSON is done using the Raw tab. To create a new key, specify a keyset name , keys , and pred , similar to the format seen in the Result tab. Info Pred Stands for \u201cPredicate Function\u201d. A predicate function is a boolean value function evaluating to either true or false. In this case, it will be one of the options keys-any , keys-2 , or keys-all as you had seen in the keysets tab. Predicate functions specify which keys need to sign the transaction for it to be valid.","title":"Raw"},{"location":"beginner/pact-online-editor/#add-key","text":"As the name suggests, keysets are used to hold keys. You can create these keys in the section below Data named Wallet. To create a wallet, first, enter a key name then select Generate . I\u2019ll name mine admin-key, but you can choose whatever you\u2019d like You should now see the key name, the public key, and the private key you generated. This key is useful any time you'd like to deploy or interact with a smart contract.","title":"Add Key"},{"location":"beginner/pact-online-editor/#repl","text":"A great way to get started with Pact is to jump in and start writing code for yourself. The REPL helps you to do this quickly and allows you to run Pact commands from directly within the browser. Try running some of the commands shown below to get started with the REPL. Add numbers Pact uses prefix notation for math operators. Prefix notation is standard in LISP-like languages like Pact. What this means is that the operator precedes the two values it\u2019s operating on. (+ 2 2) 4 Strings Concatenate strings using +. Try saying Hello REPL. pact (+ Hello REPL ) \u201cHello REPL\u201d Try More Commands You can view many more commands in the Pact Syntax Documentation and Built-in Functions Documentation . Try running a few for yourself to learn more about the Pact programming langauge. Run Commands from the Code Editor It\u2019s also possible to run REPL commands from the code editor . To get started, delete the existing code from the code editor and select REPL from the tool panel. To run commands using the editor, enter a command and then select Load into REPL at the top of the screen. Experiment with other commands yourself by running some of the ones shown previously.","title":"REPL"},{"location":"beginner/pact-online-editor/#messages","text":"Code editors often provide messages to developers that help them identify errors and log outputs. These are useful ways to debug programs and fix potential issues with your contract. In the Pact Online Editor, these messages can be seen in the messages tab in the Toolbar.","title":"Messages"},{"location":"beginner/pact-online-editor/#module-explorer","text":"Another powerful tool provided by the editor is the Module Explorer . The module explorer allows you to load example contracts, deployed contracts, and to run functions that exist on any contracts that exist on the network! Click on the button module explorer to get started. Here you\u2019ll see a section for example contracts and a section for deployed contracts .","title":"Module Explorer"},{"location":"beginner/pact-online-editor/#example-contracts","text":"The example contracts section allows you to load example contracts directly into your editor. You can use this code however you\u2019d like, and can always come back here to reload the code again if needed. When you first loaded pact.kadena.io/ the Formal Verification contract shown here is automatically loaded. Select view open to reload this contract. View other Smart Contracts You can also view other smart contracts. Select View Open on any smart contract to load its code into the code editor.","title":"Example Contracts"},{"location":"beginner/pact-online-editor/#view-functions","text":"You can view a summary of functions that exist within any smart contract from within the module explorer . After selecting View , you will see an overview of these functions. The image below shows the functions in the example Simple Payment .","title":"View Functions"},{"location":"beginner/pact-online-editor/#deployed-contracts","text":"You can also view any contract that has been deployed to the network using the module explorer. You can search by name, by chain, or by navigating the pages using the arrow buttons. Once you find a particular contract, select view . From here you can look at each function on the contract, and when you\u2019re ready, select open to see the contract code. You can also call functions on modules from within the editor. For more information on calling functions, see Hello World with Pact.","title":"Deployed Contracts"},{"location":"beginner/pact-online-editor/#review","text":"Congratulations! You have completed your introduction to the Pact Online Editor . The Pact Online Editor is an excellent tool built to make developing smart contracts with Pact both fun and simple. Topic Summary Throughout this tutorial, you explored each core feature of the editor's interface. This included each of the following topics. Introduction to the Editor Navigation Bar Code Editor Tool Panel Take some time now to explore each of the features we discussed and get used to navigating this new environment. As you continue with Pact, you\u2019ll use this tool regularly to help explore new ideas, write smart contracts, manage keysets, and explore modules. Throughout these tutorials, you\u2019ll use this tool very often. By getting used to these core features, you're on your way to making amazing new applications using Pact.","title":"Review"},{"location":"beginner/pact-schemas-and-tables/","text":"","title":"Pact schemas and tables"},{"location":"beginner/pact-standard-library/","text":"","title":"Pact standard library"},{"location":"beginner/series-review/","text":"","title":"Series review"},{"location":"beginner/testing-in-the-sdk/","text":"","title":"Testing in the sdk"},{"location":"beginner/welcome-to-pact/","text":"Welcome to Pact Welcome to the Pact smart contract programming language! In this tutorial, we\u2019ll introduce Pact, explain some of its core features, and help you take your first steps toward becoming a Pact smart contract developer. Topics covered in this tutorial Introduction to Pact Pact Key Features Other Features Learn More About Pact The goal is to familiarize you with what Pact is, what it is used for, and some key decisions that influenced the design of this new language. Key Takeaway Pact is the safest, most user-friendly language for smart contracts. It\u2019s designed for security and performance. It is turing incomplete, human readable, supports upgradable contracts, and formal verification to make high performant and secure smart contracts. Welcome to Pact Tutorial The following video covers some important details of the Pact programming language. You can also follow this tutorial using the text provided below the video. Subscribe to our YouTube channel to access the latest Pact tutorials! Welcome to Pact Pact is an open-source programming language for writing smart contracts . It\u2019s designed from the ground up to support the unique challenges of developing solutions to run on a blockchain. Pact empowers developers to create robust and high performance logic for transactions. It facilitates execution of mission-critical business operations quickly and effectively. Pact is designed with safety in mind. Its design is informed by existing approaches to smart contracts as well as stored procedure languages like SQL and LISP. Pact resembles a general-purpose, Turing-complete language. It includes LISP-like syntax, user functions, modules, and imperative style. Pact Smart Contracts A smart contract in Pact is comprised of three core elements: the code module, keysets, and tables. Each of these will be explored in more detail throughout the series. Here\u2019s a quick overview of each of these core elements. Module A module is where logic is defined for a smart contract. It contains functions, pact definitions, tables, and schemas. Keysets Pact Keysets specify authorization to different parts of the smart contract. They determine which accounts have access to which parts of the program. Tables Data in Pact is stored in tables. These tables have a \u201ckey-row\u201d structure and support schemas as well as a versioned, columnar history. Pact Key Features There are many important features that make Pact such a safe and high performance language for creating smart contracts. Here are a few that we\u2019ll focus on throughout this tutorial. Pact Key Features Turing incomplete Human Readable Upgradable Contracts Formal Verification First, Pact is a turing-incomplete language with deliberate constraints on its computational ability. This supports its design goal of \u201cjust enough\u201d power for transactional blockchain solutions without exposing you to unnecessary attack vectors. All Pact code is stored as written in a human-readable form on the ledger. It is installed onto the blockchain directly, so you can always review the running code and be sure of exactly what its doing. Pact also supports upgradable contracts so that you can offer new features, adapt to new workflow requirements, and fix bugs as they are discovered. Finally, Pact comes equipped with a powerful validation tool suite in the form of formal verification . Pact uses Z3, an open-source tool developed by Microsoft, to mathematically verify and test for bugs present in code. These features along with it\u2019s excellent tooling ecosystem and developer community makes writing smart contracts with Pact both fun and productive. Let\u2019s explore each of these features in a little more detail. Turing Incomplete Pact contracts are Turing incomplete. A Turing complete language has the power to run any possible program. In some languages that\u2019s an extremely important feature. For smart contracts it\u2019s an incredibly dangerous feature. For that reason, Pact is designed to be turing incomplete, which places deliberate constraints on its computational ability. This supports its design goal of \u201cjust enough\u201d power for transactional blockchain solutions and helps ensure the security of its smart contracts. The first restriction in Pact is that there is no unbounded looping or recursion. Pact detects recursion and fails immediately. Looping is also only supported in special circumstances. The key benefits of this is to reduce cost and improve performance. This feature makes some of the most infamous and costly bugs discovered in other platforms not even possible with Pact. For more information on this topic, see our blog post Turing Completeness and Smart Contract Security . Human Readable Pact smart contracts are human readable. Smart contracts solve business problems that require both technical and non-technical expertise. To build the best smart contract solution, it\u2019s important for everyone involved to be able to understand and contribute to the development of the smart contract. For that reason, Pact was built to be simple to read and write. This helps provide complete transparency for the logic within its smart contracts. This approach also encourages shorter programs. Code executes directly on the ledger where it can be read easily by anyone. As a result, Pact is easy to understand. For example, here\u2019s a \u201cHello World\u201d smart contract using Pact. ( module helloWorld admin-keyset ( defun hello ( name ) ( format Hello {}! [ name ])) ) ( hello world ) Without having learned anything about the Pact language, you can already start to see how it works. We\u2019ll explain more of the terms and syntax in a later tutorial, but with these few simple lines of code, you\u2019re seeing a fully functioning Pact \u201cHello World\u201d smart contract. Once written, smart contracts are deployed to a blockchain. In Pact, the code on the blockchain is exactly the same as the code that was written. This means that no matter when you see the code it will always be exactly as it was built. This helps you know exactly what\u2019s going on so you can continue to moderate and improve your application over time. Upgradable Contracts Pact contracts are upgradable. Upgradable contracts allow you to revise and improve your smart contracts over time. This allows you to offer new features and fix bugs as you continue developing your smart contract. None of this is possible with other smart contract languages, and it\u2019s an extremely helpful feature when trying to build the most impactful application for your business. The simplicity of upgrading contracts is further amplified by its tooling ecosystem. Compiler and runtime errors offer detailed information, with stack traces and function documentation to ensure you\u2019re making the best version of your smart contract. Pact\u2019s iterative development process is also supported by a feature-rich REPL helping you to rapidly improve and deploy new smart contracts. It includes features such as incremental transaction execution and environment and database inspection. Formal Verification Pact is supported by formal verification, a system to mathematically prove that your code is safe. This means that Pact allows smart contract authors to express, automatically check, and formally verify that their code does not contain any bugs. This is the same system used to protect mission critical environments like nuclear power plants or air and space autopilot systems. You now have this same high level of security in every smart contract you write with Pact. Formal verification is a huge topic that\u2019s been covered extremely well in the Kadena blog. See our blog post Pact Formal Verification: Making Blockchain Smart Contracts Safer for more information on this topic. Other Pact Features There are many other features that Pact supports to help make your developer experience as rewarding as possible. These features include type inference, atomic transaction execution, RDBMS integration, confidential computing, and more! Type Inference Pact includes type inference. This makes it possible for code to be strongly-typed without declaring type information. It also has the added benefit of limiting run-time type enforcement. Developers can use a typecheck to add \u201cjust enough types\u201d. This eliminates warnings and only enforces types at runtime where needed. Atomic Transaction Execution Similar to RDBMS systems, Pact offers the benefit of atomic execution. This allows changes to commit to the database only if the code runs successfully. Any errors roll back changes, abort execution, and avoid costly mistakes. RDBMS Integration Pact is also designed to allow direct integration with an industrial RDBMS. This is helpful in cases that need efficient publication of historical data. Confidential Computing with \u201cPacts\u201d The Pact programming language is named after one of its key features, known as \u201cPacts\u201d. \u201cPacts\u201d solve an important blockchain problem in privacy-preserving blockchains. To maintain privacy on a blockchain, participants can only run a subset of smart contracts. In these cases, the databases of each of the participants become disjointed. Pact solves this problem using coroutines. Coroutines are functions that can start and stop at key points in a function\u2019s execution. These coroutines are called pacts. They define the steps to be executed by different entities as sequential transactions on the blockchain. Learn More This is only a few of the important features that make Pact such a powerful language for writing smart contracts. There are many resources available to help you learn more about Pact. To get you started, here\u2019s a list of places you can go. Where to go next: Join the Discord Channel for community discussion. Read the The Pact Smart-Contract Language White Paper to learn more about the creation of Pact. Read the Pact documentation for a detailed look at everything the language offers. Follow the Pact GitHub page for the latest updates on Pact development. Ask questions on Stack Overflow using #pact-lang . Along with all of these resources, you can also continue this tutorial series. Throughout these tutorials, you\u2019ll learn all about Pact by walking through each of its features, building real world applications, and exploring new ideas for yourself that take the language in directions no one has even thought of yet. Feel free to join the community and reach out if you have any questions. We\u2019re extremely excited to help you start your journey as a Pact smart contract developer.","title":"**Welcome to Pact**"},{"location":"beginner/welcome-to-pact/#welcome-to-pact","text":"Welcome to the Pact smart contract programming language! In this tutorial, we\u2019ll introduce Pact, explain some of its core features, and help you take your first steps toward becoming a Pact smart contract developer. Topics covered in this tutorial Introduction to Pact Pact Key Features Other Features Learn More About Pact The goal is to familiarize you with what Pact is, what it is used for, and some key decisions that influenced the design of this new language. Key Takeaway Pact is the safest, most user-friendly language for smart contracts. It\u2019s designed for security and performance. It is turing incomplete, human readable, supports upgradable contracts, and formal verification to make high performant and secure smart contracts.","title":"Welcome to Pact"},{"location":"beginner/welcome-to-pact/#welcome-to-pact-tutorial","text":"The following video covers some important details of the Pact programming language. You can also follow this tutorial using the text provided below the video. Subscribe to our YouTube channel to access the latest Pact tutorials!","title":"Welcome to Pact Tutorial"},{"location":"beginner/welcome-to-pact/#welcome-to-pact_1","text":"Pact is an open-source programming language for writing smart contracts . It\u2019s designed from the ground up to support the unique challenges of developing solutions to run on a blockchain. Pact empowers developers to create robust and high performance logic for transactions. It facilitates execution of mission-critical business operations quickly and effectively. Pact is designed with safety in mind. Its design is informed by existing approaches to smart contracts as well as stored procedure languages like SQL and LISP. Pact resembles a general-purpose, Turing-complete language. It includes LISP-like syntax, user functions, modules, and imperative style.","title":"Welcome to Pact"},{"location":"beginner/welcome-to-pact/#pact-smart-contracts","text":"A smart contract in Pact is comprised of three core elements: the code module, keysets, and tables. Each of these will be explored in more detail throughout the series. Here\u2019s a quick overview of each of these core elements. Module A module is where logic is defined for a smart contract. It contains functions, pact definitions, tables, and schemas. Keysets Pact Keysets specify authorization to different parts of the smart contract. They determine which accounts have access to which parts of the program. Tables Data in Pact is stored in tables. These tables have a \u201ckey-row\u201d structure and support schemas as well as a versioned, columnar history.","title":"Pact Smart Contracts"},{"location":"beginner/welcome-to-pact/#pact-key-features","text":"There are many important features that make Pact such a safe and high performance language for creating smart contracts. Here are a few that we\u2019ll focus on throughout this tutorial. Pact Key Features Turing incomplete Human Readable Upgradable Contracts Formal Verification First, Pact is a turing-incomplete language with deliberate constraints on its computational ability. This supports its design goal of \u201cjust enough\u201d power for transactional blockchain solutions without exposing you to unnecessary attack vectors. All Pact code is stored as written in a human-readable form on the ledger. It is installed onto the blockchain directly, so you can always review the running code and be sure of exactly what its doing. Pact also supports upgradable contracts so that you can offer new features, adapt to new workflow requirements, and fix bugs as they are discovered. Finally, Pact comes equipped with a powerful validation tool suite in the form of formal verification . Pact uses Z3, an open-source tool developed by Microsoft, to mathematically verify and test for bugs present in code. These features along with it\u2019s excellent tooling ecosystem and developer community makes writing smart contracts with Pact both fun and productive. Let\u2019s explore each of these features in a little more detail.","title":"Pact Key Features"},{"location":"beginner/welcome-to-pact/#turing-incomplete","text":"Pact contracts are Turing incomplete. A Turing complete language has the power to run any possible program. In some languages that\u2019s an extremely important feature. For smart contracts it\u2019s an incredibly dangerous feature. For that reason, Pact is designed to be turing incomplete, which places deliberate constraints on its computational ability. This supports its design goal of \u201cjust enough\u201d power for transactional blockchain solutions and helps ensure the security of its smart contracts. The first restriction in Pact is that there is no unbounded looping or recursion. Pact detects recursion and fails immediately. Looping is also only supported in special circumstances. The key benefits of this is to reduce cost and improve performance. This feature makes some of the most infamous and costly bugs discovered in other platforms not even possible with Pact. For more information on this topic, see our blog post Turing Completeness and Smart Contract Security .","title":"Turing Incomplete"},{"location":"beginner/welcome-to-pact/#human-readable","text":"Pact smart contracts are human readable. Smart contracts solve business problems that require both technical and non-technical expertise. To build the best smart contract solution, it\u2019s important for everyone involved to be able to understand and contribute to the development of the smart contract. For that reason, Pact was built to be simple to read and write. This helps provide complete transparency for the logic within its smart contracts. This approach also encourages shorter programs. Code executes directly on the ledger where it can be read easily by anyone. As a result, Pact is easy to understand. For example, here\u2019s a \u201cHello World\u201d smart contract using Pact. ( module helloWorld admin-keyset ( defun hello ( name ) ( format Hello {}! [ name ])) ) ( hello world ) Without having learned anything about the Pact language, you can already start to see how it works. We\u2019ll explain more of the terms and syntax in a later tutorial, but with these few simple lines of code, you\u2019re seeing a fully functioning Pact \u201cHello World\u201d smart contract. Once written, smart contracts are deployed to a blockchain. In Pact, the code on the blockchain is exactly the same as the code that was written. This means that no matter when you see the code it will always be exactly as it was built. This helps you know exactly what\u2019s going on so you can continue to moderate and improve your application over time.","title":"Human Readable"},{"location":"beginner/welcome-to-pact/#upgradable-contracts","text":"Pact contracts are upgradable. Upgradable contracts allow you to revise and improve your smart contracts over time. This allows you to offer new features and fix bugs as you continue developing your smart contract. None of this is possible with other smart contract languages, and it\u2019s an extremely helpful feature when trying to build the most impactful application for your business. The simplicity of upgrading contracts is further amplified by its tooling ecosystem. Compiler and runtime errors offer detailed information, with stack traces and function documentation to ensure you\u2019re making the best version of your smart contract. Pact\u2019s iterative development process is also supported by a feature-rich REPL helping you to rapidly improve and deploy new smart contracts. It includes features such as incremental transaction execution and environment and database inspection.","title":"Upgradable Contracts"},{"location":"beginner/welcome-to-pact/#formal-verification","text":"Pact is supported by formal verification, a system to mathematically prove that your code is safe. This means that Pact allows smart contract authors to express, automatically check, and formally verify that their code does not contain any bugs. This is the same system used to protect mission critical environments like nuclear power plants or air and space autopilot systems. You now have this same high level of security in every smart contract you write with Pact. Formal verification is a huge topic that\u2019s been covered extremely well in the Kadena blog. See our blog post Pact Formal Verification: Making Blockchain Smart Contracts Safer for more information on this topic.","title":"Formal Verification"},{"location":"beginner/welcome-to-pact/#other-pact-features","text":"There are many other features that Pact supports to help make your developer experience as rewarding as possible. These features include type inference, atomic transaction execution, RDBMS integration, confidential computing, and more! Type Inference Pact includes type inference. This makes it possible for code to be strongly-typed without declaring type information. It also has the added benefit of limiting run-time type enforcement. Developers can use a typecheck to add \u201cjust enough types\u201d. This eliminates warnings and only enforces types at runtime where needed. Atomic Transaction Execution Similar to RDBMS systems, Pact offers the benefit of atomic execution. This allows changes to commit to the database only if the code runs successfully. Any errors roll back changes, abort execution, and avoid costly mistakes. RDBMS Integration Pact is also designed to allow direct integration with an industrial RDBMS. This is helpful in cases that need efficient publication of historical data. Confidential Computing with \u201cPacts\u201d The Pact programming language is named after one of its key features, known as \u201cPacts\u201d. \u201cPacts\u201d solve an important blockchain problem in privacy-preserving blockchains. To maintain privacy on a blockchain, participants can only run a subset of smart contracts. In these cases, the databases of each of the participants become disjointed. Pact solves this problem using coroutines. Coroutines are functions that can start and stop at key points in a function\u2019s execution. These coroutines are called pacts. They define the steps to be executed by different entities as sequential transactions on the blockchain.","title":"Other Pact Features"},{"location":"beginner/welcome-to-pact/#learn-more","text":"This is only a few of the important features that make Pact such a powerful language for writing smart contracts. There are many resources available to help you learn more about Pact. To get you started, here\u2019s a list of places you can go. Where to go next: Join the Discord Channel for community discussion. Read the The Pact Smart-Contract Language White Paper to learn more about the creation of Pact. Read the Pact documentation for a detailed look at everything the language offers. Follow the Pact GitHub page for the latest updates on Pact development. Ask questions on Stack Overflow using #pact-lang . Along with all of these resources, you can also continue this tutorial series. Throughout these tutorials, you\u2019ll learn all about Pact by walking through each of its features, building real world applications, and exploring new ideas for yourself that take the language in directions no one has even thought of yet. Feel free to join the community and reach out if you have any questions. We\u2019re extremely excited to help you start your journey as a Pact smart contract developer.","title":"Learn More"}]}