{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Pact Pact Developer Tutorials","title":"Home"},{"location":"#welcome-to-pact","text":"Pact Developer Tutorials","title":"Welcome to Pact"},{"location":"beginner/hello-world-with-pact/","text":"Hello World with Pact Welcome to this Hello World with Pact Tutorial! In this tutorial, you'll learn how to create, deploy, and run functions on a Hello World smart contract with Pact. Topics covered in this tutorial Hello World Overview Write the Smart Contract Deploy to the Testnet Call the Deployed Contract The goal of this tutorial is to help you get familiar with the essential Pact concepts needed to write, deploy, and run a smart contract. Learning these concepts will help you to create more complex smart contracts later in the series. Key Takeaway It\u2019s simple to create and deploy a Hello World smart contract with Pact. You can deploy smart contracts from the online editor, call its functions, and view the output from the REPL. Hello World Overview To get started, navigate to the Pact online editor at pact.kadena.io/ . Once on the site, you can open the \u201cHello World\u201d module. To do this, navigate to the module explorer on the tool panel and open the \u201cHello World\u201d example. Note If you\u2019re not familiar with the module explorer, you can learn more here . You can also copy the code below and paste it into your editor. ;; ;; Hello, world! smart contract/module ;; ;;--------------------------------- ;; ;; Create an admin-keyset and add some key, for loading this contract! ;; ;; Make sure the message is signed with this added key as well. ;; ;;--------------------------------- ;; Keysets cannot be created in code, thus we read them in ;; from the load message data. ( define-keyset admin-keyset ( read-keyset admin-keyset )) ;; Define the module. ( module helloWorld admin-keyset A smart contract to greet the world. ( defun hello ( name ) Do the hello-world dance ( format Hello {}! [ name ])) ) ;; and say hello! ( hello world ) This code can also be found here on our GitHub. Write the Smart Contract Create a Keyset As you can see, the \u201cHello World\u201d smart contract starts by defining and reading a keyset. Keysets are a way to specify credentials for a user of the smart contract. The code you write within the smart contract can restrict access to users that own the keysets you define. You will see this done in the Hello World module. Line 16 (shown below) defines and reads a keyset named admin-keyset. ( define-keyset admin-keyset ( read-keyset admin-keyset )) Error If you look on line 16 line you will notice the following error. No such key in message: \u201cadmin-keyset\u201d This error exists because you are reading a keyset that does not exist. To get rid of this error you need to create a keyset named admin-keyset using the panel on the right. Steps to create a keyset Navigate to ENV Data Keysets from the right panel Enter admin-keyset Click Create The error message should now be gone. Create the Module Now that you have created a keyset, it\u2019s time to build the module for your smart contract. Modules are essential in Pact. They contain all the logic needed to run your smart contract. The syntax used to create a module is shown below. This line defines a module named helloWorld. It also gives the admin-keyset access to the code within this module. ( module helloWorld admin-keyset ;; MODULE CODE GOES HERE ) Define a Function The next step is to create the contract functions. Functions are defined within Pact modules using the keyword defun . For this smart contract, you\u2019ll define a function named hello that takes a parameter called name . ( defun hello ( name ) ;; FUNCTION CODE GOES HERE ) Do The Hello World Dance Within this function, you\u2019ll write a formatted line to output into the REPL. You can do this using the keyword format . Format allows you to manipulate strings and will help you specify the output of the function. ( format Hello {}! [ name ]) This line outputs a string to the REPL that says Hello followed by the string input to the function parameter name . The module for this smart contract is already complete! While this module is pretty simple, it gives you a great start to begin building more complex smart contracts. Say Hello World! The final step in this smart contract is to write \u201cHello World\u201d to the REPL. To do this, write a line below the module that calls the function and provide the input for name. ( hello world ) The line above calls the function hello and specifies the name as \u201cworld\u201d. You can change this input to any name you\u2019d like. Load into REPL Having written the smart contract, you are ready to load it into the REPL. A REPL is an interactive computing environment. It stands for read, eval, print, loop. This REPL exists within the online editor allowing you to run Pact code from within the browser. To load a contract into the REPL, select the Load into REPL button at the top of your editor. If everything is working correctly, you will see the REPL open up on the right side of your screen with the Hello World message as shown below. ;; Welcome to the Pact interactive repl ;; Use LOAD into REPL button to execute editor text ;; then just type at the pact prompt to interact! ;; ;; To reset the REPL type reset ! Hello world! pact If you can see this message, your Hello World smart contract is running from within the REPL. Deploy to the Testnet Loading into the REPL helps you test that your contract is working correctly, but it doesn't deploy it to a blockchain. When you're ready, you'll need to complete a few more steps to deploy your Hello World smart contract. Here\u2019s a quick summary of the steps needed to deploy to the blockchain. Step 1: Update Module Name Step 2: Update admin-keyset Name Step 3: Update Code Step 4: Create a Key Step 5: Set your deployment settings Update Module Name First, you need to update the module name. This name needs to be unique across all module names that exist on the blockchain. Choose any unique name you\u2019d like. For example, my module name is helloWorld-tutorial (choose a unique name that is different than mine). ( module helloWorld-tutorial admin-keyset ;; code goes here ) Note This unique module name is a requirement caused by a feature in Pact that allows you to upgrade your smart contracts. You will explore this idea in further detail later when you learn about upgrading contracts. Error You may come across the following error message when you attempt to deploy your contract. terminal ERROR: Command execution failed: (read-keyset \"admin-keyset-hel...: Failure: No such key in message: \"admin-keyset-helloworld\" This error means that an existing module on the blockchain already has the name you chose. Update the module name and redeploy the contract to resolve this error. Update admin-keyset Name Along with a unique module name, you\u2019ll also need a unique keyset name. This unique keyset ensures that only users with the keyset you define can gain access to the module. Delete the admin-keyset and create a new keyset with any unique name you like. The example below shows a new keyset named admin-keyset-helloworld . Update Code Having created a new keyset, you now need to update the code to match the name of the keyset you created. This name appears a few times in the smart contract so be careful to update each one. ( define-keyset admin-keyset-helloworld ( read-keyset admin-keyset-helloworld )) ( module helloWorld-tutorial admin-keyset-helloworld ( defun hello ( name ) ( format Hello {}! [ name ])) ) ( hello world ) Create a Key The purpose of the keyset is to hold keys that you can use to sign and verify your identity. When loading the contract to the REPL you were able to get away without having this key. To deploy your contract you need to make this key. You can create a key by completing the following steps. Select Enter Key Name Type the Key name Click Generate A simple convention for creating your key is to name it similar to the keyset. After creating your key, you\u2019ll see a checkbox appear under the admin-keyset with the name of the key. Select this checkbox to associate this key with the keyset. Set your deployment settings At the top of the screen, select Deploy . This will open a box that allows you to set your deployment settings. Once in the deployment settings, select either test-chain-01 or test-chain-02 to deploy your contract. Next, select the checkbox to sign this deployment with the key you created. Finally, select \"deploy contract\". If everything worked correctly, you should now see the string \u201cHello World!\u201d appear on the right panel as a message. At this point, you have deployed your Hello World smart contract with Pact. Congratulations! Call the Deployed Contract A fantastic feature of deploying to the blockchain is that anyone can now run the deployed code. You can check for yourself and run the function available on your own \u201cHello World\u201d smart contract. Module Explorer To do this, you\u2019ll need to first find the contract from the module explorer. Start by selecting the module explorer from the tool panel. Once there, navigate to the Deployed Contracts section and type the name of your contract. The name of your contract will be the same name as the module you created. After it appears, select view to see functions that are available for your smart contract. Find Function After selecting view , you should see the function named hello as an available option. Click call to open the screen that allows you to place your inputs into this function. Call Function Once on the Function: hello screen, you\u2019re ready to call your function. Steps to call a function Provide a string to pass in as an input. Be sure to surround this string in quotes. Select the checkbox to sign this call with the key. Click call to call your function. See the Output If everything worked out correctly, you should see the new function call appear as a new message! Now you can you call functions on the code you\u2019ve written, and you can call that code after it exists on the blockchain. You can use this same idea to call functions on any other contracts that have been deployed to the blockchain. Try for yourself to see if you can make function calls on other smart contracts. Review Congratulations on completing this tutorial! Throughout this tutorial you built, deployed, and ran functions on your Hello World smart contract with Pact. You\u2019re now prepared to play around and try anything you\u2019d like. You can create and define new keysets, change the parameters, or add anything that comes to mind. If you get lost, you can always go back to the module explorer to reload the original code. You can also visit the documentation using the link on the top right of the screen. Here you'll find more information about terminology, syntax, and other important ideas. If you\u2019re up for it, you can also load in different modules using the explorer to see how a different program looks.","title":"Hello World with Pact"},{"location":"beginner/hello-world-with-pact/#hello-world-with-pact","text":"Welcome to this Hello World with Pact Tutorial! In this tutorial, you'll learn how to create, deploy, and run functions on a Hello World smart contract with Pact. Topics covered in this tutorial Hello World Overview Write the Smart Contract Deploy to the Testnet Call the Deployed Contract The goal of this tutorial is to help you get familiar with the essential Pact concepts needed to write, deploy, and run a smart contract. Learning these concepts will help you to create more complex smart contracts later in the series. Key Takeaway It\u2019s simple to create and deploy a Hello World smart contract with Pact. You can deploy smart contracts from the online editor, call its functions, and view the output from the REPL.","title":"Hello World with Pact"},{"location":"beginner/hello-world-with-pact/#hello-world-overview","text":"To get started, navigate to the Pact online editor at pact.kadena.io/ . Once on the site, you can open the \u201cHello World\u201d module. To do this, navigate to the module explorer on the tool panel and open the \u201cHello World\u201d example. Note If you\u2019re not familiar with the module explorer, you can learn more here . You can also copy the code below and paste it into your editor. ;; ;; Hello, world! smart contract/module ;; ;;--------------------------------- ;; ;; Create an admin-keyset and add some key, for loading this contract! ;; ;; Make sure the message is signed with this added key as well. ;; ;;--------------------------------- ;; Keysets cannot be created in code, thus we read them in ;; from the load message data. ( define-keyset admin-keyset ( read-keyset admin-keyset )) ;; Define the module. ( module helloWorld admin-keyset A smart contract to greet the world. ( defun hello ( name ) Do the hello-world dance ( format Hello {}! [ name ])) ) ;; and say hello! ( hello world ) This code can also be found here on our GitHub.","title":"Hello World Overview"},{"location":"beginner/hello-world-with-pact/#write-the-smart-contract","text":"","title":"Write the Smart Contract"},{"location":"beginner/hello-world-with-pact/#create-a-keyset","text":"As you can see, the \u201cHello World\u201d smart contract starts by defining and reading a keyset. Keysets are a way to specify credentials for a user of the smart contract. The code you write within the smart contract can restrict access to users that own the keysets you define. You will see this done in the Hello World module. Line 16 (shown below) defines and reads a keyset named admin-keyset. ( define-keyset admin-keyset ( read-keyset admin-keyset )) Error If you look on line 16 line you will notice the following error. No such key in message: \u201cadmin-keyset\u201d This error exists because you are reading a keyset that does not exist. To get rid of this error you need to create a keyset named admin-keyset using the panel on the right.","title":"Create a Keyset"},{"location":"beginner/hello-world-with-pact/#steps-to-create-a-keyset","text":"Navigate to ENV Data Keysets from the right panel Enter admin-keyset Click Create The error message should now be gone.","title":"Steps to create a keyset"},{"location":"beginner/hello-world-with-pact/#create-the-module","text":"Now that you have created a keyset, it\u2019s time to build the module for your smart contract. Modules are essential in Pact. They contain all the logic needed to run your smart contract. The syntax used to create a module is shown below. This line defines a module named helloWorld. It also gives the admin-keyset access to the code within this module. ( module helloWorld admin-keyset ;; MODULE CODE GOES HERE )","title":"Create the Module"},{"location":"beginner/hello-world-with-pact/#define-a-function","text":"The next step is to create the contract functions. Functions are defined within Pact modules using the keyword defun . For this smart contract, you\u2019ll define a function named hello that takes a parameter called name . ( defun hello ( name ) ;; FUNCTION CODE GOES HERE )","title":"Define a Function"},{"location":"beginner/hello-world-with-pact/#do-the-hello-world-dance","text":"Within this function, you\u2019ll write a formatted line to output into the REPL. You can do this using the keyword format . Format allows you to manipulate strings and will help you specify the output of the function. ( format Hello {}! [ name ]) This line outputs a string to the REPL that says Hello followed by the string input to the function parameter name . The module for this smart contract is already complete! While this module is pretty simple, it gives you a great start to begin building more complex smart contracts.","title":"Do The Hello World Dance"},{"location":"beginner/hello-world-with-pact/#say-hello-world","text":"The final step in this smart contract is to write \u201cHello World\u201d to the REPL. To do this, write a line below the module that calls the function and provide the input for name. ( hello world ) The line above calls the function hello and specifies the name as \u201cworld\u201d. You can change this input to any name you\u2019d like.","title":"Say Hello World!"},{"location":"beginner/hello-world-with-pact/#load-into-repl","text":"Having written the smart contract, you are ready to load it into the REPL. A REPL is an interactive computing environment. It stands for read, eval, print, loop. This REPL exists within the online editor allowing you to run Pact code from within the browser. To load a contract into the REPL, select the Load into REPL button at the top of your editor. If everything is working correctly, you will see the REPL open up on the right side of your screen with the Hello World message as shown below. ;; Welcome to the Pact interactive repl ;; Use LOAD into REPL button to execute editor text ;; then just type at the pact prompt to interact! ;; ;; To reset the REPL type reset ! Hello world! pact If you can see this message, your Hello World smart contract is running from within the REPL.","title":"Load into REPL"},{"location":"beginner/hello-world-with-pact/#deploy-to-the-testnet","text":"Loading into the REPL helps you test that your contract is working correctly, but it doesn't deploy it to a blockchain. When you're ready, you'll need to complete a few more steps to deploy your Hello World smart contract. Here\u2019s a quick summary of the steps needed to deploy to the blockchain. Step 1: Update Module Name Step 2: Update admin-keyset Name Step 3: Update Code Step 4: Create a Key Step 5: Set your deployment settings","title":"Deploy to the Testnet"},{"location":"beginner/hello-world-with-pact/#update-module-name","text":"First, you need to update the module name. This name needs to be unique across all module names that exist on the blockchain. Choose any unique name you\u2019d like. For example, my module name is helloWorld-tutorial (choose a unique name that is different than mine). ( module helloWorld-tutorial admin-keyset ;; code goes here ) Note This unique module name is a requirement caused by a feature in Pact that allows you to upgrade your smart contracts. You will explore this idea in further detail later when you learn about upgrading contracts. Error You may come across the following error message when you attempt to deploy your contract. terminal ERROR: Command execution failed: (read-keyset \"admin-keyset-hel...: Failure: No such key in message: \"admin-keyset-helloworld\" This error means that an existing module on the blockchain already has the name you chose. Update the module name and redeploy the contract to resolve this error.","title":"Update Module Name"},{"location":"beginner/hello-world-with-pact/#update-admin-keyset-name","text":"Along with a unique module name, you\u2019ll also need a unique keyset name. This unique keyset ensures that only users with the keyset you define can gain access to the module. Delete the admin-keyset and create a new keyset with any unique name you like. The example below shows a new keyset named admin-keyset-helloworld .","title":"Update admin-keyset Name"},{"location":"beginner/hello-world-with-pact/#update-code","text":"Having created a new keyset, you now need to update the code to match the name of the keyset you created. This name appears a few times in the smart contract so be careful to update each one. ( define-keyset admin-keyset-helloworld ( read-keyset admin-keyset-helloworld )) ( module helloWorld-tutorial admin-keyset-helloworld ( defun hello ( name ) ( format Hello {}! [ name ])) ) ( hello world )","title":"Update Code"},{"location":"beginner/hello-world-with-pact/#create-a-key","text":"The purpose of the keyset is to hold keys that you can use to sign and verify your identity. When loading the contract to the REPL you were able to get away without having this key. To deploy your contract you need to make this key. You can create a key by completing the following steps. Select Enter Key Name Type the Key name Click Generate A simple convention for creating your key is to name it similar to the keyset. After creating your key, you\u2019ll see a checkbox appear under the admin-keyset with the name of the key. Select this checkbox to associate this key with the keyset.","title":"Create a Key"},{"location":"beginner/hello-world-with-pact/#set-your-deployment-settings","text":"At the top of the screen, select Deploy . This will open a box that allows you to set your deployment settings. Once in the deployment settings, select either test-chain-01 or test-chain-02 to deploy your contract. Next, select the checkbox to sign this deployment with the key you created. Finally, select \"deploy contract\". If everything worked correctly, you should now see the string \u201cHello World!\u201d appear on the right panel as a message. At this point, you have deployed your Hello World smart contract with Pact. Congratulations!","title":"Set your deployment settings"},{"location":"beginner/hello-world-with-pact/#call-the-deployed-contract","text":"A fantastic feature of deploying to the blockchain is that anyone can now run the deployed code. You can check for yourself and run the function available on your own \u201cHello World\u201d smart contract.","title":"Call the Deployed Contract"},{"location":"beginner/hello-world-with-pact/#module-explorer","text":"To do this, you\u2019ll need to first find the contract from the module explorer. Start by selecting the module explorer from the tool panel. Once there, navigate to the Deployed Contracts section and type the name of your contract. The name of your contract will be the same name as the module you created. After it appears, select view to see functions that are available for your smart contract.","title":"Module Explorer"},{"location":"beginner/hello-world-with-pact/#find-function","text":"After selecting view , you should see the function named hello as an available option. Click call to open the screen that allows you to place your inputs into this function.","title":"Find Function"},{"location":"beginner/hello-world-with-pact/#call-function","text":"Once on the Function: hello screen, you\u2019re ready to call your function. Steps to call a function Provide a string to pass in as an input. Be sure to surround this string in quotes. Select the checkbox to sign this call with the key. Click call to call your function.","title":"Call Function"},{"location":"beginner/hello-world-with-pact/#see-the-output","text":"If everything worked out correctly, you should see the new function call appear as a new message! Now you can you call functions on the code you\u2019ve written, and you can call that code after it exists on the blockchain. You can use this same idea to call functions on any other contracts that have been deployed to the blockchain. Try for yourself to see if you can make function calls on other smart contracts.","title":"See the Output"},{"location":"beginner/hello-world-with-pact/#review","text":"Congratulations on completing this tutorial! Throughout this tutorial you built, deployed, and ran functions on your Hello World smart contract with Pact. You\u2019re now prepared to play around and try anything you\u2019d like. You can create and define new keysets, change the parameters, or add anything that comes to mind. If you get lost, you can always go back to the module explorer to reload the original code. You can also visit the documentation using the link on the top right of the screen. Here you'll find more information about terminology, syntax, and other important ideas. If you\u2019re up for it, you can also load in different modules using the explorer to see how a different program looks.","title":"Review"},{"location":"beginner/online-editor/","text":"Pact Online Editor Welcome to this tutorial on the Pact Online Editor! In this tutorial, you\u2019ll learn about the Pact Online editor, a powerful tool for developing smart contracts with Pact. Topics covered in this tutorial Introduction to the Editor Navigation Bar Code Editor Tool Panel The goal of this tutorial is to get you familiar with each of the editor\u2019s powerful features so that you can use it to build smart contracts using pact. Key Takeaway The Pact Online Editor is a robust development environment for Pact. It gives you access to many useful features for smart contract development. These features allow you to easily build and test contracts before deploying them to either your private chain or Chainweb . Introduction to the Editor The Pact Online Editor is a web-based REPL that allows you to write Pact code, manage keysets, deploy smart contracts, and explore other smart contracts. These and many other features make the online editor an ideal place to build, test, and deploy your smart contracts. To get started with the Pact Online Editor, navigate to pact.kadena.io/ . Basic Layout Here you'll see a clean and intuitive layout, giving you access to the tools you need without cluttering the developer experience. The interface consists of three main sections; the code editor , the navigation bar , and the tool panel . Code Editor An area for writing and editing your smart contracts. Navigation Bar Includes relevant documentation links and allows you to load code into the REPL or deploy smart contract. Tool Panel Provides essential functionality needed to manage keys, interact with the REPL, view messages, explore modules, and more. Each of these features helps provide an intuitive developer experience. These features make smart contract development both fun and rewarding. Navigation Bar You can locate the navigation bar at the top of the screen. It allows you to load your contract into the REPL, or to deploy the contract to a live network. It also shows the Pact version number and links to these tutorials, the Pact language documentation and the Kadena homepage. Load into REPL Selecting \u201cLoad into REPL\u201d loads text from the editor into the REPL and executes the commands. After selecting this button, you\u2019ll also notice that it opens an interactive terminal you can use to run Pact commands. You\u2019ll use this feature often when exploring the REPL later in this tutorial. Deploy The deploy button is used to deploy smart contracts onto the blockchain. Select Deploy to view the features available to you. Here you\u2019ll have the option to choose a server, set a few settings, sign the transaction and more. This tutorial doesn't go over the details of each of these options. If you'd like, view Hello World with Pact for a full description of smart contract deployment with the Online Editor. You can close this window by either hitting cancel or the X on the top right. Navigation The navigation bar also provides some necessary information and links to help you get started with Pact. Pact Version 2.6.1 At the time of this tutorial, Pact is currently on version 2.6.1. As this continues to update its likely that some of the features we explore will continue to improve. Available Links Links to the Pact tutorials, developer documentation and Kadena homepage can also be found on the navigation bar. Documentation Provides an in-depth look at the Pact programming language. Tutorials Learn more about Pact by completing tutorials like this. Kadena Explore the Kadena blockchain, which is the enterprise-grade blockchain that Pact runs on. Newsletter You can also join the newsletter to stay up to date on the latest Kadena and Pact information here . Code Editor The code editor provides a familiar editing interface. It comes equipped with both inline error reporting and formal verification . Inline Error Reporting Inline error reporting ensures that you have clear direction on how to fix errors that may exist in your code. For example, if you look at line 17 of your smart contract you\u2019ll see the error shown above. This and other errors types state the issue and help you to fix problems that may be affecting your smart contract. Error You can fix this error by creating an admin-keyset. Creating an admin-keyset can be done using the tool panel which we\u2019ll discuss more shortly. Formal Verification The online editor also supports formal verification. Formal verification is a process for automatically testing the correctness of your code. It mathematically proves that your contract has absolutely no security vulnerabilities. It also alerts you to any potential errors and vulnerabilities helping you create secure code quickly and effectively. Formal verification is a tremendous innovation for smart contract languages. For more information on how this helps you develop safer smart contracts, read our Medium post Pact Formal Verification: Making Blockchain Smart Contracts Safer. Tool Panel The tool panel gives you access to many beneficial features while developing smart contracts. It helps you set-up your environment, run commands in the interactive REPL, read messages, and explore other modules that exist on the network. Env The first option available to you in the tool panel is the environment. Select Env to view sections for addressing errors and creating and managing data and wallets from the UI. Manage Errors Errors can be viewed and fixed using the errors section. As you can see here, it currently shows an error that there is no such key in the message \u2018admin-keyset\u2019. This error is the same as what you saw previously in the editor. To fix this error, select the fix button on the right side of the screen. As you\u2019ll see, this creates a keyset for you in the data section below. This along with many other errors and warnings can be fixed using this simple tool. Coming up you\u2019ll see how to create this keyset manually. Remove the admin-keyset by selecting the x to the right of the recently created keyset. Create and Manage Keysets The data section allows you to create and manage keysets. To get started, select the input Enter Keyset Name type admin-keyset then click create . You should now see admin-keyset appear under your list of available keysets. Tip You can delete keys using the x over on the right. You\u2019ll also see a dropdown that allows you to select keys-all, keys-2, and keys-any. These options refer to the number of key signatures required to validate a transaction. For more information on this and a more in-depth explanation of keys in Pact, see the tutorial on Pact Keysets. Result Each key created has a JSON representation available for programmatic access. In the Result tab, you can see the keys you have created shown in JSON. Raw You can also create keysets using the JSON format rather than the user interface. Creating keysets with JSON is done using the Raw tab. To create a new key, specify a keyset name , keys , and pred , similar to the format seen in the Result tab. Info Pred Stands for \u201cPredicate Function\u201d. A predicate function is a boolean value function evaluating to either true or false. In this case, it will be one of the options keys-any , keys-2 , or keys-all as you had seen in the keysets tab. Predicate functions specify which keys need to sign the transaction for it to be valid. Add Key As the name suggests, keysets are used to hold keys. You can create these keys in the section below Data named Wallet. To create a wallet, first, enter a key name then select Generate . I\u2019ll name mine admin-key, but you can choose whatever you\u2019d like You should now see the key name, the public key, and the private key you generated. This key is useful any time you'd like to deploy or interact with a smart contract. REPL A great way to get started with Pact is to jump in and start writing code for yourself. The REPL helps you to do this quickly and allows you to run Pact commands from directly within the browser. Try running some of the commands shown below to get started with the REPL. Add numbers Pact uses prefix notation for math operators. Prefix notation is standard in LISP-like languages like Pact. What this means is that the operator precedes the two values it\u2019s operating on. (+ 2 2) 4 Strings Concatenate strings using +. Try saying Hello REPL. pact (+ Hello REPL ) \u201cHello REPL\u201d Try More Commands You can view many more commands in the Pact Syntax Documentation and Built-in Functions Documentation . Try running a few for yourself to learn more about the Pact programming langauge. Run Commands from the Code Editor It\u2019s also possible to run REPL commands from the code editor . To get started, delete the existing code from the code editor and select REPL from the tool panel. To run commands using the editor, enter a command and then select Load into REPL at the top of the screen. Experiment with other commands yourself by running some of the ones shown previously. Messages Code editors often provide messages to developers that help them identify errors and log outputs. These are useful ways to debug programs and fix potential issues with your contract. In the Pact Online Editor, these messages can be seen in the messages tab in the Toolbar. Module Explorer Another powerful tool provided by the editor is the Module Explorer . The module explorer allows you to load example contracts, deployed contracts, and to run functions that exist on any contracts that exist on the network! Click on the button module explorer to get started. Here you\u2019ll see a section for example contracts and a section for deployed contracts . Example Contracts The example contracts section allows you to load example contracts directly into your editor. You can use this code however you\u2019d like, and can always come back here to reload the code again if needed. When you first loaded pact.kadena.io/ the Formal Verification contract shown here is automatically loaded. Select view open to reload this contract. View other Smart Contracts You can also view other smart contracts. Select View Open on any smart contract to load its code into the code editor. View Functions You can view a summary of functions that exist within any smart contract from within the module explorer . After selecting View , you will see an overview of these functions. The image below shows the functions in the example Simple Payment . Deployed Contracts You can also view any contract that has been deployed to the network using the Module Explorer. You can search by name, by chain, or by navigating the pages using the arrow buttons. Once you find a particular contract, select view . From here you can look at each function on the contract, and when you\u2019re ready, select open to see the contract code. You can also call functions on modules from within the editor. For more information on calling functions, see Hello World with Pact. Review Congratulations! You have completed your introduction to the Pact Online Editor . The Pact Online Editor is an excellent tool built to make developing smart contracts with Pact both fun and simple. Topic Summary Throughout this tutorial, you explored each core feature of the editor's interface. This included each of the following topics. Introduction to the Editor Navigation Bar Code Editor Tool Panel Take some time now to explore each of the features we discussed and get used to navigating this new environment. As you continue with Pact, you\u2019ll use this tool regularly to help explore new ideas, write smart contracts, manage keysets, and explore modules. Throughout these tutorials, you\u2019ll use this tool very often. By getting used to these core features, you're on your way to making amazing new applications using Pact.","title":"Online Editor"},{"location":"beginner/online-editor/#pact-online-editor","text":"Welcome to this tutorial on the Pact Online Editor! In this tutorial, you\u2019ll learn about the Pact Online editor, a powerful tool for developing smart contracts with Pact. Topics covered in this tutorial Introduction to the Editor Navigation Bar Code Editor Tool Panel The goal of this tutorial is to get you familiar with each of the editor\u2019s powerful features so that you can use it to build smart contracts using pact. Key Takeaway The Pact Online Editor is a robust development environment for Pact. It gives you access to many useful features for smart contract development. These features allow you to easily build and test contracts before deploying them to either your private chain or Chainweb .","title":"Pact Online Editor"},{"location":"beginner/online-editor/#introduction-to-the-editor","text":"The Pact Online Editor is a web-based REPL that allows you to write Pact code, manage keysets, deploy smart contracts, and explore other smart contracts. These and many other features make the online editor an ideal place to build, test, and deploy your smart contracts. To get started with the Pact Online Editor, navigate to pact.kadena.io/ .","title":"Introduction to the Editor"},{"location":"beginner/online-editor/#basic-layout","text":"Here you'll see a clean and intuitive layout, giving you access to the tools you need without cluttering the developer experience. The interface consists of three main sections; the code editor , the navigation bar , and the tool panel . Code Editor An area for writing and editing your smart contracts. Navigation Bar Includes relevant documentation links and allows you to load code into the REPL or deploy smart contract. Tool Panel Provides essential functionality needed to manage keys, interact with the REPL, view messages, explore modules, and more. Each of these features helps provide an intuitive developer experience. These features make smart contract development both fun and rewarding.","title":"Basic Layout"},{"location":"beginner/online-editor/#navigation-bar","text":"You can locate the navigation bar at the top of the screen. It allows you to load your contract into the REPL, or to deploy the contract to a live network. It also shows the Pact version number and links to these tutorials, the Pact language documentation and the Kadena homepage.","title":"Navigation Bar"},{"location":"beginner/online-editor/#load-into-repl","text":"Selecting \u201cLoad into REPL\u201d loads text from the editor into the REPL and executes the commands. After selecting this button, you\u2019ll also notice that it opens an interactive terminal you can use to run Pact commands. You\u2019ll use this feature often when exploring the REPL later in this tutorial.","title":"Load into REPL"},{"location":"beginner/online-editor/#deploy","text":"The deploy button is used to deploy smart contracts onto the blockchain. Select Deploy to view the features available to you. Here you\u2019ll have the option to choose a server, set a few settings, sign the transaction and more. This tutorial doesn't go over the details of each of these options. If you'd like, view Hello World with Pact for a full description of smart contract deployment with the Online Editor. You can close this window by either hitting cancel or the X on the top right.","title":"Deploy"},{"location":"beginner/online-editor/#navigation","text":"The navigation bar also provides some necessary information and links to help you get started with Pact. Pact Version 2.6.1 At the time of this tutorial, Pact is currently on version 2.6.1. As this continues to update its likely that some of the features we explore will continue to improve.","title":"Navigation"},{"location":"beginner/online-editor/#available-links","text":"Links to the Pact tutorials, developer documentation and Kadena homepage can also be found on the navigation bar. Documentation Provides an in-depth look at the Pact programming language. Tutorials Learn more about Pact by completing tutorials like this. Kadena Explore the Kadena blockchain, which is the enterprise-grade blockchain that Pact runs on. Newsletter You can also join the newsletter to stay up to date on the latest Kadena and Pact information here .","title":"Available Links"},{"location":"beginner/online-editor/#code-editor","text":"The code editor provides a familiar editing interface. It comes equipped with both inline error reporting and formal verification .","title":"Code Editor"},{"location":"beginner/online-editor/#inline-error-reporting","text":"Inline error reporting ensures that you have clear direction on how to fix errors that may exist in your code. For example, if you look at line 17 of your smart contract you\u2019ll see the error shown above. This and other errors types state the issue and help you to fix problems that may be affecting your smart contract. Error You can fix this error by creating an admin-keyset. Creating an admin-keyset can be done using the tool panel which we\u2019ll discuss more shortly.","title":"Inline Error Reporting"},{"location":"beginner/online-editor/#formal-verification","text":"The online editor also supports formal verification. Formal verification is a process for automatically testing the correctness of your code. It mathematically proves that your contract has absolutely no security vulnerabilities. It also alerts you to any potential errors and vulnerabilities helping you create secure code quickly and effectively. Formal verification is a tremendous innovation for smart contract languages. For more information on how this helps you develop safer smart contracts, read our Medium post Pact Formal Verification: Making Blockchain Smart Contracts Safer.","title":"Formal Verification"},{"location":"beginner/online-editor/#tool-panel","text":"The tool panel gives you access to many beneficial features while developing smart contracts. It helps you set-up your environment, run commands in the interactive REPL, read messages, and explore other modules that exist on the network.","title":"Tool Panel"},{"location":"beginner/online-editor/#env","text":"The first option available to you in the tool panel is the environment. Select Env to view sections for addressing errors and creating and managing data and wallets from the UI.","title":"Env"},{"location":"beginner/online-editor/#manage-errors","text":"Errors can be viewed and fixed using the errors section. As you can see here, it currently shows an error that there is no such key in the message \u2018admin-keyset\u2019. This error is the same as what you saw previously in the editor. To fix this error, select the fix button on the right side of the screen. As you\u2019ll see, this creates a keyset for you in the data section below. This along with many other errors and warnings can be fixed using this simple tool. Coming up you\u2019ll see how to create this keyset manually. Remove the admin-keyset by selecting the x to the right of the recently created keyset.","title":"Manage Errors"},{"location":"beginner/online-editor/#create-and-manage-keysets","text":"The data section allows you to create and manage keysets. To get started, select the input Enter Keyset Name type admin-keyset then click create . You should now see admin-keyset appear under your list of available keysets. Tip You can delete keys using the x over on the right. You\u2019ll also see a dropdown that allows you to select keys-all, keys-2, and keys-any. These options refer to the number of key signatures required to validate a transaction. For more information on this and a more in-depth explanation of keys in Pact, see the tutorial on Pact Keysets.","title":"Create and Manage Keysets"},{"location":"beginner/online-editor/#result","text":"Each key created has a JSON representation available for programmatic access. In the Result tab, you can see the keys you have created shown in JSON.","title":"Result"},{"location":"beginner/online-editor/#raw","text":"You can also create keysets using the JSON format rather than the user interface. Creating keysets with JSON is done using the Raw tab. To create a new key, specify a keyset name , keys , and pred , similar to the format seen in the Result tab. Info Pred Stands for \u201cPredicate Function\u201d. A predicate function is a boolean value function evaluating to either true or false. In this case, it will be one of the options keys-any , keys-2 , or keys-all as you had seen in the keysets tab. Predicate functions specify which keys need to sign the transaction for it to be valid.","title":"Raw"},{"location":"beginner/online-editor/#add-key","text":"As the name suggests, keysets are used to hold keys. You can create these keys in the section below Data named Wallet. To create a wallet, first, enter a key name then select Generate . I\u2019ll name mine admin-key, but you can choose whatever you\u2019d like You should now see the key name, the public key, and the private key you generated. This key is useful any time you'd like to deploy or interact with a smart contract.","title":"Add Key"},{"location":"beginner/online-editor/#repl","text":"A great way to get started with Pact is to jump in and start writing code for yourself. The REPL helps you to do this quickly and allows you to run Pact commands from directly within the browser. Try running some of the commands shown below to get started with the REPL. Add numbers Pact uses prefix notation for math operators. Prefix notation is standard in LISP-like languages like Pact. What this means is that the operator precedes the two values it\u2019s operating on. (+ 2 2) 4 Strings Concatenate strings using +. Try saying Hello REPL. pact (+ Hello REPL ) \u201cHello REPL\u201d Try More Commands You can view many more commands in the Pact Syntax Documentation and Built-in Functions Documentation . Try running a few for yourself to learn more about the Pact programming langauge. Run Commands from the Code Editor It\u2019s also possible to run REPL commands from the code editor . To get started, delete the existing code from the code editor and select REPL from the tool panel. To run commands using the editor, enter a command and then select Load into REPL at the top of the screen. Experiment with other commands yourself by running some of the ones shown previously.","title":"REPL"},{"location":"beginner/online-editor/#messages","text":"Code editors often provide messages to developers that help them identify errors and log outputs. These are useful ways to debug programs and fix potential issues with your contract. In the Pact Online Editor, these messages can be seen in the messages tab in the Toolbar.","title":"Messages"},{"location":"beginner/online-editor/#module-explorer","text":"Another powerful tool provided by the editor is the Module Explorer . The module explorer allows you to load example contracts, deployed contracts, and to run functions that exist on any contracts that exist on the network! Click on the button module explorer to get started. Here you\u2019ll see a section for example contracts and a section for deployed contracts .","title":"Module Explorer"},{"location":"beginner/online-editor/#example-contracts","text":"The example contracts section allows you to load example contracts directly into your editor. You can use this code however you\u2019d like, and can always come back here to reload the code again if needed. When you first loaded pact.kadena.io/ the Formal Verification contract shown here is automatically loaded. Select view open to reload this contract. View other Smart Contracts You can also view other smart contracts. Select View Open on any smart contract to load its code into the code editor.","title":"Example Contracts"},{"location":"beginner/online-editor/#view-functions","text":"You can view a summary of functions that exist within any smart contract from within the module explorer . After selecting View , you will see an overview of these functions. The image below shows the functions in the example Simple Payment .","title":"View Functions"},{"location":"beginner/online-editor/#deployed-contracts","text":"You can also view any contract that has been deployed to the network using the Module Explorer. You can search by name, by chain, or by navigating the pages using the arrow buttons. Once you find a particular contract, select view . From here you can look at each function on the contract, and when you\u2019re ready, select open to see the contract code. You can also call functions on modules from within the editor. For more information on calling functions, see Hello World with Pact.","title":"Deployed Contracts"},{"location":"beginner/online-editor/#review","text":"Congratulations! You have completed your introduction to the Pact Online Editor . The Pact Online Editor is an excellent tool built to make developing smart contracts with Pact both fun and simple. Topic Summary Throughout this tutorial, you explored each core feature of the editor's interface. This included each of the following topics. Introduction to the Editor Navigation Bar Code Editor Tool Panel Take some time now to explore each of the features we discussed and get used to navigating this new environment. As you continue with Pact, you\u2019ll use this tool regularly to help explore new ideas, write smart contracts, manage keysets, and explore modules. Throughout these tutorials, you\u2019ll use this tool very often. By getting used to these core features, you're on your way to making amazing new applications using Pact.","title":"Review"},{"location":"beginner/welcome-to-pact/","text":"Welcome to Pact Welcome to the Pact smart contract programming language! In this tutorial, you\u2019ll learn about Pact, get introduced to its core features, and take your first steps toward becoming a Pact smart contract developer. Topics covered in this tutorial Introduction to Pact Pact Key Features Other Features Learn More About Pact The goal is to familiarize you with what Pact is, how its used, and some critical decisions that influenced the design of this new language. Key Takeaway Pact is the safest, most user-friendly language for smart contracts. It\u2019s designed for security and performance. It is turing incomplete, human readable, supports upgradable contracts, and formal verification to make high performant and secure smart contracts. Introduction to Pact Pact is an open-source programming language for writing smart contracts . It\u2019s designed from the ground up to support the unique challenges of developing solutions to run on a blockchain. Pact empowers developers to create robust and high-performance logic for transactions. It facilitates execution of mission-critical business operations quickly and effectively. Pact is designed with safety in mind. Its design is informed by existing approaches to smart contracts as well as stored procedure languages like SQL and LISP. Pact resembles a general-purpose, Turing-complete language. It includes LISP-like syntax, user functions, modules, and imperative style. Pact Smart Contracts Pact smart contracts contain three core elements: the code module, keysets, and tables. The table below briefly introduces each of these core elements. Module A module defines the logic of a smart contract. It contains functions, pact definitions, tables, and schemas. Keysets Includes relevant documentation links and allows you to load code into the REPL, refresh the repl, or deploy smart contract. Tables Tables store data generated by Pact modules. These tables have a \u201ckey-row\u201d structure and support schemas as well as a versioned, columnar history. Each of these elements support a wide range of functionality. This ensures that you have the tools you need to create robust solutions for real-world problems. Pact Key Features There are many valuable features make Pact such a safe and high-performance language. Here are a few that we\u2019ll focus on throughout this tutorial. Pact Key Features Turing Incomplete Human Readable Upgradable Contracts Formal Verification First, Pact is a Turing incomplete language with deliberate constraints. This supports its design goal of \u201cjust enough\u201d power for blockchain solutions without exposing you to attacks. All Pact code gets stored as written in a human-readable form on the ledger. Pact smart contracts install directly onto the blockchain. This allows you to review the running code as it was written and be sure of exactly what it's doing. Pact also supports upgradable contracts . This allows you to offer new features, adapt to new workflow requirements, and fix bugs as they are discovered. Finally, Pact comes equipped with a powerful validation tool suite in the form of formal verification . Pact uses Z3, an open-source tool developed by Microsoft, to mathematically verify and test for bugs present in the code. These features come along with Pact's unique tooling ecosystem and developer community. All this makes writing smart contracts with Pact both fun and productive. The rest of the tutorial will explore each of these features in a little more detail. Turing Incomplete Pact contracts are Turing incomplete. A Turing complete language has the power to run any possible program. In some languages, Turing completeness is an extremely important feature. For smart contracts, it\u2019s an incredibly dangerous feature. For that reason, Pact is designed to be Turing incomplete which places deliberate constraints on its computational ability. This supports its design goal of \u201cjust enough\u201d power for transactional blockchain solutions and helps ensure the security of its smart contracts. The first restriction in Pact is that there is no unbounded looping or recursion. Pact detects recursion and fails immediately. Looping is also only supported in special circumstances. The key benefits of this are to reduce cost and improve performance. This feature makes some of the most infamous and costly bugs discovered in other platforms not even possible with Pact. For more information on this topic, see our blog post - Turing Completeness and Smart Contract Security . Human Readable Pact smart contracts are human readable. Smart contracts solve business problems that require both technical and non-technical expertise. Building the best smart contract solution requires everyone to understand and contribute to the development of the smart contract. For that reason, Pact was built to be simple to read and write. This simplicity helps provide complete transparency for the logic within its smart contracts. This approach also encourages shorter programs. The code executes directly on the ledger where it can be read easily by anyone. As a result, Pact is easy to understand. For example, here\u2019s a \u201cHello World\u201d smart contract using Pact. ( module helloWorld admin-keyset ( defun hello ( name ) ( format Hello {}! [ name ])) ) ( hello world ) Without having learned anything about the Pact language, you can already start to see how it works. With these few simple lines of code, you see a fully functioning Pact \u201cHello World\u201d smart contract. Once written, smart contracts are deployed to a blockchain. In Pact, the code on the blockchain is the same as the code that was written. Maintaining this code means that no matter when you see the code it will always be as it was written. This allows you to understand the code so you can continue to moderate and improve your application over time. Upgradable Contracts Pact contracts are upgradable. Upgradable contracts allow you to revise and improve your smart contracts over time. This allows you to offer new features and fix bugs as you continue developing your smart contract. None of this is possible with other smart contract languages, and it\u2019s a powerful feature when building impactful applications for your business. Pact's tooling ecosystem further amplifies the simplicity of upgrading contracts. Compiler and runtime errors offer detailed information, with stack traces and function documentation to ensure you\u2019re making the best version of your smart contract. Pact\u2019s iterative development process is also supported by a feature-rich REPL helping you to improve and deploy new smart contracts rapidly. It includes features such as incremental transaction execution and environment and database inspection. Formal Verification Pact is supported by formal verification, a system to mathematically prove that your code is safe. This means that Pact allows smart contract authors to express, automatically check, and formally verify that their code does not contain any bugs. Formal verification is the same system used to protect mission-critical environments like nuclear power plants or air and space autopilot systems. You now have this same high level of security in every smart contract you write with Pact. Formal verification is a huge topic that\u2019s been covered exceptionally well in the Kadena blog. See our blog post - Pact Formal Verification: Making Blockchain Smart Contracts Safer for more information on this topic. Other Pact Features There are many other features that Pact supports to help make your developer experience as rewarding as possible. Type Inference Pact includes type inference. This feature makes it possible for code to be strongly-typed without declaring type information. It also has the added benefit of limiting run-time type enforcement. Developers can use a typecheck to add \u201cjust enough types\u201d. Typecheck eliminates warnings and only enforces types at runtime where needed. Atomic Transaction Execution Similar to RDBMS systems, Pact offers the benefit of atomic execution. This benefit allows changes to commit to the database only if the code runs successfully. Any errors roll back changes, abort execution, and avoid costly mistakes. RDBMS Integration Pact is also designed to allow direct integration with an industrial RDBMS. This design is helpful in cases that need efficient publication of historical data. Confidential Computing with \u201cPacts\u201d The Pact programming language comes from one of its key features, known as \u201cPacts\u201d. \u201cPacts\u201d solve a significant blockchain problem in privacy-preserving blockchains. To maintain privacy on a blockchain, participants can only run a subset of smart contracts. In these cases, the databases of each of the participants become disjointed. Pact solves this problem using coroutines. Coroutines are functions that can start and stop at critical points in a function\u2019s execution. These coroutines are called pacts. They define the steps to be executed by different entities as sequential transactions on the blockchain. Learn More The features described in this post are only a few of the crucial features that make Pact such a powerful language for writing smart contracts. There are many resources available to help you learn more about Pact. Here are a list of resources you can use to get started. Where to go next Join the Discord Channel for community discussion. Read The Pact Smart-Contract Language White Paper to learn more about the creation of Pact. Read the Pact documentation for a detailed look at everything the language offers. Follow the Pact GitHub page for the latest updates on Pact development. Ask questions on Stack Overflow using #pact-lang . Along with all of these resources, you can also continue this tutorial series. Throughout these tutorials, you\u2019ll learn all about Pact by walking through each of its features, building real-world applications, and exploring new ideas for yourself that take the language in directions no one has even thought of yet. Feel free to join the community and reach out if you have any questions. We\u2019re incredibly excited to help you start your journey as a Pact smart contract developer.","title":"Welcome to Pact"},{"location":"beginner/welcome-to-pact/#welcome-to-pact","text":"Welcome to the Pact smart contract programming language! In this tutorial, you\u2019ll learn about Pact, get introduced to its core features, and take your first steps toward becoming a Pact smart contract developer. Topics covered in this tutorial Introduction to Pact Pact Key Features Other Features Learn More About Pact The goal is to familiarize you with what Pact is, how its used, and some critical decisions that influenced the design of this new language. Key Takeaway Pact is the safest, most user-friendly language for smart contracts. It\u2019s designed for security and performance. It is turing incomplete, human readable, supports upgradable contracts, and formal verification to make high performant and secure smart contracts.","title":"Welcome to Pact"},{"location":"beginner/welcome-to-pact/#introduction-to-pact","text":"Pact is an open-source programming language for writing smart contracts . It\u2019s designed from the ground up to support the unique challenges of developing solutions to run on a blockchain. Pact empowers developers to create robust and high-performance logic for transactions. It facilitates execution of mission-critical business operations quickly and effectively. Pact is designed with safety in mind. Its design is informed by existing approaches to smart contracts as well as stored procedure languages like SQL and LISP. Pact resembles a general-purpose, Turing-complete language. It includes LISP-like syntax, user functions, modules, and imperative style.","title":"Introduction to Pact"},{"location":"beginner/welcome-to-pact/#pact-smart-contracts","text":"Pact smart contracts contain three core elements: the code module, keysets, and tables. The table below briefly introduces each of these core elements. Module A module defines the logic of a smart contract. It contains functions, pact definitions, tables, and schemas. Keysets Includes relevant documentation links and allows you to load code into the REPL, refresh the repl, or deploy smart contract. Tables Tables store data generated by Pact modules. These tables have a \u201ckey-row\u201d structure and support schemas as well as a versioned, columnar history. Each of these elements support a wide range of functionality. This ensures that you have the tools you need to create robust solutions for real-world problems.","title":"Pact Smart Contracts"},{"location":"beginner/welcome-to-pact/#pact-key-features","text":"There are many valuable features make Pact such a safe and high-performance language. Here are a few that we\u2019ll focus on throughout this tutorial. Pact Key Features Turing Incomplete Human Readable Upgradable Contracts Formal Verification First, Pact is a Turing incomplete language with deliberate constraints. This supports its design goal of \u201cjust enough\u201d power for blockchain solutions without exposing you to attacks. All Pact code gets stored as written in a human-readable form on the ledger. Pact smart contracts install directly onto the blockchain. This allows you to review the running code as it was written and be sure of exactly what it's doing. Pact also supports upgradable contracts . This allows you to offer new features, adapt to new workflow requirements, and fix bugs as they are discovered. Finally, Pact comes equipped with a powerful validation tool suite in the form of formal verification . Pact uses Z3, an open-source tool developed by Microsoft, to mathematically verify and test for bugs present in the code. These features come along with Pact's unique tooling ecosystem and developer community. All this makes writing smart contracts with Pact both fun and productive. The rest of the tutorial will explore each of these features in a little more detail.","title":"Pact Key Features"},{"location":"beginner/welcome-to-pact/#turing-incomplete","text":"Pact contracts are Turing incomplete. A Turing complete language has the power to run any possible program. In some languages, Turing completeness is an extremely important feature. For smart contracts, it\u2019s an incredibly dangerous feature. For that reason, Pact is designed to be Turing incomplete which places deliberate constraints on its computational ability. This supports its design goal of \u201cjust enough\u201d power for transactional blockchain solutions and helps ensure the security of its smart contracts. The first restriction in Pact is that there is no unbounded looping or recursion. Pact detects recursion and fails immediately. Looping is also only supported in special circumstances. The key benefits of this are to reduce cost and improve performance. This feature makes some of the most infamous and costly bugs discovered in other platforms not even possible with Pact. For more information on this topic, see our blog post - Turing Completeness and Smart Contract Security .","title":"Turing Incomplete"},{"location":"beginner/welcome-to-pact/#human-readable","text":"Pact smart contracts are human readable. Smart contracts solve business problems that require both technical and non-technical expertise. Building the best smart contract solution requires everyone to understand and contribute to the development of the smart contract. For that reason, Pact was built to be simple to read and write. This simplicity helps provide complete transparency for the logic within its smart contracts. This approach also encourages shorter programs. The code executes directly on the ledger where it can be read easily by anyone. As a result, Pact is easy to understand. For example, here\u2019s a \u201cHello World\u201d smart contract using Pact. ( module helloWorld admin-keyset ( defun hello ( name ) ( format Hello {}! [ name ])) ) ( hello world ) Without having learned anything about the Pact language, you can already start to see how it works. With these few simple lines of code, you see a fully functioning Pact \u201cHello World\u201d smart contract. Once written, smart contracts are deployed to a blockchain. In Pact, the code on the blockchain is the same as the code that was written. Maintaining this code means that no matter when you see the code it will always be as it was written. This allows you to understand the code so you can continue to moderate and improve your application over time.","title":"Human Readable"},{"location":"beginner/welcome-to-pact/#upgradable-contracts","text":"Pact contracts are upgradable. Upgradable contracts allow you to revise and improve your smart contracts over time. This allows you to offer new features and fix bugs as you continue developing your smart contract. None of this is possible with other smart contract languages, and it\u2019s a powerful feature when building impactful applications for your business. Pact's tooling ecosystem further amplifies the simplicity of upgrading contracts. Compiler and runtime errors offer detailed information, with stack traces and function documentation to ensure you\u2019re making the best version of your smart contract. Pact\u2019s iterative development process is also supported by a feature-rich REPL helping you to improve and deploy new smart contracts rapidly. It includes features such as incremental transaction execution and environment and database inspection.","title":"Upgradable Contracts"},{"location":"beginner/welcome-to-pact/#formal-verification","text":"Pact is supported by formal verification, a system to mathematically prove that your code is safe. This means that Pact allows smart contract authors to express, automatically check, and formally verify that their code does not contain any bugs. Formal verification is the same system used to protect mission-critical environments like nuclear power plants or air and space autopilot systems. You now have this same high level of security in every smart contract you write with Pact. Formal verification is a huge topic that\u2019s been covered exceptionally well in the Kadena blog. See our blog post - Pact Formal Verification: Making Blockchain Smart Contracts Safer for more information on this topic.","title":"Formal Verification"},{"location":"beginner/welcome-to-pact/#other-pact-features","text":"There are many other features that Pact supports to help make your developer experience as rewarding as possible.","title":"Other Pact Features"},{"location":"beginner/welcome-to-pact/#type-inference","text":"Pact includes type inference. This feature makes it possible for code to be strongly-typed without declaring type information. It also has the added benefit of limiting run-time type enforcement. Developers can use a typecheck to add \u201cjust enough types\u201d. Typecheck eliminates warnings and only enforces types at runtime where needed.","title":"Type Inference"},{"location":"beginner/welcome-to-pact/#atomic-transaction-execution","text":"Similar to RDBMS systems, Pact offers the benefit of atomic execution. This benefit allows changes to commit to the database only if the code runs successfully. Any errors roll back changes, abort execution, and avoid costly mistakes.","title":"Atomic Transaction Execution"},{"location":"beginner/welcome-to-pact/#rdbms-integration","text":"Pact is also designed to allow direct integration with an industrial RDBMS. This design is helpful in cases that need efficient publication of historical data.","title":"RDBMS Integration"},{"location":"beginner/welcome-to-pact/#confidential-computing-with-pacts","text":"The Pact programming language comes from one of its key features, known as \u201cPacts\u201d. \u201cPacts\u201d solve a significant blockchain problem in privacy-preserving blockchains. To maintain privacy on a blockchain, participants can only run a subset of smart contracts. In these cases, the databases of each of the participants become disjointed. Pact solves this problem using coroutines. Coroutines are functions that can start and stop at critical points in a function\u2019s execution. These coroutines are called pacts. They define the steps to be executed by different entities as sequential transactions on the blockchain.","title":"Confidential Computing with \u201cPacts\u201d"},{"location":"beginner/welcome-to-pact/#learn-more","text":"The features described in this post are only a few of the crucial features that make Pact such a powerful language for writing smart contracts. There are many resources available to help you learn more about Pact. Here are a list of resources you can use to get started. Where to go next Join the Discord Channel for community discussion. Read The Pact Smart-Contract Language White Paper to learn more about the creation of Pact. Read the Pact documentation for a detailed look at everything the language offers. Follow the Pact GitHub page for the latest updates on Pact development. Ask questions on Stack Overflow using #pact-lang . Along with all of these resources, you can also continue this tutorial series. Throughout these tutorials, you\u2019ll learn all about Pact by walking through each of its features, building real-world applications, and exploring new ideas for yourself that take the language in directions no one has even thought of yet. Feel free to join the community and reach out if you have any questions. We\u2019re incredibly excited to help you start your journey as a Pact smart contract developer.","title":"Learn More"}]}