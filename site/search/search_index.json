{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Pact Developer Tutorials What is Pact? Pact is a human-readable smart contract language. It allows anyone to write clearly, directly and safely onto a blockchain \u2014 a true innovation for secure and simple smart contract development. Pact will enable you to create entirely new business models and on-chain services. How to use the Pact Developer Tutorials Pact Developer Tutorials offer the training needed to learn the Pact programming language. They teach skills from beginner to advanced that are designed to help you develop blockchain applications with Pact. Prerequisites These free tutorials have no prerequisites. Learn whenever and however you want using the documentation and complimentary videos for each lesson. Get Started Start with our Beginner Tutorial Series which covers Pact\u2019s fundamental concepts, followed by real smart contract projects you can deploy to our Testnet. Connect with our community Join the Discord Channel for community discussion Follow the Pact GitHub page for the latest updates on Pact development Ask questions about Pact on Stack Overflow using #pact-lang Get the latest Kadena updates from our Newsletter or Twitter","title":"Welcome to the Pact Developer Tutorials"},{"location":"#welcome-to-the-pact-developer-tutorials","text":"","title":"Welcome to the Pact Developer Tutorials"},{"location":"#what-is-pact","text":"Pact is a human-readable smart contract language. It allows anyone to write clearly, directly and safely onto a blockchain \u2014 a true innovation for secure and simple smart contract development. Pact will enable you to create entirely new business models and on-chain services.","title":"What is Pact?"},{"location":"#how-to-use-the-pact-developer-tutorials","text":"Pact Developer Tutorials offer the training needed to learn the Pact programming language. They teach skills from beginner to advanced that are designed to help you develop blockchain applications with Pact.","title":"How to use the Pact Developer Tutorials"},{"location":"#prerequisites","text":"These free tutorials have no prerequisites. Learn whenever and however you want using the documentation and complimentary videos for each lesson.","title":"Prerequisites"},{"location":"#get-started","text":"Start with our Beginner Tutorial Series which covers Pact\u2019s fundamental concepts, followed by real smart contract projects you can deploy to our Testnet.","title":"Get Started"},{"location":"#connect-with-our-community","text":"Join the Discord Channel for community discussion Follow the Pact GitHub page for the latest updates on Pact development Ask questions about Pact on Stack Overflow using #pact-lang Get the latest Kadena updates from our Newsletter or Twitter","title":"Connect with our community"},{"location":"advanced/coming-soon/","text":"Coming Soon We're working hard to bring you more tutorials! These advanced Pact Tutorials are currently under development. Stay in touch while you wait Subscribe to our YouTube channel to access the latest Pact tutorials. Join the Discord Channel for community discussion Follow the Pact GitHub page for the latest updates on Pact development Ask questions about Pact on Stack Overflow using #pact-lang Get the latest Kadena updates and workshop announcements from our Newsletter or on Twitter @kadena_io View our Pact Beginner Tutorials to get an overview of the Pact language basics.","title":"Coming Soon"},{"location":"advanced/coming-soon/#coming-soon","text":"We're working hard to bring you more tutorials! These advanced Pact Tutorials are currently under development.","title":"Coming Soon"},{"location":"advanced/coming-soon/#stay-in-touch-while-you-wait","text":"Subscribe to our YouTube channel to access the latest Pact tutorials. Join the Discord Channel for community discussion Follow the Pact GitHub page for the latest updates on Pact development Ask questions about Pact on Stack Overflow using #pact-lang Get the latest Kadena updates and workshop announcements from our Newsletter or on Twitter @kadena_io View our Pact Beginner Tutorials to get an overview of the Pact language basics.","title":"Stay in touch while you wait"},{"location":"beginner/hello-world-with-pact/","text":"Hello World with Pact Welcome to this Hello World with Pact Tutorial! In this tutorial, you'll learn how to create, deploy, and run functions on a Hello World smart contract with Pact. Topics covered in this tutorial Hello World Overview Write the Smart Contract Deploy to the Testnet Call the Deployed Contract The goal of this tutorial is to help you get familiar with the essential Pact concepts needed to write, deploy, and run a smart contract. Learning these concepts will help you to create more complex smart contracts later in the series. Key Takeaway It\u2019s simple to create and deploy a Hello World smart contract with Pact. You can deploy smart contracts from the online editor, call its functions, and view the output from the REPL. Hello World with Pact Tutorial Subscribe to our YouTube channel to access the latest Pact tutorials. Hello World Overview To get started, navigate to the Pact online editor at pact.kadena.io/ . Once on the site, you can open the \u201cHello World\u201d module. To do this, navigate to the module explorer on the tool panel and open the \u201cHello World\u201d example. Note If you\u2019re not familiar with the module explorer, you can learn more here . You can also copy the code below and paste it into your editor. ;; ;; Hello, world! smart contract/module ;; ;;--------------------------------- ;; ;; Create an admin-keyset and add some key, for loading this contract! ;; ;; Make sure the message is signed with this added key as well. ;; ;;--------------------------------- ;; Keysets cannot be created in code, thus we read them in ;; from the load message data. ( define-keyset admin-keyset ( read-keyset admin-keyset )) ;; Define the module. ( module helloWorld admin-keyset A smart contract to greet the world. ( defun hello ( name ) Do the hello-world dance ( format Hello {}! [ name ])) ) ;; and say hello! ( hello world ) This code can also be found here on our GitHub. Write the Smart Contract Create a Keyset As you can see, the \u201cHello World\u201d smart contract starts by defining and reading a keyset. Keysets are a way to specify credentials for a user of the smart contract. The code you write within the smart contract can restrict access to users that own the keysets you define. You will see this done in the Hello World module. Line 16 (shown below) defines and reads a keyset named admin-keyset. ( define-keyset admin-keyset ( read-keyset admin-keyset )) Error If you look on line 16 line you will notice the following error. No such key in message: \u201cadmin-keyset\u201d This error exists because you are reading a keyset that does not exist. To get rid of this error you need to create a keyset named admin-keyset using the panel on the right. Steps to create a keyset Navigate to ENV Data Keysets from the right panel Enter admin-keyset Click Create The error message should now be gone. Create the Module Now that you have created a keyset, it\u2019s time to build the module for your smart contract. Modules are essential in Pact. They contain all the logic needed to run your smart contract. The syntax used to create a module is shown below. This line defines a module named helloWorld. It also gives the admin-keyset access to the code within this module. ( module helloWorld admin-keyset ;; MODULE CODE GOES HERE ) Define a Function The next step is to create the contract functions. Functions are defined within Pact modules using the keyword defun . For this smart contract, you\u2019ll define a function named hello that takes a parameter called name . ( defun hello ( name ) ;; FUNCTION CODE GOES HERE ) Do The Hello World Dance Within this function, you\u2019ll write a formatted line to output into the REPL. You can do this using the keyword format . Format allows you to manipulate strings and will help you specify the output of the function. ( format Hello {}! [ name ]) This line outputs a string to the REPL that says Hello followed by the string input to the function parameter name . The module for this smart contract is already complete! While this module is pretty simple, it gives you a great start to begin building more complex smart contracts. Say Hello World! The final step in this smart contract is to write \u201cHello World\u201d to the REPL. To do this, write a line below the module that calls the function and provide the input for name. ( hello world ) The line above calls the function hello and specifies the name as \u201cworld\u201d. You can change this input to any name you\u2019d like. Load into REPL Having written the smart contract, you are ready to load it into the REPL. A REPL is an interactive computing environment. It stands for read, eval, print, loop. This REPL exists within the online editor allowing you to run Pact code from within the browser. To load a contract into the REPL, select the Load into REPL button at the top of your editor. If everything is working correctly, you will see the REPL open up on the right side of your screen with the Hello World message as shown below. ;; Welcome to the Pact interactive repl ;; Use LOAD into REPL button to execute editor text ;; then just type at the pact prompt to interact! ;; ;; To reset the REPL type reset ! Hello world! pact If you can see this message, your Hello World smart contract is running from within the REPL. Deploy to the Testnet Loading into the REPL helps you test that your contract is working correctly, but it doesn't deploy it to a blockchain. When you're ready, you'll need to complete a few more steps to deploy your Hello World smart contract. Here\u2019s a quick summary of the steps needed to deploy to the blockchain. Step 1: Update Module Name Step 2: Update admin-keyset Name Step 3: Update Code Step 4: Create a Key Step 5: Set your deployment settings Update Module Name First, you need to update the module name. This name needs to be unique across all module names that exist on the blockchain. Choose any unique name you\u2019d like. For example, my module name is helloWorld-tutorial (choose a unique name that is different than mine). ( module helloWorld-tutorial admin-keyset ;; code goes here ) Note This unique module name is a requirement caused by a feature in Pact that allows you to upgrade your smart contracts. You will explore this idea in further detail later when you learn about upgrading contracts. Error You may come across the following error message when you attempt to deploy your contract. terminal ERROR: Command execution failed: (read-keyset \"admin-keyset-hel...: Failure: No such key in message: \"admin-keyset-helloworld\" This error means that an existing module on the blockchain already has the name you chose. Update the module name and redeploy the contract to resolve this error. Update admin-keyset Name Along with a unique module name, you\u2019ll also need a unique keyset name. This unique keyset ensures that only users with the keyset you define can gain access to the module. Delete the admin-keyset and create a new keyset with any unique name you like. The example below shows a new keyset named admin-keyset-helloworld . Update Code Having created a new keyset, you now need to update the code to match the name of the keyset you created. This name appears a few times in the smart contract so be careful to update each one. ( define-keyset admin-keyset-helloworld ( read-keyset admin-keyset-helloworld )) ( module helloWorld-tutorial admin-keyset-helloworld ( defun hello ( name ) ( format Hello {}! [ name ])) ) ( hello world ) Create a Key The purpose of the keyset is to hold keys that you can use to sign and verify your identity. When loading the contract to the REPL you were able to get away without having this key. To deploy your contract you need to make this key. You can create a key by completing the following steps. Select Enter Key Name Type the Key name Click Generate A simple convention for creating your key is to name it similar to the keyset. After creating your key, you\u2019ll see a checkbox appear under the admin-keyset with the name of the key. Select this checkbox to associate this key with the keyset. Set your deployment settings At the top of the screen, select Deploy . This will open a box that allows you to set your deployment settings. Once in the deployment settings, select either test-chain-01 or test-chain-02 to deploy your contract. Next, select the checkbox to sign this deployment with the key you created. Finally, select \"deploy contract\". If everything worked correctly, you should now see the string \u201cHello World!\u201d appear on the right panel as a message. At this point, you have deployed your Hello World smart contract with Pact. Congratulations! Call the Deployed Contract A fantastic feature of deploying to the blockchain is that anyone can now run the deployed code. You can check for yourself and run the function available on your own \u201cHello World\u201d smart contract. Module Explorer To do this, you\u2019ll need to first find the contract from the module explorer. Start by selecting the module explorer from the tool panel. Once there, navigate to the Deployed Contracts section and type the name of your contract. The name of your contract will be the same name as the module you created. After it appears, select view to see functions that are available for your smart contract. Find Function After selecting view , you should see the function named hello as an available option. Click call to open the screen that allows you to place your inputs into this function. Call Function Once on the Function: hello screen, you\u2019re ready to call your function. Steps to call a function Provide a string to pass in as an input. Be sure to surround this string in quotes. Select the checkbox to sign this call with the key. Click call to call your function. See the Output If everything worked out correctly, you should see the new function call appear as a new message! Now you can you call functions on the code you\u2019ve written, and you can call that code after it exists on the blockchain. You can use this same idea to call functions on any other contracts that have been deployed to the blockchain. Try for yourself to see if you can make function calls on other smart contracts. Review Congratulations on completing this tutorial! Throughout this tutorial you built, deployed, and ran functions on your Hello World smart contract with Pact. You\u2019re now prepared to play around and try anything you\u2019d like. You can create and define new keysets, change the parameters, or add anything that comes to mind. If you get lost, you can always go back to the module explorer to reload the original code. You can also visit the documentation using the link on the top right of the screen. Here you'll find more information about terminology, syntax, and other important ideas. If you\u2019re up for it, you can also load in different modules using the explorer to see how a different program looks.","title":"Hello World"},{"location":"beginner/hello-world-with-pact/#hello-world-with-pact","text":"Welcome to this Hello World with Pact Tutorial! In this tutorial, you'll learn how to create, deploy, and run functions on a Hello World smart contract with Pact. Topics covered in this tutorial Hello World Overview Write the Smart Contract Deploy to the Testnet Call the Deployed Contract The goal of this tutorial is to help you get familiar with the essential Pact concepts needed to write, deploy, and run a smart contract. Learning these concepts will help you to create more complex smart contracts later in the series. Key Takeaway It\u2019s simple to create and deploy a Hello World smart contract with Pact. You can deploy smart contracts from the online editor, call its functions, and view the output from the REPL.","title":"Hello World with Pact"},{"location":"beginner/hello-world-with-pact/#hello-world-with-pact-tutorial","text":"Subscribe to our YouTube channel to access the latest Pact tutorials.","title":"Hello World with Pact Tutorial"},{"location":"beginner/hello-world-with-pact/#hello-world-overview","text":"To get started, navigate to the Pact online editor at pact.kadena.io/ . Once on the site, you can open the \u201cHello World\u201d module. To do this, navigate to the module explorer on the tool panel and open the \u201cHello World\u201d example. Note If you\u2019re not familiar with the module explorer, you can learn more here . You can also copy the code below and paste it into your editor. ;; ;; Hello, world! smart contract/module ;; ;;--------------------------------- ;; ;; Create an admin-keyset and add some key, for loading this contract! ;; ;; Make sure the message is signed with this added key as well. ;; ;;--------------------------------- ;; Keysets cannot be created in code, thus we read them in ;; from the load message data. ( define-keyset admin-keyset ( read-keyset admin-keyset )) ;; Define the module. ( module helloWorld admin-keyset A smart contract to greet the world. ( defun hello ( name ) Do the hello-world dance ( format Hello {}! [ name ])) ) ;; and say hello! ( hello world ) This code can also be found here on our GitHub.","title":"Hello World Overview"},{"location":"beginner/hello-world-with-pact/#write-the-smart-contract","text":"","title":"Write the Smart Contract"},{"location":"beginner/hello-world-with-pact/#create-a-keyset","text":"As you can see, the \u201cHello World\u201d smart contract starts by defining and reading a keyset. Keysets are a way to specify credentials for a user of the smart contract. The code you write within the smart contract can restrict access to users that own the keysets you define. You will see this done in the Hello World module. Line 16 (shown below) defines and reads a keyset named admin-keyset. ( define-keyset admin-keyset ( read-keyset admin-keyset )) Error If you look on line 16 line you will notice the following error. No such key in message: \u201cadmin-keyset\u201d This error exists because you are reading a keyset that does not exist. To get rid of this error you need to create a keyset named admin-keyset using the panel on the right.","title":"Create a Keyset"},{"location":"beginner/hello-world-with-pact/#steps-to-create-a-keyset","text":"Navigate to ENV Data Keysets from the right panel Enter admin-keyset Click Create The error message should now be gone.","title":"Steps to create a keyset"},{"location":"beginner/hello-world-with-pact/#create-the-module","text":"Now that you have created a keyset, it\u2019s time to build the module for your smart contract. Modules are essential in Pact. They contain all the logic needed to run your smart contract. The syntax used to create a module is shown below. This line defines a module named helloWorld. It also gives the admin-keyset access to the code within this module. ( module helloWorld admin-keyset ;; MODULE CODE GOES HERE )","title":"Create the Module"},{"location":"beginner/hello-world-with-pact/#define-a-function","text":"The next step is to create the contract functions. Functions are defined within Pact modules using the keyword defun . For this smart contract, you\u2019ll define a function named hello that takes a parameter called name . ( defun hello ( name ) ;; FUNCTION CODE GOES HERE )","title":"Define a Function"},{"location":"beginner/hello-world-with-pact/#do-the-hello-world-dance","text":"Within this function, you\u2019ll write a formatted line to output into the REPL. You can do this using the keyword format . Format allows you to manipulate strings and will help you specify the output of the function. ( format Hello {}! [ name ]) This line outputs a string to the REPL that says Hello followed by the string input to the function parameter name . The module for this smart contract is already complete! While this module is pretty simple, it gives you a great start to begin building more complex smart contracts.","title":"Do The Hello World Dance"},{"location":"beginner/hello-world-with-pact/#say-hello-world","text":"The final step in this smart contract is to write \u201cHello World\u201d to the REPL. To do this, write a line below the module that calls the function and provide the input for name. ( hello world ) The line above calls the function hello and specifies the name as \u201cworld\u201d. You can change this input to any name you\u2019d like.","title":"Say Hello World!"},{"location":"beginner/hello-world-with-pact/#load-into-repl","text":"Having written the smart contract, you are ready to load it into the REPL. A REPL is an interactive computing environment. It stands for read, eval, print, loop. This REPL exists within the online editor allowing you to run Pact code from within the browser. To load a contract into the REPL, select the Load into REPL button at the top of your editor. If everything is working correctly, you will see the REPL open up on the right side of your screen with the Hello World message as shown below. ;; Welcome to the Pact interactive repl ;; Use LOAD into REPL button to execute editor text ;; then just type at the pact prompt to interact! ;; ;; To reset the REPL type reset ! Hello world! pact If you can see this message, your Hello World smart contract is running from within the REPL.","title":"Load into REPL"},{"location":"beginner/hello-world-with-pact/#deploy-to-the-testnet","text":"Loading into the REPL helps you test that your contract is working correctly, but it doesn't deploy it to a blockchain. When you're ready, you'll need to complete a few more steps to deploy your Hello World smart contract. Here\u2019s a quick summary of the steps needed to deploy to the blockchain. Step 1: Update Module Name Step 2: Update admin-keyset Name Step 3: Update Code Step 4: Create a Key Step 5: Set your deployment settings","title":"Deploy to the Testnet"},{"location":"beginner/hello-world-with-pact/#update-module-name","text":"First, you need to update the module name. This name needs to be unique across all module names that exist on the blockchain. Choose any unique name you\u2019d like. For example, my module name is helloWorld-tutorial (choose a unique name that is different than mine). ( module helloWorld-tutorial admin-keyset ;; code goes here ) Note This unique module name is a requirement caused by a feature in Pact that allows you to upgrade your smart contracts. You will explore this idea in further detail later when you learn about upgrading contracts. Error You may come across the following error message when you attempt to deploy your contract. terminal ERROR: Command execution failed: (read-keyset \"admin-keyset-hel...: Failure: No such key in message: \"admin-keyset-helloworld\" This error means that an existing module on the blockchain already has the name you chose. Update the module name and redeploy the contract to resolve this error.","title":"Update Module Name"},{"location":"beginner/hello-world-with-pact/#update-admin-keyset-name","text":"Along with a unique module name, you\u2019ll also need a unique keyset name. This unique keyset ensures that only users with the keyset you define can gain access to the module. Delete the admin-keyset and create a new keyset with any unique name you like. The example below shows a new keyset named admin-keyset-helloworld .","title":"Update admin-keyset Name"},{"location":"beginner/hello-world-with-pact/#update-code","text":"Having created a new keyset, you now need to update the code to match the name of the keyset you created. This name appears a few times in the smart contract so be careful to update each one. ( define-keyset admin-keyset-helloworld ( read-keyset admin-keyset-helloworld )) ( module helloWorld-tutorial admin-keyset-helloworld ( defun hello ( name ) ( format Hello {}! [ name ])) ) ( hello world )","title":"Update Code"},{"location":"beginner/hello-world-with-pact/#create-a-key","text":"The purpose of the keyset is to hold keys that you can use to sign and verify your identity. When loading the contract to the REPL you were able to get away without having this key. To deploy your contract you need to make this key. You can create a key by completing the following steps. Select Enter Key Name Type the Key name Click Generate A simple convention for creating your key is to name it similar to the keyset. After creating your key, you\u2019ll see a checkbox appear under the admin-keyset with the name of the key. Select this checkbox to associate this key with the keyset.","title":"Create a Key"},{"location":"beginner/hello-world-with-pact/#set-your-deployment-settings","text":"At the top of the screen, select Deploy . This will open a box that allows you to set your deployment settings. Once in the deployment settings, select either test-chain-01 or test-chain-02 to deploy your contract. Next, select the checkbox to sign this deployment with the key you created. Finally, select \"deploy contract\". If everything worked correctly, you should now see the string \u201cHello World!\u201d appear on the right panel as a message. At this point, you have deployed your Hello World smart contract with Pact. Congratulations!","title":"Set your deployment settings"},{"location":"beginner/hello-world-with-pact/#call-the-deployed-contract","text":"A fantastic feature of deploying to the blockchain is that anyone can now run the deployed code. You can check for yourself and run the function available on your own \u201cHello World\u201d smart contract.","title":"Call the Deployed Contract"},{"location":"beginner/hello-world-with-pact/#module-explorer","text":"To do this, you\u2019ll need to first find the contract from the module explorer. Start by selecting the module explorer from the tool panel. Once there, navigate to the Deployed Contracts section and type the name of your contract. The name of your contract will be the same name as the module you created. After it appears, select view to see functions that are available for your smart contract.","title":"Module Explorer"},{"location":"beginner/hello-world-with-pact/#find-function","text":"After selecting view , you should see the function named hello as an available option. Click call to open the screen that allows you to place your inputs into this function.","title":"Find Function"},{"location":"beginner/hello-world-with-pact/#call-function","text":"Once on the Function: hello screen, you\u2019re ready to call your function. Steps to call a function Provide a string to pass in as an input. Be sure to surround this string in quotes. Select the checkbox to sign this call with the key. Click call to call your function.","title":"Call Function"},{"location":"beginner/hello-world-with-pact/#see-the-output","text":"If everything worked out correctly, you should see the new function call appear as a new message! Now you can you call functions on the code you\u2019ve written, and you can call that code after it exists on the blockchain. You can use this same idea to call functions on any other contracts that have been deployed to the blockchain. Try for yourself to see if you can make function calls on other smart contracts.","title":"See the Output"},{"location":"beginner/hello-world-with-pact/#review","text":"Congratulations on completing this tutorial! Throughout this tutorial you built, deployed, and ran functions on your Hello World smart contract with Pact. You\u2019re now prepared to play around and try anything you\u2019d like. You can create and define new keysets, change the parameters, or add anything that comes to mind. If you get lost, you can always go back to the module explorer to reload the original code. You can also visit the documentation using the link on the top right of the screen. Here you'll find more information about terminology, syntax, and other important ideas. If you\u2019re up for it, you can also load in different modules using the explorer to see how a different program looks.","title":"Review"},{"location":"beginner/local-pact-environment/","text":"Local Pact Environment This tutorial will get you up and running with the Pact programming language on your local environment. Topics covered in this tutorial Pact in your Local Environment Install Homebrew Install the Pact Programming Language Install Atom Install the Atom language-pact package Run Code Locally The goal of this tutorial is to get you up and running with the Pact environment and the Pact Atom SDK to begin running Pact programs locally. Key Takeaway Pact and the Atom SDK provide a powerful development environment that allows you to run Pact programs locally. Pact in your Local Environment Tutorial Getting started with Pact on your local device allows you to work in a powerful development environment to run your smart contracts locally. This environment can be set up on Mac, Windows, and Linux operating systems. This tutorial will go over the details of getting up and running on a Mac operating system. Windows and Linux Users More instructions on installing Pact with Windows or Linux can be found on the GitHub page. Install Pact To get started with Pact you\u2019ll first need to install the Pact programming language. The easiest way to do this is by using Homebrew for Mac. If you have Homebrew, run the following line in your terminal. brew install kadena-io/pact/pact This will install Pact on your computer. Homebrew If you don\u2019t have Homebrew, you\u2019ll need to get that first. To find instructions for this go to brew.sh . This is a popular package manager used to install many packages for Mac. If you\u2019re just getting started with it I\u2019m sure you\u2019ll also find it valuable in the future. To install Homebrew, copy the command provided on the center of the screen and run it in your terminal window. After a few moments you\u2019ll have Homebrew installed on your computer. To verify your installation type brew --version . This should return the current version of your installation. Pact Programming Langauge Now that you have Homebrew, you can use it to install the Pact language. As I mentioned earlier, you\u2019ll do this with the following command. brew install kadena-io/pact/pact To check the installation go to your terminal and type Pact. This should open up the Pact environment. You can run any commands available in Pact from this environment. For example, typing ( + 1 2 ) will add these 2 numbers and return a value of 3. You can find other commands in the documentation and we\u2019ll go over many of these throughout other tutorials. Atom SDK The terminal is helpful, but you\u2019ll often want to create larger programs from within your editor. The best way to write smart contracts locally is by using the Atom editor. Pact provides Atom integration giving you syntax highlighting, continuous integration with a directory, .repl scripts, and errors/warnings linting. To install the Atom editor, navigate to atom.io and select download . From there, follow the installation instructions to get up and running with Atom. Language-pact Package To install the language-pact package, open Atom , go to Atom in the menu and select preferences . From within preferences select packages and type language-pact . Once you do this you should see the package appear. Click install to install this package. At this point Atom is set up to run the Pact programming language. Language-pact Package To install the language-pact package, open Atom, go to Atom in the menu and select preferences. From within preferences select packages and type language-pact. Once you do this you should see the package appear. Click install to install this package. At this point Atom is set up to run the Pact programming language. Hello World from your Local Environment Before wrapping up, try running your first Hello World smart contract in Atom. To do this, open your terminal and navigate into whichever folder you would like as a project directory. cd Desktop Next, clone the pact examples GitHub repository found here . git clone https://github.com/kadena-io/pact-examples This clones a directory with many Pact examples. For now, navigate to the Hello World example. cd pact-examples/hello-world From within this folder, open the Pact terminal. pact pact Using the Pact terminal, run the hello-world.repl file. (load hello-world.repl ) Note The .repl file loads the smart contract from the .pact file to run the code. This file contains the code behind the Load into REPL feature that has so far been available automatically from the online editor allowing you to run code locally. The contents of this .repl file are explained in more detail in the next tutorial. After running this file, you should see the following output to your terminal. Loading hello-world.repl... Setting transaction data Setting transaction keys Loading hello-world.pact... Keyset defined Loaded module \\ hello\\ , hash \\ a493bb7d096c786891bde5d2125c5acbdcd769ba68c50d38691d173b3b7c03ee85cfcde2db34afb0c6c20c5cde3433ab129829ae4283ed789bd7a9d40837fe88\\ TableCreated Write succeeded Hello, world! Hello, world! Receiving this message means that you have run the code correctly! You can check the contents of this smart contract by opening it in Atom. First, exit the Pact terminal (or open a new terminal in this directory) Press Control + D to exit the Pact terminal. Enter atom . to open the directory in Atom. Look through the code provided to better understand the contents of this smart contract. It is slightly different than the hello world smart contract you had seen previously in the online editor. As you\u2019ll see, it stores the value in a table and then returns that value using some of the Pact built-in functions you learned in previous tutorials. Review That wraps up this tutorial. The goal of this tutorial was to get you up and running with Pact on your local device. In this tutorial, you got started with Pact locally. You installed Homebrew, Atom, the language-pact package, and the Pact language. You also ran your first hello-world Pact program on your local computer. Depending on your needs, you can now use both the online editor and the Atom editor to create Pact programs.","title":"Atom SDK"},{"location":"beginner/local-pact-environment/#local-pact-environment","text":"This tutorial will get you up and running with the Pact programming language on your local environment. Topics covered in this tutorial Pact in your Local Environment Install Homebrew Install the Pact Programming Language Install Atom Install the Atom language-pact package Run Code Locally The goal of this tutorial is to get you up and running with the Pact environment and the Pact Atom SDK to begin running Pact programs locally. Key Takeaway Pact and the Atom SDK provide a powerful development environment that allows you to run Pact programs locally.","title":"Local Pact Environment"},{"location":"beginner/local-pact-environment/#pact-in-your-local-environment-tutorial","text":"Getting started with Pact on your local device allows you to work in a powerful development environment to run your smart contracts locally. This environment can be set up on Mac, Windows, and Linux operating systems. This tutorial will go over the details of getting up and running on a Mac operating system. Windows and Linux Users More instructions on installing Pact with Windows or Linux can be found on the GitHub page.","title":"Pact in your Local Environment Tutorial"},{"location":"beginner/local-pact-environment/#install-pact","text":"To get started with Pact you\u2019ll first need to install the Pact programming language. The easiest way to do this is by using Homebrew for Mac. If you have Homebrew, run the following line in your terminal. brew install kadena-io/pact/pact This will install Pact on your computer.","title":"Install Pact"},{"location":"beginner/local-pact-environment/#homebrew","text":"If you don\u2019t have Homebrew, you\u2019ll need to get that first. To find instructions for this go to brew.sh . This is a popular package manager used to install many packages for Mac. If you\u2019re just getting started with it I\u2019m sure you\u2019ll also find it valuable in the future. To install Homebrew, copy the command provided on the center of the screen and run it in your terminal window. After a few moments you\u2019ll have Homebrew installed on your computer. To verify your installation type brew --version . This should return the current version of your installation.","title":"Homebrew"},{"location":"beginner/local-pact-environment/#pact-programming-langauge","text":"Now that you have Homebrew, you can use it to install the Pact language. As I mentioned earlier, you\u2019ll do this with the following command. brew install kadena-io/pact/pact To check the installation go to your terminal and type Pact. This should open up the Pact environment. You can run any commands available in Pact from this environment. For example, typing ( + 1 2 ) will add these 2 numbers and return a value of 3. You can find other commands in the documentation and we\u2019ll go over many of these throughout other tutorials.","title":"Pact Programming Langauge"},{"location":"beginner/local-pact-environment/#atom-sdk","text":"The terminal is helpful, but you\u2019ll often want to create larger programs from within your editor. The best way to write smart contracts locally is by using the Atom editor. Pact provides Atom integration giving you syntax highlighting, continuous integration with a directory, .repl scripts, and errors/warnings linting. To install the Atom editor, navigate to atom.io and select download . From there, follow the installation instructions to get up and running with Atom.","title":"Atom SDK"},{"location":"beginner/local-pact-environment/#language-pact-package","text":"To install the language-pact package, open Atom , go to Atom in the menu and select preferences . From within preferences select packages and type language-pact . Once you do this you should see the package appear. Click install to install this package. At this point Atom is set up to run the Pact programming language.","title":"Language-pact Package"},{"location":"beginner/local-pact-environment/#language-pact-package_1","text":"To install the language-pact package, open Atom, go to Atom in the menu and select preferences. From within preferences select packages and type language-pact. Once you do this you should see the package appear. Click install to install this package. At this point Atom is set up to run the Pact programming language.","title":"Language-pact Package"},{"location":"beginner/local-pact-environment/#hello-world-from-your-local-environment","text":"Before wrapping up, try running your first Hello World smart contract in Atom. To do this, open your terminal and navigate into whichever folder you would like as a project directory. cd Desktop Next, clone the pact examples GitHub repository found here . git clone https://github.com/kadena-io/pact-examples This clones a directory with many Pact examples. For now, navigate to the Hello World example. cd pact-examples/hello-world From within this folder, open the Pact terminal. pact pact Using the Pact terminal, run the hello-world.repl file. (load hello-world.repl ) Note The .repl file loads the smart contract from the .pact file to run the code. This file contains the code behind the Load into REPL feature that has so far been available automatically from the online editor allowing you to run code locally. The contents of this .repl file are explained in more detail in the next tutorial. After running this file, you should see the following output to your terminal. Loading hello-world.repl... Setting transaction data Setting transaction keys Loading hello-world.pact... Keyset defined Loaded module \\ hello\\ , hash \\ a493bb7d096c786891bde5d2125c5acbdcd769ba68c50d38691d173b3b7c03ee85cfcde2db34afb0c6c20c5cde3433ab129829ae4283ed789bd7a9d40837fe88\\ TableCreated Write succeeded Hello, world! Hello, world! Receiving this message means that you have run the code correctly! You can check the contents of this smart contract by opening it in Atom. First, exit the Pact terminal (or open a new terminal in this directory) Press Control + D to exit the Pact terminal. Enter atom . to open the directory in Atom. Look through the code provided to better understand the contents of this smart contract. It is slightly different than the hello world smart contract you had seen previously in the online editor. As you\u2019ll see, it stores the value in a table and then returns that value using some of the Pact built-in functions you learned in previous tutorials.","title":"Hello World from your Local Environment"},{"location":"beginner/local-pact-environment/#review","text":"That wraps up this tutorial. The goal of this tutorial was to get you up and running with Pact on your local device. In this tutorial, you got started with Pact locally. You installed Homebrew, Atom, the language-pact package, and the Pact language. You also ran your first hello-world Pact program on your local computer. Depending on your needs, you can now use both the online editor and the Atom editor to create Pact programs.","title":"Review"},{"location":"beginner/online-editor/","text":"Pact Online Editor Welcome to this tutorial on the Pact Online Editor! In this tutorial, you\u2019ll learn about the Pact Online editor, a powerful tool for developing smart contracts with Pact. Topics covered in this tutorial Introduction to the Editor Navigation Bar Code Editor Tool Panel The goal of this tutorial is to get you familiar with each of the editor\u2019s powerful features so that you can use it to build smart contracts using pact. Key Takeaway The Pact Online Editor is a robust development environment for Pact. It gives you access to many useful features for smart contract development. These features allow you to easily build and test contracts before deploying them to either your private chain or Chainweb . Pact Online Editor Tutorial Subscribe to our YouTube channel to access the latest Pact tutorials. Introduction to the Editor The Pact Online Editor is a web-based REPL that allows you to write Pact code, manage keysets, deploy smart contracts, and explore other smart contracts. These and many other features make the online editor an ideal place to build, test, and deploy your smart contracts. To get started with the Pact Online Editor, navigate to pact.kadena.io/ . Basic Layout Here you'll see a clean and intuitive layout, giving you access to the tools you need without cluttering the developer experience. The interface consists of three main sections; the code editor , the navigation bar , and the tool panel . Code Editor An area for writing and editing your smart contracts. Navigation Bar Includes relevant documentation links and allows you to load code into the REPL or deploy smart contract. Tool Panel Provides essential functionality needed to manage keys, interact with the REPL, view messages, explore modules, and more. Each of these features helps provide an intuitive developer experience. These features make smart contract development both fun and rewarding. Navigation Bar You can locate the navigation bar at the top of the screen. It allows you to load your contract into the REPL, or to deploy the contract to a live network. It also shows the Pact version number and links to these tutorials, the Pact language documentation and the Kadena homepage. Load into REPL Selecting \u201cLoad into REPL\u201d loads text from the editor into the REPL and executes the commands. After selecting this button, you\u2019ll also notice that it opens an interactive terminal you can use to run Pact commands. You\u2019ll use this feature often when exploring the REPL later in this tutorial. Deploy The deploy button is used to deploy smart contracts onto the blockchain. Select Deploy to view the features available to you. Here you\u2019ll have the option to choose a server, set a few settings, sign the transaction and more. This tutorial doesn't go over the details of each of these options. If you'd like, view Hello World with Pact for a full description of smart contract deployment with the Online Editor. You can close this window by either hitting cancel or the X on the top right. Navigation The navigation bar also provides some necessary information and links to help you get started with Pact. Pact Version 2.6.1 At the time of this tutorial, Pact is currently on version 2.6.1. As this continues to update its likely that some of the features we explore will continue to improve. Available Links Links to the Pact tutorials, developer documentation and Kadena homepage can also be found on the navigation bar. Documentation Provides an in-depth look at the Pact programming language. Tutorials Learn more about Pact by completing tutorials like this. Kadena Explore the Kadena blockchain, which is the enterprise-grade blockchain that Pact runs on. Newsletter You can also join the newsletter to stay up to date on the latest Kadena and Pact information here . Code Editor The code editor provides a familiar editing interface. It comes equipped with both inline error reporting and formal verification . Inline Error Reporting Inline error reporting ensures that you have clear direction on how to fix errors that may exist in your code. For example, if you look at line 17 of your smart contract you\u2019ll see the error shown above. This and other errors types state the issue and help you to fix problems that may be affecting your smart contract. Error You can fix this error by creating an admin-keyset. Creating an admin-keyset can be done using the tool panel which we\u2019ll discuss more shortly. Formal Verification The online editor also supports formal verification. Formal verification is a process for automatically testing the correctness of your code. It mathematically proves that your contract has absolutely no security vulnerabilities. It also alerts you to any potential errors and vulnerabilities helping you create secure code quickly and effectively. Formal verification is a tremendous innovation for smart contract languages. For more information on how this helps you develop safer smart contracts, read our Medium post Pact Formal Verification: Making Blockchain Smart Contracts Safer. Tool Panel The tool panel gives you access to many beneficial features while developing smart contracts. It helps you set-up your environment, run commands in the interactive REPL, read messages, and explore other modules that exist on the network. Env The first option available to you in the tool panel is the environment. Select Env to view sections for addressing errors and creating and managing data and wallets from the UI. Manage Errors Errors can be viewed and fixed using the errors section. As you can see here, it currently shows an error that there is no such key in the message \u2018admin-keyset\u2019. This error is the same as what you saw previously in the editor. To fix this error, select the fix button on the right side of the screen. As you\u2019ll see, this creates a keyset for you in the data section below. This along with many other errors and warnings can be fixed using this simple tool. Coming up you\u2019ll see how to create this keyset manually. Remove the admin-keyset by selecting the x to the right of the recently created keyset. Create and Manage Keysets The data section allows you to create and manage keysets. To get started, select the input Enter Keyset Name type admin-keyset then click create . You should now see admin-keyset appear under your list of available keysets. Tip You can delete keys using the x over on the right. You\u2019ll also see a dropdown that allows you to select keys-all, keys-2, and keys-any. These options refer to the number of key signatures required to validate a transaction. For more information on this and a more in-depth explanation of keys in Pact, see the tutorial on Pact Keysets. Result Each key created has a JSON representation available for programmatic access. In the Result tab, you can see the keys you have created shown in JSON. Raw You can also create keysets using the JSON format rather than the user interface. Creating keysets with JSON is done using the Raw tab. To create a new key, specify a keyset name , keys , and pred , similar to the format seen in the Result tab. Info Pred Stands for \u201cPredicate Function\u201d. A predicate function is a boolean value function evaluating to either true or false. In this case, it will be one of the options keys-any , keys-2 , or keys-all as you had seen in the keysets tab. Predicate functions specify which keys need to sign the transaction for it to be valid. Add Key As the name suggests, keysets are used to hold keys. You can create these keys in the section below Data named Wallet. To create a wallet, first, enter a key name then select Generate . I\u2019ll name mine admin-key, but you can choose whatever you\u2019d like You should now see the key name, the public key, and the private key you generated. This key is useful any time you'd like to deploy or interact with a smart contract. REPL A great way to get started with Pact is to jump in and start writing code for yourself. The REPL helps you to do this quickly and allows you to run Pact commands from directly within the browser. Try running some of the commands shown below to get started with the REPL. Add numbers Pact uses prefix notation for math operators. Prefix notation is standard in LISP-like languages like Pact. What this means is that the operator precedes the two values it\u2019s operating on. (+ 2 2) 4 Strings Concatenate strings using +. Try saying Hello REPL. pact (+ Hello REPL ) \u201cHello REPL\u201d Try More Commands You can view many more commands in the Pact Syntax Documentation and Built-in Functions Documentation . Try running a few for yourself to learn more about the Pact programming langauge. Run Commands from the Code Editor It\u2019s also possible to run REPL commands from the code editor . To get started, delete the existing code from the code editor and select REPL from the tool panel. To run commands using the editor, enter a command and then select Load into REPL at the top of the screen. Experiment with other commands yourself by running some of the ones shown previously. Messages Code editors often provide messages to developers that help them identify errors and log outputs. These are useful ways to debug programs and fix potential issues with your contract. In the Pact Online Editor, these messages can be seen in the messages tab in the Toolbar. Module Explorer Another powerful tool provided by the editor is the Module Explorer . The module explorer allows you to load example contracts, deployed contracts, and to run functions that exist on any contracts that exist on the network! Click on the button module explorer to get started. Here you\u2019ll see a section for example contracts and a section for deployed contracts . Example Contracts The example contracts section allows you to load example contracts directly into your editor. You can use this code however you\u2019d like, and can always come back here to reload the code again if needed. When you first loaded pact.kadena.io/ the Formal Verification contract shown here is automatically loaded. Select view open to reload this contract. View other Smart Contracts You can also view other smart contracts. Select View Open on any smart contract to load its code into the code editor. View Functions You can view a summary of functions that exist within any smart contract from within the module explorer . After selecting View , you will see an overview of these functions. The image below shows the functions in the example Simple Payment . Deployed Contracts You can also view any contract that has been deployed to the network using the Module Explorer. You can search by name, by chain, or by navigating the pages using the arrow buttons. Once you find a particular contract, select view . From here you can look at each function on the contract, and when you\u2019re ready, select open to see the contract code. You can also call functions on modules from within the editor. For more information on calling functions, see Hello World with Pact. Review Congratulations! You have completed your introduction to the Pact Online Editor . The Pact Online Editor is an excellent tool built to make developing smart contracts with Pact both fun and simple. Topic Summary Throughout this tutorial, you explored each core feature of the editor's interface. This included each of the following topics. Introduction to the Editor Navigation Bar Code Editor Tool Panel Take some time now to explore each of the features we discussed and get used to navigating this new environment. As you continue with Pact, you\u2019ll use this tool regularly to help explore new ideas, write smart contracts, manage keysets, and explore modules. Throughout these tutorials, you\u2019ll use this tool very often. By getting used to these core features, you're on your way to making amazing new applications using Pact.","title":"Online Editor"},{"location":"beginner/online-editor/#pact-online-editor","text":"Welcome to this tutorial on the Pact Online Editor! In this tutorial, you\u2019ll learn about the Pact Online editor, a powerful tool for developing smart contracts with Pact. Topics covered in this tutorial Introduction to the Editor Navigation Bar Code Editor Tool Panel The goal of this tutorial is to get you familiar with each of the editor\u2019s powerful features so that you can use it to build smart contracts using pact. Key Takeaway The Pact Online Editor is a robust development environment for Pact. It gives you access to many useful features for smart contract development. These features allow you to easily build and test contracts before deploying them to either your private chain or Chainweb .","title":"Pact Online Editor"},{"location":"beginner/online-editor/#pact-online-editor-tutorial","text":"Subscribe to our YouTube channel to access the latest Pact tutorials.","title":"Pact Online Editor Tutorial"},{"location":"beginner/online-editor/#introduction-to-the-editor","text":"The Pact Online Editor is a web-based REPL that allows you to write Pact code, manage keysets, deploy smart contracts, and explore other smart contracts. These and many other features make the online editor an ideal place to build, test, and deploy your smart contracts. To get started with the Pact Online Editor, navigate to pact.kadena.io/ .","title":"Introduction to the Editor"},{"location":"beginner/online-editor/#basic-layout","text":"Here you'll see a clean and intuitive layout, giving you access to the tools you need without cluttering the developer experience. The interface consists of three main sections; the code editor , the navigation bar , and the tool panel . Code Editor An area for writing and editing your smart contracts. Navigation Bar Includes relevant documentation links and allows you to load code into the REPL or deploy smart contract. Tool Panel Provides essential functionality needed to manage keys, interact with the REPL, view messages, explore modules, and more. Each of these features helps provide an intuitive developer experience. These features make smart contract development both fun and rewarding.","title":"Basic Layout"},{"location":"beginner/online-editor/#navigation-bar","text":"You can locate the navigation bar at the top of the screen. It allows you to load your contract into the REPL, or to deploy the contract to a live network. It also shows the Pact version number and links to these tutorials, the Pact language documentation and the Kadena homepage.","title":"Navigation Bar"},{"location":"beginner/online-editor/#load-into-repl","text":"Selecting \u201cLoad into REPL\u201d loads text from the editor into the REPL and executes the commands. After selecting this button, you\u2019ll also notice that it opens an interactive terminal you can use to run Pact commands. You\u2019ll use this feature often when exploring the REPL later in this tutorial.","title":"Load into REPL"},{"location":"beginner/online-editor/#deploy","text":"The deploy button is used to deploy smart contracts onto the blockchain. Select Deploy to view the features available to you. Here you\u2019ll have the option to choose a server, set a few settings, sign the transaction and more. This tutorial doesn't go over the details of each of these options. If you'd like, view Hello World with Pact for a full description of smart contract deployment with the Online Editor. You can close this window by either hitting cancel or the X on the top right.","title":"Deploy"},{"location":"beginner/online-editor/#navigation","text":"The navigation bar also provides some necessary information and links to help you get started with Pact. Pact Version 2.6.1 At the time of this tutorial, Pact is currently on version 2.6.1. As this continues to update its likely that some of the features we explore will continue to improve.","title":"Navigation"},{"location":"beginner/online-editor/#available-links","text":"Links to the Pact tutorials, developer documentation and Kadena homepage can also be found on the navigation bar. Documentation Provides an in-depth look at the Pact programming language. Tutorials Learn more about Pact by completing tutorials like this. Kadena Explore the Kadena blockchain, which is the enterprise-grade blockchain that Pact runs on. Newsletter You can also join the newsletter to stay up to date on the latest Kadena and Pact information here .","title":"Available Links"},{"location":"beginner/online-editor/#code-editor","text":"The code editor provides a familiar editing interface. It comes equipped with both inline error reporting and formal verification .","title":"Code Editor"},{"location":"beginner/online-editor/#inline-error-reporting","text":"Inline error reporting ensures that you have clear direction on how to fix errors that may exist in your code. For example, if you look at line 17 of your smart contract you\u2019ll see the error shown above. This and other errors types state the issue and help you to fix problems that may be affecting your smart contract. Error You can fix this error by creating an admin-keyset. Creating an admin-keyset can be done using the tool panel which we\u2019ll discuss more shortly.","title":"Inline Error Reporting"},{"location":"beginner/online-editor/#formal-verification","text":"The online editor also supports formal verification. Formal verification is a process for automatically testing the correctness of your code. It mathematically proves that your contract has absolutely no security vulnerabilities. It also alerts you to any potential errors and vulnerabilities helping you create secure code quickly and effectively. Formal verification is a tremendous innovation for smart contract languages. For more information on how this helps you develop safer smart contracts, read our Medium post Pact Formal Verification: Making Blockchain Smart Contracts Safer.","title":"Formal Verification"},{"location":"beginner/online-editor/#tool-panel","text":"The tool panel gives you access to many beneficial features while developing smart contracts. It helps you set-up your environment, run commands in the interactive REPL, read messages, and explore other modules that exist on the network.","title":"Tool Panel"},{"location":"beginner/online-editor/#env","text":"The first option available to you in the tool panel is the environment. Select Env to view sections for addressing errors and creating and managing data and wallets from the UI.","title":"Env"},{"location":"beginner/online-editor/#manage-errors","text":"Errors can be viewed and fixed using the errors section. As you can see here, it currently shows an error that there is no such key in the message \u2018admin-keyset\u2019. This error is the same as what you saw previously in the editor. To fix this error, select the fix button on the right side of the screen. As you\u2019ll see, this creates a keyset for you in the data section below. This along with many other errors and warnings can be fixed using this simple tool. Coming up you\u2019ll see how to create this keyset manually. Remove the admin-keyset by selecting the x to the right of the recently created keyset.","title":"Manage Errors"},{"location":"beginner/online-editor/#create-and-manage-keysets","text":"The data section allows you to create and manage keysets. To get started, select the input Enter Keyset Name type admin-keyset then click create . You should now see admin-keyset appear under your list of available keysets. Tip You can delete keys using the x over on the right. You\u2019ll also see a dropdown that allows you to select keys-all, keys-2, and keys-any. These options refer to the number of key signatures required to validate a transaction. For more information on this and a more in-depth explanation of keys in Pact, see the tutorial on Pact Keysets.","title":"Create and Manage Keysets"},{"location":"beginner/online-editor/#result","text":"Each key created has a JSON representation available for programmatic access. In the Result tab, you can see the keys you have created shown in JSON.","title":"Result"},{"location":"beginner/online-editor/#raw","text":"You can also create keysets using the JSON format rather than the user interface. Creating keysets with JSON is done using the Raw tab. To create a new key, specify a keyset name , keys , and pred , similar to the format seen in the Result tab. Info Pred Stands for \u201cPredicate Function\u201d. A predicate function is a boolean value function evaluating to either true or false. In this case, it will be one of the options keys-any , keys-2 , or keys-all as you had seen in the keysets tab. Predicate functions specify which keys need to sign the transaction for it to be valid.","title":"Raw"},{"location":"beginner/online-editor/#add-key","text":"As the name suggests, keysets are used to hold keys. You can create these keys in the section below Data named Wallet. To create a wallet, first, enter a key name then select Generate . I\u2019ll name mine admin-key, but you can choose whatever you\u2019d like You should now see the key name, the public key, and the private key you generated. This key is useful any time you'd like to deploy or interact with a smart contract.","title":"Add Key"},{"location":"beginner/online-editor/#repl","text":"A great way to get started with Pact is to jump in and start writing code for yourself. The REPL helps you to do this quickly and allows you to run Pact commands from directly within the browser. Try running some of the commands shown below to get started with the REPL. Add numbers Pact uses prefix notation for math operators. Prefix notation is standard in LISP-like languages like Pact. What this means is that the operator precedes the two values it\u2019s operating on. (+ 2 2) 4 Strings Concatenate strings using +. Try saying Hello REPL. pact (+ Hello REPL ) \u201cHello REPL\u201d Try More Commands You can view many more commands in the Pact Syntax Documentation and Built-in Functions Documentation . Try running a few for yourself to learn more about the Pact programming langauge. Run Commands from the Code Editor It\u2019s also possible to run REPL commands from the code editor . To get started, delete the existing code from the code editor and select REPL from the tool panel. To run commands using the editor, enter a command and then select Load into REPL at the top of the screen. Experiment with other commands yourself by running some of the ones shown previously.","title":"REPL"},{"location":"beginner/online-editor/#messages","text":"Code editors often provide messages to developers that help them identify errors and log outputs. These are useful ways to debug programs and fix potential issues with your contract. In the Pact Online Editor, these messages can be seen in the messages tab in the Toolbar.","title":"Messages"},{"location":"beginner/online-editor/#module-explorer","text":"Another powerful tool provided by the editor is the Module Explorer . The module explorer allows you to load example contracts, deployed contracts, and to run functions that exist on any contracts that exist on the network! Click on the button module explorer to get started. Here you\u2019ll see a section for example contracts and a section for deployed contracts .","title":"Module Explorer"},{"location":"beginner/online-editor/#example-contracts","text":"The example contracts section allows you to load example contracts directly into your editor. You can use this code however you\u2019d like, and can always come back here to reload the code again if needed. When you first loaded pact.kadena.io/ the Formal Verification contract shown here is automatically loaded. Select view open to reload this contract. View other Smart Contracts You can also view other smart contracts. Select View Open on any smart contract to load its code into the code editor.","title":"Example Contracts"},{"location":"beginner/online-editor/#view-functions","text":"You can view a summary of functions that exist within any smart contract from within the module explorer . After selecting View , you will see an overview of these functions. The image below shows the functions in the example Simple Payment .","title":"View Functions"},{"location":"beginner/online-editor/#deployed-contracts","text":"You can also view any contract that has been deployed to the network using the Module Explorer. You can search by name, by chain, or by navigating the pages using the arrow buttons. Once you find a particular contract, select view . From here you can look at each function on the contract, and when you\u2019re ready, select open to see the contract code. You can also call functions on modules from within the editor. For more information on calling functions, see Hello World with Pact.","title":"Deployed Contracts"},{"location":"beginner/online-editor/#review","text":"Congratulations! You have completed your introduction to the Pact Online Editor . The Pact Online Editor is an excellent tool built to make developing smart contracts with Pact both fun and simple. Topic Summary Throughout this tutorial, you explored each core feature of the editor's interface. This included each of the following topics. Introduction to the Editor Navigation Bar Code Editor Tool Panel Take some time now to explore each of the features we discussed and get used to navigating this new environment. As you continue with Pact, you\u2019ll use this tool regularly to help explore new ideas, write smart contracts, manage keysets, and explore modules. Throughout these tutorials, you\u2019ll use this tool very often. By getting used to these core features, you're on your way to making amazing new applications using Pact.","title":"Review"},{"location":"beginner/pact-keysets/","text":"Pact Keysets This tutorial introduces another essential feature in Pact known as keysets. We\u2019ll discuss what keysets are, why they\u2019re important, and how they help regulate access to Pact modules. Tutorial Overview Introduction to Keysets Create a Keyset Define and Read a Keyset Create Keys Sign to Deploy a Contract Sign to Call a Function Sign to Run a Contract Key Takeaway Pact Keysets specify authorization to different parts of the smart contract. They determine which accounts have access to which parts of the program. They also contain keys which are an important part of acquiring the signatures needed to verify a transaction. Introduction to Keysets Pact Keysets specify authorization to different parts of the smart contract. They determine which accounts have access to and update various parts of the program. Create a Keyset The first step toward working with keysets is to create one. Creating a keyset can be done using the online editor within the environment section. Navigate to pact.kadena.io Steps to create a keyset On the right panel navigate to ENV Data Keysets Enter a Keyset Name Enter admin-keyset Click Create You should now see admin-keyset appear under your list of available keysets. This keyset is now added into the browser\u2019s local storage. When you begin working locally, this keyset will need to exist in the .repl file that you create along with your .pact file. You will learn more about this process in later tutorials. Define and Read a Keyset After creating a keyset, you need to both define and read this keyset from within the smart contract you create. This is done using a pair of built-in functions; define-keyset and read-keyset . Here is the syntax used to define and read a keyset named \u201cadmin-keyset\u201d. ( define-keyset admin-keyset ( read-keyset admin-keyset )) Keysets guard the logic encoded within a module, these functions should be placed above the module and will fail if written within the module code. Note The single quote, \u2018, preceding the admin-keyset is an alternative way to represent a string rather than using double quotes. It is, in this case, referred to as a symbol and helps syntactically represent a unique item during runtime. Create Keys The keyset you have created is meant to hold keys. These keys are used to sign and verify transactions that occur from within the module. Steps to create a key On the right panel navigate to ENV Wallet Enter a key name Enter admin-key Click Generate You should now see the key name, the public key, and the private key of the key you generated. While one key is enough to get started, this tutorial will show you some other key options that are available to you. For that reason, take some time now to generate two more keys. Generate two more keys admin-key-2 admin-key-3 After creating these keys, notice that they are all available as checkboxes under the admin-keyset . Select each of these checkboxes now. You\u2019re now ready to use these keys to help understand predicate functions. Predicate Functions Alongside the keyset you created, you will see a dropdown that allows you to select keys-all, keys-2, and keys-any . These options are referred to as the predicate functions in your keyset. A predicate function is a boolean value function evaluating to either true or false. In this case, it will be one of the options keys-any , keys-2 , or keys-all as you had seen in the keysets tab. Predicate functions specify which keys need to sign the transaction for it to be valid. keys-all All available keys must sign the transaction to verify it. keys-2 Two keys must sign the transaction to verify it. keys-any Any single key can sign the transaction to verify it. The keys that the predicate function is referring to are those you selected with the checkboxes Which option to choose? Determining which is appropriate for your application depends on what you are trying to accomplish. In cases where all members of a group are equal, and it is important for each of them to sign the transaction, then you will use keys-all. If there are many members of the group but only a few need to verify the transaction, keys-2 could work well. And if anyone signing is enough to verify the transaction, select keys-any. Note In simple smart contracts, you will generally have a simple keyset, a single key, and a default value of keys-all for your predicate function. Result Each key created has an equivalent JSON representation you can view from the Result tab. Notice that this JSON object includes the name of your keyset, the public key of each of the keys you added to the keyset, and the current value of the predicate function you selected. Raw You can also create keysets using the JSON format rather than the user interface. Creating keysets with JSON is done using the Raw tab. This format will be used in real DApps or in .repl files for simulation. It allows you to copy your JSON formatted keysets to test and deploy on pact-web, allowing you simply copy and paste into this box rather than re-creating everything from scratch. To create a new key, specify a keyset name , keys , and pred , similar to the format seen in the Result tab. While keysets tab is a simple way to create new keysets on the website, raw tab is a simpler way of inputting keysets that already exist. Note Keysets created here will not appear in the Keysets tab, but they will appear in the Result tab. Sign to Deploy a Contract Verifying transactions with keysets is important when deploying a smart contract. You can check this out for yourself from the deployment screen in the online editor. Where to find the sign tab From pact.kadena.io select Deploy From the deployment settings screen, choose Sign You should now see the following screen, which includes the keysets and specified keys from within the module. To deploy the smart contract, you will need to select a number of keys using the checkbox to the right as specified in the predicate function. This will ensure that your smart contract is successfully verified. Note There are a few necessary changes you will need to make to your smart contract to deploy it that are unrelated to keysets. For that reason, you won\u2019t be deploying your contract in this tutorial. You can check out the Hello World with Pact tutorial if you\u2019d like support on deploying a smart contract. Sign to Call a Function Calling a function on a deployed contract is another time where key signatures become valuable. Note You cannot call any functions from the sample contracts in the Online Editors Module Explorer. Contracts must first be deployed to a blockchain before you are able to call them. For this and future examples, be sure to look under deployed contracts to call functions. To get started, view the helloWorld smart contract in the module explorer and call the hello function. Steps to call the hello function Select Module Explorer Search helloWorld Select View Select _Call After calling the function, you should see a screen showing the Parameters of the function. Select the Sign tab to the right of Parameters to view the keys available to use for signatures. Here you should again see each of the keys you have available to sign the transaction. In this case, the helloWorld contract does not have any signature restrictions so you can call the function without these. That said, it\u2019s also fine to sign with a key now to get some practice. Select the checkbox next to one of the admin-keys , and go back to the function parameters screen. Type \u201cPact Keys\u201d (or whatever you prefer) as a Parameter and click Call to call the function. After calling the function, you should see \u201cHello Pact Keys\u201d appear in the messages tab. You have now verified a transaction using a key signature on a deployed smart contract. Again, it wasn\u2019t required for this specific contract but this is a very simple way to get familiar with the process for when you need it later. Sign to Call a Function It\u2019s helpful to go through a process where you actually have restrictions on running code based on the keysets you have available. These restrictions can affect both your ability to load a contract into the REPL and the ability to call functions on a deployed contract. One example that does a good job exploring keysets and restrictions is the Simple Payment example. Navigate to Simple Payment example Select Module Explorer Examples Simple Payment Open You will be building a smart contract like this for yourself in a later tutorial. For now, you\u2019ll focus on a few critical areas that illustrate how to set keyset restrictions from within a module. Enforce-keyset Throughout the module, you\u2019ll notice the following built-in function. enforce-keyset This function executes a guard or defined keyset name to enforce desired predicate logic. You can find an example of this on row 28 of the Simple Payments smart contract which is summarized below. ...code ;; row 14: define keyset to guard module ( define-keyset admin-keyset ( read-keyset admin-keyset )) ...code ( defun create-account ( id initial-balance keyset ) ;; row 27: Must be administrator. ( enforce-keyset admin-keyset ) ...code Here is how the code sample above is working Before the module, the admin-keyset is defined and read. Once in the contract, a function named create-account is created that takes keyset as a parameter. Upon running the function, enforce-keyset is called to check the caller is the owner of admin-keyset . If the caller is the owner of admin-keyset, the function continues. If the caller is not the owner of the admin-keyset, the function fails. Using this method, you can check that the caller of any function is the owner of a keyset that you specify. Challenge Try running this code in the online editor using Load into REPL. You\u2019ll notice an error appear. Can you fix the error based on what you have learned so far? When you get the following response you have successfully fixed the first error. interactive :61:31: No such key in message: sarah-keyset !!! Feeling Stuck? Create a keyset named admin-keyset from within the Env to remove this error. In the next section, you will address the remaining errors. Enforce-one Keyset Another useful built-in function for checking keysets is known as enforce-one . enforce-one This built-in function runs a series of tests in a specific order to check that one of the following statements are true. You can find an example of this on row row 38 of the Simple Payments contract and is summarized below. ...code ;; row 14: define keyset to guard module ( define-keyset admin-keyset ( read-keyset admin-keyset )) ...code ;; Row 34: define keyset to guard module ( defun get-balance ( id ) Only users or admin can read balance. ( with-read payments-table id { balance := balance , keyset := keyset } ( enforce-one Access denied [( enforce-keyset keyset ) ( enforce-keyset admin-keyset )]) balance )) ...code ;; row 60: create accounts ( create-account Sarah 100.25 ( read-keyset sarah-keyset )) ( create-account James 250.0 ( read-keyset james-keyset )) ...code Similar to the previous example, this example is enforcing that the caller be the owner of the admin-keyset . Unlike the previous example, it is also allowing the caller to be the owner of their account. Note Enforce-one is meant for running all types of tests. It is not specific to checking for keysets. In this context, it is running tests to check keysets and works as an effective way to enforce that a specific keyset exists. Notice how it is doing this using enforce-one paired with enforce-keyset . Enforce-one starts a series of tests to check that any of the following lines are true. If one of them is true, the caller will gain access to run the rest of the function. If neither of them is true, the caller will get a response that their request has been denied since they are not the owner of one of the required keys. What this means is that both the admin and owner of the account can view their balance, but no one else can. Bug Try running the code in the online editor using Load into REPL. You\u2019ll notice an error appear. Can you fix the error based on what you have learned so far? When you get the following response you have successfully fixed the first error. James s balance is 275.0 Solution Create two keysets from within the Env to remove this error. sarah-keyset james-keyset After creating these keysets the response signifies that you have successfully deployed the smart contract into the REPL. Question Investigate the smart contract to try and determine why you are getting the response that James's balance is 275.0. Can you tell what is happening in this smart contract to produce this outcome? If you cannot tell, don\u2019t worry. You will get a much more detailed overview of this smart contract in a later tutorial. Deploy the Contract You are now ready to deploy the Simple Payments smart contract. For information on deploying a smart contract, view Deploy to the Testnet from the Hello World with Pact tutorial. Deployed Payments Contract Function Call Now that you have the appropriate keys and keysets, you can also run the deployed version of this smart contract. From the module explorer, view the module deployed in the previous section. Select the get-balance function to attempt to view James\u2019 balance. To do this, select parameters, and type \u201cJames\u201d as the id. Next, sign the contract with either the admin-key or the james-key . As shown earlier, each of these should have the authority to read James\u2019 account balance. After selecting call, you should see the James\u2019 balance displayed. If you\u2019d like to test that it is working correctly, you can also try to make this function call by signing with sarah-key . When doing this, you should receive an error since Sarah is only permitted to view her own balance. Using these ideas, you can call any function on the smart contract by giving the proper function parameters and signing the transactions with the appropriate keys. Review That wraps up this tutorial on Pact Keysets. As you learned, Pact Keysets allow you to specify authorization to different parts of the smart contract. They help determine which accounts have access to which parts of the programs you create. Throughout this tutorial you to created, defined, and read keysets. You also created keys, were introduced to predicate functions, and learned a few other options available to work with keys from the online editor. You also saw where to go to utilize these keys both when deploying a contract and calling a function. Finally, you experimented with running an existing smart contracts that had built-in keyset restrictions. Managing permissions can be difficult, and really depends on the needs of your application. For that reason, it\u2019s difficult to show all of the possibilities that may come up with keysets. That said, this tutorial tried to give a strong foundation for what options are available, and variations of these ideas will come up often in later tutorials. Take some time now to experiment with keys and keysets, and when you\u2019re ready, move on to our next tutorial.","title":"Keysets"},{"location":"beginner/pact-keysets/#pact-keysets","text":"This tutorial introduces another essential feature in Pact known as keysets. We\u2019ll discuss what keysets are, why they\u2019re important, and how they help regulate access to Pact modules. Tutorial Overview Introduction to Keysets Create a Keyset Define and Read a Keyset Create Keys Sign to Deploy a Contract Sign to Call a Function Sign to Run a Contract Key Takeaway Pact Keysets specify authorization to different parts of the smart contract. They determine which accounts have access to which parts of the program. They also contain keys which are an important part of acquiring the signatures needed to verify a transaction.","title":"Pact Keysets"},{"location":"beginner/pact-keysets/#introduction-to-keysets","text":"Pact Keysets specify authorization to different parts of the smart contract. They determine which accounts have access to and update various parts of the program.","title":"Introduction to Keysets"},{"location":"beginner/pact-keysets/#create-a-keyset","text":"The first step toward working with keysets is to create one. Creating a keyset can be done using the online editor within the environment section. Navigate to pact.kadena.io Steps to create a keyset On the right panel navigate to ENV Data Keysets Enter a Keyset Name Enter admin-keyset Click Create You should now see admin-keyset appear under your list of available keysets. This keyset is now added into the browser\u2019s local storage. When you begin working locally, this keyset will need to exist in the .repl file that you create along with your .pact file. You will learn more about this process in later tutorials.","title":"Create a Keyset"},{"location":"beginner/pact-keysets/#define-and-read-a-keyset","text":"After creating a keyset, you need to both define and read this keyset from within the smart contract you create. This is done using a pair of built-in functions; define-keyset and read-keyset . Here is the syntax used to define and read a keyset named \u201cadmin-keyset\u201d. ( define-keyset admin-keyset ( read-keyset admin-keyset )) Keysets guard the logic encoded within a module, these functions should be placed above the module and will fail if written within the module code. Note The single quote, \u2018, preceding the admin-keyset is an alternative way to represent a string rather than using double quotes. It is, in this case, referred to as a symbol and helps syntactically represent a unique item during runtime.","title":"Define and Read a Keyset"},{"location":"beginner/pact-keysets/#create-keys","text":"The keyset you have created is meant to hold keys. These keys are used to sign and verify transactions that occur from within the module. Steps to create a key On the right panel navigate to ENV Wallet Enter a key name Enter admin-key Click Generate You should now see the key name, the public key, and the private key of the key you generated. While one key is enough to get started, this tutorial will show you some other key options that are available to you. For that reason, take some time now to generate two more keys. Generate two more keys admin-key-2 admin-key-3 After creating these keys, notice that they are all available as checkboxes under the admin-keyset . Select each of these checkboxes now. You\u2019re now ready to use these keys to help understand predicate functions.","title":"Create Keys"},{"location":"beginner/pact-keysets/#predicate-functions","text":"Alongside the keyset you created, you will see a dropdown that allows you to select keys-all, keys-2, and keys-any . These options are referred to as the predicate functions in your keyset. A predicate function is a boolean value function evaluating to either true or false. In this case, it will be one of the options keys-any , keys-2 , or keys-all as you had seen in the keysets tab. Predicate functions specify which keys need to sign the transaction for it to be valid. keys-all All available keys must sign the transaction to verify it. keys-2 Two keys must sign the transaction to verify it. keys-any Any single key can sign the transaction to verify it. The keys that the predicate function is referring to are those you selected with the checkboxes","title":"Predicate Functions"},{"location":"beginner/pact-keysets/#which-option-to-choose","text":"Determining which is appropriate for your application depends on what you are trying to accomplish. In cases where all members of a group are equal, and it is important for each of them to sign the transaction, then you will use keys-all. If there are many members of the group but only a few need to verify the transaction, keys-2 could work well. And if anyone signing is enough to verify the transaction, select keys-any. Note In simple smart contracts, you will generally have a simple keyset, a single key, and a default value of keys-all for your predicate function.","title":"Which option to choose?"},{"location":"beginner/pact-keysets/#result","text":"Each key created has an equivalent JSON representation you can view from the Result tab. Notice that this JSON object includes the name of your keyset, the public key of each of the keys you added to the keyset, and the current value of the predicate function you selected.","title":"Result"},{"location":"beginner/pact-keysets/#raw","text":"You can also create keysets using the JSON format rather than the user interface. Creating keysets with JSON is done using the Raw tab. This format will be used in real DApps or in .repl files for simulation. It allows you to copy your JSON formatted keysets to test and deploy on pact-web, allowing you simply copy and paste into this box rather than re-creating everything from scratch. To create a new key, specify a keyset name , keys , and pred , similar to the format seen in the Result tab. While keysets tab is a simple way to create new keysets on the website, raw tab is a simpler way of inputting keysets that already exist. Note Keysets created here will not appear in the Keysets tab, but they will appear in the Result tab.","title":"Raw"},{"location":"beginner/pact-keysets/#sign-to-deploy-a-contract","text":"Verifying transactions with keysets is important when deploying a smart contract. You can check this out for yourself from the deployment screen in the online editor. Where to find the sign tab From pact.kadena.io select Deploy From the deployment settings screen, choose Sign You should now see the following screen, which includes the keysets and specified keys from within the module. To deploy the smart contract, you will need to select a number of keys using the checkbox to the right as specified in the predicate function. This will ensure that your smart contract is successfully verified. Note There are a few necessary changes you will need to make to your smart contract to deploy it that are unrelated to keysets. For that reason, you won\u2019t be deploying your contract in this tutorial. You can check out the Hello World with Pact tutorial if you\u2019d like support on deploying a smart contract.","title":"Sign to Deploy a Contract"},{"location":"beginner/pact-keysets/#sign-to-call-a-function","text":"Calling a function on a deployed contract is another time where key signatures become valuable. Note You cannot call any functions from the sample contracts in the Online Editors Module Explorer. Contracts must first be deployed to a blockchain before you are able to call them. For this and future examples, be sure to look under deployed contracts to call functions. To get started, view the helloWorld smart contract in the module explorer and call the hello function. Steps to call the hello function Select Module Explorer Search helloWorld Select View Select _Call After calling the function, you should see a screen showing the Parameters of the function. Select the Sign tab to the right of Parameters to view the keys available to use for signatures. Here you should again see each of the keys you have available to sign the transaction. In this case, the helloWorld contract does not have any signature restrictions so you can call the function without these. That said, it\u2019s also fine to sign with a key now to get some practice. Select the checkbox next to one of the admin-keys , and go back to the function parameters screen. Type \u201cPact Keys\u201d (or whatever you prefer) as a Parameter and click Call to call the function. After calling the function, you should see \u201cHello Pact Keys\u201d appear in the messages tab. You have now verified a transaction using a key signature on a deployed smart contract. Again, it wasn\u2019t required for this specific contract but this is a very simple way to get familiar with the process for when you need it later.","title":"Sign to Call a Function"},{"location":"beginner/pact-keysets/#sign-to-call-a-function_1","text":"It\u2019s helpful to go through a process where you actually have restrictions on running code based on the keysets you have available. These restrictions can affect both your ability to load a contract into the REPL and the ability to call functions on a deployed contract. One example that does a good job exploring keysets and restrictions is the Simple Payment example. Navigate to Simple Payment example Select Module Explorer Examples Simple Payment Open You will be building a smart contract like this for yourself in a later tutorial. For now, you\u2019ll focus on a few critical areas that illustrate how to set keyset restrictions from within a module.","title":"Sign to Call a Function"},{"location":"beginner/pact-keysets/#enforce-keyset","text":"Throughout the module, you\u2019ll notice the following built-in function. enforce-keyset This function executes a guard or defined keyset name to enforce desired predicate logic. You can find an example of this on row 28 of the Simple Payments smart contract which is summarized below. ...code ;; row 14: define keyset to guard module ( define-keyset admin-keyset ( read-keyset admin-keyset )) ...code ( defun create-account ( id initial-balance keyset ) ;; row 27: Must be administrator. ( enforce-keyset admin-keyset ) ...code Here is how the code sample above is working Before the module, the admin-keyset is defined and read. Once in the contract, a function named create-account is created that takes keyset as a parameter. Upon running the function, enforce-keyset is called to check the caller is the owner of admin-keyset . If the caller is the owner of admin-keyset, the function continues. If the caller is not the owner of the admin-keyset, the function fails. Using this method, you can check that the caller of any function is the owner of a keyset that you specify. Challenge Try running this code in the online editor using Load into REPL. You\u2019ll notice an error appear. Can you fix the error based on what you have learned so far? When you get the following response you have successfully fixed the first error. interactive :61:31: No such key in message: sarah-keyset !!! Feeling Stuck? Create a keyset named admin-keyset from within the Env to remove this error. In the next section, you will address the remaining errors.","title":"Enforce-keyset"},{"location":"beginner/pact-keysets/#enforce-one-keyset","text":"Another useful built-in function for checking keysets is known as enforce-one . enforce-one This built-in function runs a series of tests in a specific order to check that one of the following statements are true. You can find an example of this on row row 38 of the Simple Payments contract and is summarized below. ...code ;; row 14: define keyset to guard module ( define-keyset admin-keyset ( read-keyset admin-keyset )) ...code ;; Row 34: define keyset to guard module ( defun get-balance ( id ) Only users or admin can read balance. ( with-read payments-table id { balance := balance , keyset := keyset } ( enforce-one Access denied [( enforce-keyset keyset ) ( enforce-keyset admin-keyset )]) balance )) ...code ;; row 60: create accounts ( create-account Sarah 100.25 ( read-keyset sarah-keyset )) ( create-account James 250.0 ( read-keyset james-keyset )) ...code Similar to the previous example, this example is enforcing that the caller be the owner of the admin-keyset . Unlike the previous example, it is also allowing the caller to be the owner of their account. Note Enforce-one is meant for running all types of tests. It is not specific to checking for keysets. In this context, it is running tests to check keysets and works as an effective way to enforce that a specific keyset exists. Notice how it is doing this using enforce-one paired with enforce-keyset . Enforce-one starts a series of tests to check that any of the following lines are true. If one of them is true, the caller will gain access to run the rest of the function. If neither of them is true, the caller will get a response that their request has been denied since they are not the owner of one of the required keys. What this means is that both the admin and owner of the account can view their balance, but no one else can. Bug Try running the code in the online editor using Load into REPL. You\u2019ll notice an error appear. Can you fix the error based on what you have learned so far? When you get the following response you have successfully fixed the first error. James s balance is 275.0 Solution Create two keysets from within the Env to remove this error. sarah-keyset james-keyset After creating these keysets the response signifies that you have successfully deployed the smart contract into the REPL. Question Investigate the smart contract to try and determine why you are getting the response that James's balance is 275.0. Can you tell what is happening in this smart contract to produce this outcome? If you cannot tell, don\u2019t worry. You will get a much more detailed overview of this smart contract in a later tutorial.","title":"Enforce-one Keyset"},{"location":"beginner/pact-keysets/#deploy-the-contract","text":"You are now ready to deploy the Simple Payments smart contract. For information on deploying a smart contract, view Deploy to the Testnet from the Hello World with Pact tutorial.","title":"Deploy the Contract"},{"location":"beginner/pact-keysets/#deployed-payments-contract-function-call","text":"Now that you have the appropriate keys and keysets, you can also run the deployed version of this smart contract. From the module explorer, view the module deployed in the previous section. Select the get-balance function to attempt to view James\u2019 balance. To do this, select parameters, and type \u201cJames\u201d as the id. Next, sign the contract with either the admin-key or the james-key . As shown earlier, each of these should have the authority to read James\u2019 account balance. After selecting call, you should see the James\u2019 balance displayed. If you\u2019d like to test that it is working correctly, you can also try to make this function call by signing with sarah-key . When doing this, you should receive an error since Sarah is only permitted to view her own balance. Using these ideas, you can call any function on the smart contract by giving the proper function parameters and signing the transactions with the appropriate keys.","title":"Deployed Payments Contract Function Call"},{"location":"beginner/pact-keysets/#review","text":"That wraps up this tutorial on Pact Keysets. As you learned, Pact Keysets allow you to specify authorization to different parts of the smart contract. They help determine which accounts have access to which parts of the programs you create. Throughout this tutorial you to created, defined, and read keysets. You also created keys, were introduced to predicate functions, and learned a few other options available to work with keys from the online editor. You also saw where to go to utilize these keys both when deploying a contract and calling a function. Finally, you experimented with running an existing smart contracts that had built-in keyset restrictions. Managing permissions can be difficult, and really depends on the needs of your application. For that reason, it\u2019s difficult to show all of the possibilities that may come up with keysets. That said, this tutorial tried to give a strong foundation for what options are available, and variations of these ideas will come up often in later tutorials. Take some time now to experiment with keys and keysets, and when you\u2019re ready, move on to our next tutorial.","title":"Review"},{"location":"beginner/pact-language-basics/","text":"Pact Language Basics Welcome to this tutorial on the Pact Language Basics! In this tutorial you'll learn some fundamental ideas needed started with Pact. You\u2019ll review some of the built-in functions Pact provides, review the language syntax, and write a few functions for yourself. Topics covered in this tutorial Pact Language Reference Pact Syntax Basic Commands Built in Functions Create Functions Key Takeaway The Pact Language Reference includes an overview of the syntax, basic commands, and built-in functions you\u2019ll use to create smart contracts. By getting familiar with these commands, you\u2019ll be prepared to build simple and safe smart contracts with the Pact programming language. Follow Along Open the online editor at pact.kadena.io to follow along with this tutorial. You can run each of the commands described to get more familiar with the Pact programming language. View the Pact Online Code Editor Tutorial for more information on running Pact commands. Pact Language Basics Tutorial Subscribe to our YouTube channel to access the latest Pact tutorials. Get Started To get started with the Pact Language Basics, navigate to the Pact Smart Contract Language reference . The Pact Smart Contract Language reference describes the syntax and semantics of the Pact language. If you haven\u2019t already, take some time to review this documentation to better understand the Pact language. Pact Language Syntax Start by reviewing the language syntax . Pact syntax can be found using the navigation on the left or by scrolling down to \u201cSyntax\u201d on the home page. Try running each of the commands on this page in the Pact Online Editor . Along with those presented in the documentation, this tutorial reviews some of the more common commands you\u2019ll work with when developing smart contracts. Basic Commands Running basic operations in Pact is simple. Try running each of the commands below in your editor to get more familiar with basic Pact commands. Note If you are comfortable with data types from other languages, feel free to skip to the built-in functions section. Pact follows conventional standards that are reviewed here to help those get started who may be new to programming. Integer An integer is any whole number value that does not include a decimal. pact 19 19 Decimals Decimals are any values that include a decimal. pact 25.3 25.3 Strings Try to run the following string. Do you know what is causing the error? pact hello :0:0: Cannot resolve hello What went wrong? The issue is that Pact does not know what hello means. To make it a string, remember to put quotes around it. pact hello hello There is also an alternative way to represent strings using Pact. pact `hello hello Preceding strings with a single ` is commonly used to mark unique items such as function or table names. It does not support whitespace or multi-line strings, but can be a helpful way to identify strings more succinctly. These are referred to as symbols . Boolean Booleans include true and false. pact true true List Pact allows you to express lists using brackets. pact [ Alice Dinesh Lee ] [ Alice Dinesh Lee ] Objects Pact also has objects that closely resemble Javascript objects. Objects are key-value as shown below. pact { type : cat , name : Scratchy , age : 6 } { type : cat , name : Scratchy , age : 6} This object describes a pet cat named Scratchy who\u2019s 6 years old. Make a List of Objects Pact also allows you to make a list of objects. pact [ { type : cat , name : Scratchy , age : 6 } { type : dog , name : Fluffy , age : 3 } ] [{ type : cat , name : Scratchy , age : 6} { type : dog , name : Fluffy , age : 3}] The list above includes a cat named Scratchy, a dog named Fluffy, and gives them both an age value. Time Time has many different properties and is supported by Pact. Look through the following example along with the supporting summary of time formats to better understand one possibility of representing time with Pact. pact (format-time %Y-%m-%dT%H:%M:%S%N (time 2016-07-23T13:30:45Z )) 2016-07-23T13:30:45+00:00 The following table provides a summary of time formats in the order of the example shown above. format purpose %Y year, no padding. %m month of year, 0-padded to two chars, \"01\"\u2013\"12\" %d day of month, 0-padded to two chars, \"01\"\u2013\"31\" T Text character placed in formatting to separate date from time. This is meant to help make this differentiation but is not part of an actual time format. %H hour of day (24-hour), 0-padded to two chars, \"00\"\u2013\"23\" %M minute of hour, 0-padded to two chars, \"00\"\u2013\"59\" %S second of minute (without decimal part), 0-padded to two chars, \"00\"\u2013\"60\" %N ISO 8601 style numeric time zone (e.g., \"-06:00\" or \"+01:00\") /EXTENSION/ View the language reference for more time formats . Parenthesis When working more sophisticated programs in Pact, you\u2019ll quickly notice the heavy use of parentheses. This syntax comes from Pacts LISP like syntax and is common in all LISP like languages. Below is an example helloWorld module in Pact. Notice the use of parentheses to mark each statement including modules, functions, and logic. ( module helloWorld admin-keyset ( defun hello ( name ) ( format Hello {}! [ name ])) ) Comments Comments are creating using \" \" or ' ' to clearly describe the purpose of the code. Here is the same helloWorld smart contract with comments included in the module. ( module helloWorld admin-keyset A smart contract to greet the world. ( defun hello ( name ) Do the hello-world dance ( format Hello {}! [ name ])) ) Built-in Functions After getting familiar with the Pact language syntax, you are ready to start working with some of Pacts built-in functions. To access the Pact built-in functions , navigate to Built-in Functions using the navigation on the left. As you\u2019ll see, there are many functions organized into a few key categories. Pact Standard Library Built-in Function Categories General Database Time Operators Keysets Capabilities REPL-only functions While many of these are valuable to learn, this tutorial will focus on only a few of them to get you started. Many other functions will come up in later tutorials as they become relevant to the programs you create. Arithmetic Operators Some of the simplest built in functions are the arithmetic operations. In Pact you can also add, subtract, multiply, or divide by changing the operator. Note Pact uses prefix notation for math operators. This is common in LISP like languages like Pact. Prefix notation means that the operator precedes the 2 values it\u2019s performing the operation on. Add 2 Numbers For example, by typing the following operation into your terminal should return 25. pact (* 5 5) 25 Other math operations can be performed by changing multiply to add , subtract , or divide . Combine Expressions Pact\u2019s simple expression syntax makes it easy to build more complicated expressions by nesting parentheses. Have a look at the expression below followed by its Pact equivalent. Can you tell how this expression is evaluated? ;; Example: 5 + 2 - 4 = 3 ;; Pact ( + 5 ( - 2 4 ) ) = 3 In this case, Pact evaluates 2 - 4, to get -2, then evaluates -2 + 5 to get the final answer of 3. Comparison Operators Another group of helpful operators is the comparison operators. These check whether values are equal, not equal, greater than, less than, and includes other common comparisons. Here\u2019s a table showing each of the comparison operators available in Pact. Along with arithmetic operators and comparison operators, Pact supports boolean, exponential, rounding, and many other common operators. You can learn more about each of these in the operator documentation. != True if X does not equal Y. (!= \"hello\" \"goodbye\") = true True if X Y. ( 1 3) = true = True if X = Y. ( = 5.24 2.52) = false = True if X equals Y. (= [1 2 3] [1 2 3]) = true True if X Y. ( 1 3) = false = True if X = Y. ( = 1 3) = false Along with arithmetic operators and comparison operators, Pact supports boolean, exponential, rounding, and many other common operators. You can learn more about each of these in the operator documentation . General Built-in Functions General functions are responsible for common tasks like manipulating lists, assigning values, checking values, and have many other use cases. At The first function listed on this page is at . To run the at function, type the following command into your terminal and hit enter. pact (at 1 [1 2 3]) 2 As you can see, I get a result of 2, which is the 1st index of this list. You can also search for other values by changing the index. Try updating this to look at index 2 and you should get back a 3. Get a Value from an Object You can also use At to get the value from an object. By specifying the object key, you can return the value of that key from the object. pact (at name { type : cat , name : Scratchy , age : 6 }) Scratchy Bind Bind allows you to map a variable to a value from within an object. (bind { source-object } {object-value := variable} variable) To create a binding, use the keyword bind followed by a source object. Follow this object with another object containing a specific value within the source using the := symbol. pact (bind { a : 1, b : 2 } { a := a-value } a-value) 1 Example Bindings are valuable when you want to bind the values of a table to a variable. Here is a brief example showing how they can be used within a function. ( defun pay ( from to ) ( with-read payments from { balance := from-bal } ...code ) This example reads a table named payments that includes a user from that is sending a balance. A binding is used in this case to map the balance , which is a column in the table, to the value of from-bal that is provided by the user. This allows you to call the balance of the user using the variable balance rather than the variable from-bal . Map Map allows you to apply a specific operation to all elements within a list and return the results. To create a mapping, use the keyword map followed by the operation and the list. pact (map (+ 1) [1 2 3]) [2 3 4] After running this command, a new list is returned with the value 1 added to each element within the original list. You can also use this operation to map other values, including strings. For example, if you have a list of names, you can map \u201cHello \u201d to each of them to returning a friendly message for each list item. pact (map (+ Hello ) [ Kadena Pact Standard Library ]) [ Hello Kadena Hello Pact Hello Standard Library ] After running this command, a new list is returned with the value \u201cHello \u201d added to each element within the original list. Note You can use any of the operators available in Pact when creating a mapping. Format Format allows you to piece messages together using a mix of strings and variables. Formatting is great to use any time you need to send messages to your users. To get started with the format function, paste the example from the documentation into your terminal. When you run this, you\u2019ll see that what you get back is a string that inserts the variables provided in the postfix into the original string where the brackets are located. ( format My {} has {} [ dog fleas ]) My dog has fleas You can now place whatever values you\u2019d like into this string. The first set of curly brackets corresponds to the first value in the list, the 2nd corresponds to the 2nd, and so on for as many values as exist. Prepare to Write Functions Coming up, you\u2019ll create a few functions for yourself. You can do this in the Pact Online Editor to get some practice creating and running functions. Before creating your functions, take a moment to create a keyset and module. ( define-keyset admin-keyset ( read-keyset admin-keyset )) ( module myModule admin-keyset ;; DEFINE FUNCTION HERE ) Writing your functions within the module will allow you to run the programs you create. Create a Function While many built-in functions are provided for you with the Pact Standard Library, you\u2019ll often create your own functions. Here is the syntax used to create a function in Pact. ( defun returnPhrase ( a b ) ;; COMMANDS GO HERE ) In this example, a function named returnPhrase will accept inputs a and b. Format a String For your first function, try creating a phrase using the built-in format function from earlier. ( format My {} has {} [ dog fleas ]) My dog has fleas By creating a function, you can take any two inputs from a user and return a formatted string value. ( define-keyset admin-keyset ( read-keyset admin-keyset )) ( module myModule admin-keyset ( defun returnPhrase ( a b ) ( format My {} has {} [ a b ]) ) ) ( returnPhrase dog fleas ) Select Load into REPL to see the output. You can now change these inputs to any values you\u2019d like. I\u2019ll try \u201ccat\u201d and \u201cclaws\u201d. ( define-keyset admin-keyset ( read-keyset admin-keyset )) ( module myModule admin-keyset ( defun returnPhrase ( a b ) ( format My {} has {} [ a b ]) ) ) ( returnPhrase cat claws ) Select Load into REPL to see the new phrase. Add 2 Numbers Before wrapping up, try creating a function using one of the math operations from earlier. Here is the command used to add two numbers. pact (+ 5 5) 10 Try creating a function that takes any two numbers as input, adds them together, and returns their sum. ( define-keyset admin-keyset ( read-keyset admin-keyset )) ;; Define the module. ( module myModule admin-keyset ( defun addNumbers ( a b ) ( + a b ) ) ) ;; Call the function ( addNumbers 12 7 ) You can now provide any two values to add with this function. Review That wraps up this introduction to the Pact Standard Library. Throughout this tutorial, we introduced the basics of the Pact programming language. You went over the Pact Standard Library, basic syntax, commands, and built-in functions. You also wrote a few functions for yourself. If you\u2019re familiar with other programming languages, a lot of these ideas should be familiar. The goal here was to make sure you know where to find helpful resources and are prepared to start writing smart contracts for yourself. If you\u2019re new to programming, this tutorial hopefully helped you better understand some of the fundamental concepts of programming. You're now ready to try some new ideas for yourself. Take some time to explore the documentation and try a few more of the Pact built-in functions. Smart contracts you create will depend on you being familiar with these basic ideas. You'll see plenty more examples of these concepts throughout the upcoming tutorials.","title":"Language Basics"},{"location":"beginner/pact-language-basics/#pact-language-basics","text":"Welcome to this tutorial on the Pact Language Basics! In this tutorial you'll learn some fundamental ideas needed started with Pact. You\u2019ll review some of the built-in functions Pact provides, review the language syntax, and write a few functions for yourself. Topics covered in this tutorial Pact Language Reference Pact Syntax Basic Commands Built in Functions Create Functions Key Takeaway The Pact Language Reference includes an overview of the syntax, basic commands, and built-in functions you\u2019ll use to create smart contracts. By getting familiar with these commands, you\u2019ll be prepared to build simple and safe smart contracts with the Pact programming language. Follow Along Open the online editor at pact.kadena.io to follow along with this tutorial. You can run each of the commands described to get more familiar with the Pact programming language. View the Pact Online Code Editor Tutorial for more information on running Pact commands.","title":"Pact Language Basics"},{"location":"beginner/pact-language-basics/#pact-language-basics-tutorial","text":"Subscribe to our YouTube channel to access the latest Pact tutorials.","title":"Pact Language Basics Tutorial"},{"location":"beginner/pact-language-basics/#get-started","text":"To get started with the Pact Language Basics, navigate to the Pact Smart Contract Language reference . The Pact Smart Contract Language reference describes the syntax and semantics of the Pact language. If you haven\u2019t already, take some time to review this documentation to better understand the Pact language.","title":"Get Started"},{"location":"beginner/pact-language-basics/#pact-language-syntax","text":"Start by reviewing the language syntax . Pact syntax can be found using the navigation on the left or by scrolling down to \u201cSyntax\u201d on the home page. Try running each of the commands on this page in the Pact Online Editor . Along with those presented in the documentation, this tutorial reviews some of the more common commands you\u2019ll work with when developing smart contracts.","title":"Pact Language Syntax"},{"location":"beginner/pact-language-basics/#basic-commands","text":"Running basic operations in Pact is simple. Try running each of the commands below in your editor to get more familiar with basic Pact commands. Note If you are comfortable with data types from other languages, feel free to skip to the built-in functions section. Pact follows conventional standards that are reviewed here to help those get started who may be new to programming.","title":"Basic Commands"},{"location":"beginner/pact-language-basics/#integer","text":"An integer is any whole number value that does not include a decimal. pact 19 19","title":"Integer"},{"location":"beginner/pact-language-basics/#decimals","text":"Decimals are any values that include a decimal. pact 25.3 25.3","title":"Decimals"},{"location":"beginner/pact-language-basics/#strings","text":"Try to run the following string. Do you know what is causing the error? pact hello :0:0: Cannot resolve hello What went wrong? The issue is that Pact does not know what hello means. To make it a string, remember to put quotes around it. pact hello hello There is also an alternative way to represent strings using Pact. pact `hello hello Preceding strings with a single ` is commonly used to mark unique items such as function or table names. It does not support whitespace or multi-line strings, but can be a helpful way to identify strings more succinctly. These are referred to as symbols .","title":"Strings"},{"location":"beginner/pact-language-basics/#boolean","text":"Booleans include true and false. pact true true","title":"Boolean"},{"location":"beginner/pact-language-basics/#list","text":"Pact allows you to express lists using brackets. pact [ Alice Dinesh Lee ] [ Alice Dinesh Lee ]","title":"List"},{"location":"beginner/pact-language-basics/#objects","text":"Pact also has objects that closely resemble Javascript objects. Objects are key-value as shown below. pact { type : cat , name : Scratchy , age : 6 } { type : cat , name : Scratchy , age : 6} This object describes a pet cat named Scratchy who\u2019s 6 years old.","title":"Objects"},{"location":"beginner/pact-language-basics/#make-a-list-of-objects","text":"Pact also allows you to make a list of objects. pact [ { type : cat , name : Scratchy , age : 6 } { type : dog , name : Fluffy , age : 3 } ] [{ type : cat , name : Scratchy , age : 6} { type : dog , name : Fluffy , age : 3}] The list above includes a cat named Scratchy, a dog named Fluffy, and gives them both an age value.","title":"Make a List of Objects"},{"location":"beginner/pact-language-basics/#time","text":"Time has many different properties and is supported by Pact. Look through the following example along with the supporting summary of time formats to better understand one possibility of representing time with Pact. pact (format-time %Y-%m-%dT%H:%M:%S%N (time 2016-07-23T13:30:45Z )) 2016-07-23T13:30:45+00:00 The following table provides a summary of time formats in the order of the example shown above. format purpose %Y year, no padding. %m month of year, 0-padded to two chars, \"01\"\u2013\"12\" %d day of month, 0-padded to two chars, \"01\"\u2013\"31\" T Text character placed in formatting to separate date from time. This is meant to help make this differentiation but is not part of an actual time format. %H hour of day (24-hour), 0-padded to two chars, \"00\"\u2013\"23\" %M minute of hour, 0-padded to two chars, \"00\"\u2013\"59\" %S second of minute (without decimal part), 0-padded to two chars, \"00\"\u2013\"60\" %N ISO 8601 style numeric time zone (e.g., \"-06:00\" or \"+01:00\") /EXTENSION/ View the language reference for more time formats .","title":"Time"},{"location":"beginner/pact-language-basics/#parenthesis","text":"When working more sophisticated programs in Pact, you\u2019ll quickly notice the heavy use of parentheses. This syntax comes from Pacts LISP like syntax and is common in all LISP like languages. Below is an example helloWorld module in Pact. Notice the use of parentheses to mark each statement including modules, functions, and logic. ( module helloWorld admin-keyset ( defun hello ( name ) ( format Hello {}! [ name ])) )","title":"Parenthesis"},{"location":"beginner/pact-language-basics/#comments","text":"Comments are creating using \" \" or ' ' to clearly describe the purpose of the code. Here is the same helloWorld smart contract with comments included in the module. ( module helloWorld admin-keyset A smart contract to greet the world. ( defun hello ( name ) Do the hello-world dance ( format Hello {}! [ name ])) )","title":"Comments"},{"location":"beginner/pact-language-basics/#built-in-functions","text":"After getting familiar with the Pact language syntax, you are ready to start working with some of Pacts built-in functions. To access the Pact built-in functions , navigate to Built-in Functions using the navigation on the left. As you\u2019ll see, there are many functions organized into a few key categories. Pact Standard Library Built-in Function Categories General Database Time Operators Keysets Capabilities REPL-only functions While many of these are valuable to learn, this tutorial will focus on only a few of them to get you started. Many other functions will come up in later tutorials as they become relevant to the programs you create.","title":"Built-in Functions"},{"location":"beginner/pact-language-basics/#arithmetic-operators","text":"Some of the simplest built in functions are the arithmetic operations. In Pact you can also add, subtract, multiply, or divide by changing the operator. Note Pact uses prefix notation for math operators. This is common in LISP like languages like Pact. Prefix notation means that the operator precedes the 2 values it\u2019s performing the operation on.","title":"Arithmetic Operators"},{"location":"beginner/pact-language-basics/#add-2-numbers","text":"For example, by typing the following operation into your terminal should return 25. pact (* 5 5) 25 Other math operations can be performed by changing multiply to add , subtract , or divide .","title":"Add 2 Numbers"},{"location":"beginner/pact-language-basics/#combine-expressions","text":"Pact\u2019s simple expression syntax makes it easy to build more complicated expressions by nesting parentheses. Have a look at the expression below followed by its Pact equivalent. Can you tell how this expression is evaluated? ;; Example: 5 + 2 - 4 = 3 ;; Pact ( + 5 ( - 2 4 ) ) = 3 In this case, Pact evaluates 2 - 4, to get -2, then evaluates -2 + 5 to get the final answer of 3.","title":"Combine Expressions"},{"location":"beginner/pact-language-basics/#comparison-operators","text":"Another group of helpful operators is the comparison operators. These check whether values are equal, not equal, greater than, less than, and includes other common comparisons. Here\u2019s a table showing each of the comparison operators available in Pact. Along with arithmetic operators and comparison operators, Pact supports boolean, exponential, rounding, and many other common operators. You can learn more about each of these in the operator documentation. != True if X does not equal Y. (!= \"hello\" \"goodbye\") = true True if X Y. ( 1 3) = true = True if X = Y. ( = 5.24 2.52) = false = True if X equals Y. (= [1 2 3] [1 2 3]) = true True if X Y. ( 1 3) = false = True if X = Y. ( = 1 3) = false Along with arithmetic operators and comparison operators, Pact supports boolean, exponential, rounding, and many other common operators. You can learn more about each of these in the operator documentation .","title":"Comparison Operators"},{"location":"beginner/pact-language-basics/#general-built-in-functions","text":"General functions are responsible for common tasks like manipulating lists, assigning values, checking values, and have many other use cases.","title":"General Built-in Functions"},{"location":"beginner/pact-language-basics/#at","text":"The first function listed on this page is at . To run the at function, type the following command into your terminal and hit enter. pact (at 1 [1 2 3]) 2 As you can see, I get a result of 2, which is the 1st index of this list. You can also search for other values by changing the index. Try updating this to look at index 2 and you should get back a 3.","title":"At"},{"location":"beginner/pact-language-basics/#get-a-value-from-an-object","text":"You can also use At to get the value from an object. By specifying the object key, you can return the value of that key from the object. pact (at name { type : cat , name : Scratchy , age : 6 }) Scratchy","title":"Get a Value from an Object"},{"location":"beginner/pact-language-basics/#bind","text":"Bind allows you to map a variable to a value from within an object. (bind { source-object } {object-value := variable} variable) To create a binding, use the keyword bind followed by a source object. Follow this object with another object containing a specific value within the source using the := symbol. pact (bind { a : 1, b : 2 } { a := a-value } a-value) 1 Example Bindings are valuable when you want to bind the values of a table to a variable. Here is a brief example showing how they can be used within a function. ( defun pay ( from to ) ( with-read payments from { balance := from-bal } ...code ) This example reads a table named payments that includes a user from that is sending a balance. A binding is used in this case to map the balance , which is a column in the table, to the value of from-bal that is provided by the user. This allows you to call the balance of the user using the variable balance rather than the variable from-bal .","title":"Bind"},{"location":"beginner/pact-language-basics/#map","text":"Map allows you to apply a specific operation to all elements within a list and return the results. To create a mapping, use the keyword map followed by the operation and the list. pact (map (+ 1) [1 2 3]) [2 3 4] After running this command, a new list is returned with the value 1 added to each element within the original list. You can also use this operation to map other values, including strings. For example, if you have a list of names, you can map \u201cHello \u201d to each of them to returning a friendly message for each list item. pact (map (+ Hello ) [ Kadena Pact Standard Library ]) [ Hello Kadena Hello Pact Hello Standard Library ] After running this command, a new list is returned with the value \u201cHello \u201d added to each element within the original list. Note You can use any of the operators available in Pact when creating a mapping.","title":"Map"},{"location":"beginner/pact-language-basics/#format","text":"Format allows you to piece messages together using a mix of strings and variables. Formatting is great to use any time you need to send messages to your users. To get started with the format function, paste the example from the documentation into your terminal. When you run this, you\u2019ll see that what you get back is a string that inserts the variables provided in the postfix into the original string where the brackets are located. ( format My {} has {} [ dog fleas ]) My dog has fleas You can now place whatever values you\u2019d like into this string. The first set of curly brackets corresponds to the first value in the list, the 2nd corresponds to the 2nd, and so on for as many values as exist.","title":"Format"},{"location":"beginner/pact-language-basics/#prepare-to-write-functions","text":"Coming up, you\u2019ll create a few functions for yourself. You can do this in the Pact Online Editor to get some practice creating and running functions. Before creating your functions, take a moment to create a keyset and module. ( define-keyset admin-keyset ( read-keyset admin-keyset )) ( module myModule admin-keyset ;; DEFINE FUNCTION HERE ) Writing your functions within the module will allow you to run the programs you create.","title":"Prepare to Write Functions"},{"location":"beginner/pact-language-basics/#create-a-function","text":"While many built-in functions are provided for you with the Pact Standard Library, you\u2019ll often create your own functions. Here is the syntax used to create a function in Pact. ( defun returnPhrase ( a b ) ;; COMMANDS GO HERE ) In this example, a function named returnPhrase will accept inputs a and b.","title":"Create a Function"},{"location":"beginner/pact-language-basics/#format-a-string","text":"For your first function, try creating a phrase using the built-in format function from earlier. ( format My {} has {} [ dog fleas ]) My dog has fleas By creating a function, you can take any two inputs from a user and return a formatted string value. ( define-keyset admin-keyset ( read-keyset admin-keyset )) ( module myModule admin-keyset ( defun returnPhrase ( a b ) ( format My {} has {} [ a b ]) ) ) ( returnPhrase dog fleas ) Select Load into REPL to see the output. You can now change these inputs to any values you\u2019d like. I\u2019ll try \u201ccat\u201d and \u201cclaws\u201d. ( define-keyset admin-keyset ( read-keyset admin-keyset )) ( module myModule admin-keyset ( defun returnPhrase ( a b ) ( format My {} has {} [ a b ]) ) ) ( returnPhrase cat claws ) Select Load into REPL to see the new phrase.","title":"Format a String"},{"location":"beginner/pact-language-basics/#add-2-numbers_1","text":"Before wrapping up, try creating a function using one of the math operations from earlier. Here is the command used to add two numbers. pact (+ 5 5) 10 Try creating a function that takes any two numbers as input, adds them together, and returns their sum. ( define-keyset admin-keyset ( read-keyset admin-keyset )) ;; Define the module. ( module myModule admin-keyset ( defun addNumbers ( a b ) ( + a b ) ) ) ;; Call the function ( addNumbers 12 7 ) You can now provide any two values to add with this function.","title":"Add 2 Numbers"},{"location":"beginner/pact-language-basics/#review","text":"That wraps up this introduction to the Pact Standard Library. Throughout this tutorial, we introduced the basics of the Pact programming language. You went over the Pact Standard Library, basic syntax, commands, and built-in functions. You also wrote a few functions for yourself. If you\u2019re familiar with other programming languages, a lot of these ideas should be familiar. The goal here was to make sure you know where to find helpful resources and are prepared to start writing smart contracts for yourself. If you\u2019re new to programming, this tutorial hopefully helped you better understand some of the fundamental concepts of programming. You're now ready to try some new ideas for yourself. Take some time to explore the documentation and try a few more of the Pact built-in functions. Smart contracts you create will depend on you being familiar with these basic ideas. You'll see plenty more examples of these concepts throughout the upcoming tutorials.","title":"Review"},{"location":"beginner/pact-modules/","text":"Pact Modules This tutorial introduces an essential feature in Pact known as modules. We\u2019ll discuss what modules are, why they\u2019re important, and how they relate to smart contracts. Tutorial Overview Introduction to Pact Modules Create a Module Example Modules Key Takeaway A Pact Module contains the logic necessary to create your application. It is where all code is written to for a smart contract. All API and data definitions exist within the Module. Pact Modules Tutorial Subscribe to our YouTube channel to access the latest Pact tutorials. Introduction to Pact Modules A Pact Module contains the logic necessary to create your application. It is where all code is written to for a smart contract. All API and data definitions exist within the Module. Modules contain the following code Schema Definitions Table Definitions Functions Definitions Pact Special Functions Const Values Modules do not contain the following code While modules contain the code needed to create a smart contract, some things are not included in a module. Keysets Table Creation Function Calls For more information on keysets, see our Pact Keysets Tutorial. Module vs Smart Contract When starting with Pact, you\u2019ll often create single modules that contain the full functionality of your smart contract. This raises an important question... Why aren\u2019t modules called smart contracts? The reason for this becomes clear once you begin creating more complicated smart contracts. These smart contracts will often contain many modules that work together to create your application. The goal of each module should be to create a focused set of functionality and clear organization within your files. While one module can make one smart contract, many modules can also make one smart contract. For that reason, we refer to the logic within a Pact file as a module. For more information see modules in the developer documentation. Create a Module To create a module, you write the module keyword and name followed by the keyset that has access to call this module. Here is a module named example that gives access to an admin-keyset . ;; define and read keysets ( module example admin-keyset ;; module code goes here ) ;; function calls The entire module is written within these parentheses. The top level code, like keysets, are defined outside of these parentheses. The basic idea of modules is simple, but the structure of the code and the actual logic within the module can get pretty complicated. For that reason, it\u2019s helpful to start by focusing on the basic syntax and structure of existing modules. Example Modules You can find examples using the Module Explorer in the Pact Online Editor . Hello World From the Module Explorer, open the Hello World Smart Contract. If you\u2019re interested, this smart contract is explained in depth in the Hello World with Pact . Notice that the pattern of this smart contract is similar to the outline described above. ;; define and read keysets ( define-keyset admin-keyset ( read-keyset admin-keyset )) ( module helloWorld admin-keyset ;; module code goes here ( defun hello ( name ) ( format Hello {}! [ name ])) ) ;; function calls ( hello world ) In this case, the module code only contains a simple function named hello . Later modules will include much more complexity. Simple Payment Next, take some time to look through the simple payment module. From the Module Explorer, select open on Simple Payment to open this smart contract in the online editor. Once again, you\u2019ll notice the same pattern. This time, the smart contract includes a few other features. Included in the Simple Payment Smart Contract Schema Definitions Table Definitions Table Creation Functions Function Calls View the summary of this contract below and take some time to investigate the actual code provided in the Simple Payment Module . ;; define and read keysets ( define-keyset admin-keyset ( read-keyset admin-keyset )) ( module payments admin-keyset ;; module code goes here ;; define schemas ;; ex. defschema payments... ;; define tables ;; ex. deftable payments-table:{payments}) ;; define functions ;; ex. defun create-account... ;; ex. defun get-balance... ;; ex. defun pay... ) ;; create tables ;; ex. create-table payments-table ;; function calls ;; ex. pay ;; ex. get-balance While you may not fully understand each line of code quite yet, there are a few important things to note here. First, schemas and tables are defined inside of modules, but tables are created outside of modules. Table and schema definitions include built in functions including defschema, deftable, and create-table. You\u2019ll learn more about each of these functions in the Pact Schemas and Tables tutorial . Next, there are some new Pact built in functions that you may have not seen before. Contract Built-in functions include: enforce insert with-read We\u2019ll also go over each of these in more detail in later tutorials. You can explore the Pact Language Reference built-in functions to learn more about each of them now if you\u2019d like. Explore Other Modules Other modules include the same basic framework as those included in these simple smart contracts. Take some time now to explore each of the other Smart Contract examples to get more familiar with how they work. Example Modules International Payment Verification Accounts Focus on understanding the structure of each module. Gain some familiarity with the different techniques used to create each smart contract. Review That wraps up this tutorial on Pact Modules . In this tutorial you were introduced to modules, one of the core features of the Pact Programming Language. You learned what modules are, why they\u2019re important, and went over a few examples. The goal for this tutorial wasn\u2019t to help you learn all of the code that can possibly go into creating a module. That\u2019s what most of the entire Pact programming language is built to accomplish. You\u2019ll learn much more about this in later tutorials. For now, the important takeaway is to understand what a module is, as well as to recognize the key elements that belong inside and outside of Pact modules. Take some time now to continue exploring the examples provided in the Pact Online Editor. When you\u2019re ready, you can learn more about the Pact programming language in our next tutorial.","title":"Modules"},{"location":"beginner/pact-modules/#pact-modules","text":"This tutorial introduces an essential feature in Pact known as modules. We\u2019ll discuss what modules are, why they\u2019re important, and how they relate to smart contracts. Tutorial Overview Introduction to Pact Modules Create a Module Example Modules Key Takeaway A Pact Module contains the logic necessary to create your application. It is where all code is written to for a smart contract. All API and data definitions exist within the Module.","title":"Pact Modules"},{"location":"beginner/pact-modules/#pact-modules-tutorial","text":"Subscribe to our YouTube channel to access the latest Pact tutorials.","title":"Pact Modules Tutorial"},{"location":"beginner/pact-modules/#introduction-to-pact-modules","text":"A Pact Module contains the logic necessary to create your application. It is where all code is written to for a smart contract. All API and data definitions exist within the Module. Modules contain the following code Schema Definitions Table Definitions Functions Definitions Pact Special Functions Const Values Modules do not contain the following code While modules contain the code needed to create a smart contract, some things are not included in a module. Keysets Table Creation Function Calls For more information on keysets, see our Pact Keysets Tutorial.","title":"Introduction to Pact Modules"},{"location":"beginner/pact-modules/#module-vs-smart-contract","text":"When starting with Pact, you\u2019ll often create single modules that contain the full functionality of your smart contract. This raises an important question... Why aren\u2019t modules called smart contracts? The reason for this becomes clear once you begin creating more complicated smart contracts. These smart contracts will often contain many modules that work together to create your application. The goal of each module should be to create a focused set of functionality and clear organization within your files. While one module can make one smart contract, many modules can also make one smart contract. For that reason, we refer to the logic within a Pact file as a module. For more information see modules in the developer documentation.","title":"Module vs Smart Contract"},{"location":"beginner/pact-modules/#create-a-module","text":"To create a module, you write the module keyword and name followed by the keyset that has access to call this module. Here is a module named example that gives access to an admin-keyset . ;; define and read keysets ( module example admin-keyset ;; module code goes here ) ;; function calls The entire module is written within these parentheses. The top level code, like keysets, are defined outside of these parentheses. The basic idea of modules is simple, but the structure of the code and the actual logic within the module can get pretty complicated. For that reason, it\u2019s helpful to start by focusing on the basic syntax and structure of existing modules.","title":"Create a Module"},{"location":"beginner/pact-modules/#example-modules","text":"You can find examples using the Module Explorer in the Pact Online Editor .","title":"Example Modules"},{"location":"beginner/pact-modules/#hello-world","text":"From the Module Explorer, open the Hello World Smart Contract. If you\u2019re interested, this smart contract is explained in depth in the Hello World with Pact . Notice that the pattern of this smart contract is similar to the outline described above. ;; define and read keysets ( define-keyset admin-keyset ( read-keyset admin-keyset )) ( module helloWorld admin-keyset ;; module code goes here ( defun hello ( name ) ( format Hello {}! [ name ])) ) ;; function calls ( hello world ) In this case, the module code only contains a simple function named hello . Later modules will include much more complexity.","title":"Hello World"},{"location":"beginner/pact-modules/#simple-payment","text":"Next, take some time to look through the simple payment module. From the Module Explorer, select open on Simple Payment to open this smart contract in the online editor. Once again, you\u2019ll notice the same pattern. This time, the smart contract includes a few other features. Included in the Simple Payment Smart Contract Schema Definitions Table Definitions Table Creation Functions Function Calls View the summary of this contract below and take some time to investigate the actual code provided in the Simple Payment Module . ;; define and read keysets ( define-keyset admin-keyset ( read-keyset admin-keyset )) ( module payments admin-keyset ;; module code goes here ;; define schemas ;; ex. defschema payments... ;; define tables ;; ex. deftable payments-table:{payments}) ;; define functions ;; ex. defun create-account... ;; ex. defun get-balance... ;; ex. defun pay... ) ;; create tables ;; ex. create-table payments-table ;; function calls ;; ex. pay ;; ex. get-balance While you may not fully understand each line of code quite yet, there are a few important things to note here. First, schemas and tables are defined inside of modules, but tables are created outside of modules. Table and schema definitions include built in functions including defschema, deftable, and create-table. You\u2019ll learn more about each of these functions in the Pact Schemas and Tables tutorial . Next, there are some new Pact built in functions that you may have not seen before. Contract Built-in functions include: enforce insert with-read We\u2019ll also go over each of these in more detail in later tutorials. You can explore the Pact Language Reference built-in functions to learn more about each of them now if you\u2019d like.","title":"Simple Payment"},{"location":"beginner/pact-modules/#explore-other-modules","text":"Other modules include the same basic framework as those included in these simple smart contracts. Take some time now to explore each of the other Smart Contract examples to get more familiar with how they work. Example Modules International Payment Verification Accounts Focus on understanding the structure of each module. Gain some familiarity with the different techniques used to create each smart contract.","title":"Explore Other Modules"},{"location":"beginner/pact-modules/#review","text":"That wraps up this tutorial on Pact Modules . In this tutorial you were introduced to modules, one of the core features of the Pact Programming Language. You learned what modules are, why they\u2019re important, and went over a few examples. The goal for this tutorial wasn\u2019t to help you learn all of the code that can possibly go into creating a module. That\u2019s what most of the entire Pact programming language is built to accomplish. You\u2019ll learn much more about this in later tutorials. For now, the important takeaway is to understand what a module is, as well as to recognize the key elements that belong inside and outside of Pact modules. Take some time now to continue exploring the examples provided in the Pact Online Editor. When you\u2019re ready, you can learn more about the Pact programming language in our next tutorial.","title":"Review"},{"location":"beginner/pact-schemas-and-tables/","text":"Pact Schemas and Tables Welcome to this introduction to Pact Schemas and Tables! Topics covered in this tutorial Introduction to Schemas and Tables Define Schemas Define Tables Create Tables Table built-in functions The goal of this tutorial is to get you familiar with what schemas and tables are, why they\u2019re useful, and to demonstrate how to implement these within a Pact smart contract. Key Takeaway Tables are one of the three core elements of Pact smart contracts. Tables are defined using deftable , which references a schema defined by defschema , and are later created using create-table . There are many ways to build functions that store, manipulate, and read data from smart contract tables. Introduction to Tables and Schemas Tables in Pact are responsible for holding all of the data for application. Data is stored in a key-row structure similar to other relational databases. Tables are defined by schemas that define both the field values and field types. Before completing this tutorial, it may be helpful to read through some of the existing materials on schemas, types, and tables. This material includes some of the prerequisites needed to understand the conceptual foundations behind what tables are and how they provide value to your Pact smart contracts. Pact Language Reference Table Creation Types and Schemas Define Schemas Before creating a table in Pact, you need to define its schema, which describes the structure of the table. Schemas specify the columns and data types that are meant to be in a table. Schemas are defined within Pact modules using defschema and consist of a series of field names and field types . Each field name specifies a column in the table, and each field type specifies the type of data held in that table. The example table below contains field names and field types. In this example, there are 3 fields; balance , amount , and ccy (currency), each with their own field type. Accounts Table field name field type balance decimal amount decimal ccy string You can create this schema in Pact using defschema as shown below. ( defschema accounts Schema for accounts table. balance :decimal amount :decimal ccy :string ) All table schemas you create will look similar to this but will contain different field names and types. Field names can include whatever works best for your application, and fields types can include any of the types supported by Pact. Note The data types supported by Pact can be found here . Define Tables Tables hold data created by the smart contract. These are defined within Pact modules and there is no limit to the number of tables you can define. This data can be added, read, or changed using functions, and access to this data can be restricted using what is known as table guards . Tables are defined after the prerequisite schema is defined, using deftable followed by the table name and a reference to the table\u2019s schema. Accounts Example ( deftable table-name : { schema-name }) Given the schema from the earlier defined schema, you can define the table as shown below. ( deftable accounts-table : { accounts }) Notes on Syntax Notice that the table and schema are represented as a pair, separated by a \u201c:\u201d. The { } around the schema-name are there because the schema is an object. The schema name and table names must be different from one another. It\u2019s best practice to make names that resemble each other but are not identical. ( deftable cat-table : { cat }) ( deftable asset-tracker : { asset }) Keeping names similar helps you track your schemas and tables more effectively while avoiding confusion between their names. Create Tables Once tables are defined, they still need to be created. Though tables are defined within the module, creating tables in Pact is done outside of the module. This is done to ensure that the module may be redefined or updated later without having to re-create the table. The relationship of modules to tables is important, as described in table guards Tables are created outside of the module using create-table followed by the table name as defined within the module. ( deftable cat-table : { cat }) ( deftable asset-tracker : { asset }) This syntax for creating tables is simple. The main concern here is to make sure that you follow through with creating each of the tables that are defined within the module. Table Built-in Functions When working with tables, there are many built-in functions available for you to work with table data. function type purpose Insert Insert new rows into a table. Read Read values from a table. Update Update values within a table. Delete Not possible in Pact. Notice that these functions are similar to common options available in other databases (CRUD - create, read, update, delete). Note Delete is not available because, as you may know, you cannot delete data from a blockchain. Also, rather than create, the Pact built-in function is named insert. Insert Insert functions are used to add new data into a table. These are useful when creating new artifacts such as entities, loans, accounts, and in any other case where you may want to add data. For an example of an insert function, pretend you have the following empty table. entity-table key entityName To add a row to this table with an entityName of \u201cMy Entity\u201d at the key of entity-1 , you would write the following Pact code. ( insert entity-table \u201c entity-1 \u201d { entityName : My Entity }) Note It is required that the key be entered as a string. You can also place insert within a function and using the inputs to add new data to rows within a table. This will help you add rows more dynamically from within your application. Here is an example using insert from within a function. ( defun create-entity ( entityName ) ( insert entity-table entityId { entityName : entityName } ) ) In each of the previous cases, the final result would insert the data similar to the following into the entity-table . key entityName entity-1 My Entity Read Read allows you to read rows from a table for a given key. For this example, imagine you had the following table and you wanted to read the balance and currency at the key of entity-1 . Accounts Table key balance ccy entity-1 4.00 USD entity-2 3.00 USD Using read, you can specify the id and you\u2019ll get back the information you request. ( read accounts 1 [ balance ccy ]) Here is an example of how to get similar functionality by using read from within a function. ( defun read-accounts ( 1 ) ( read accounts id [ \u2018 balance \u2018 ccy ]) ) ) In each of the cases shown above, the functions would return the following values. balance ccy 4.00 USD Update Update functions can be used to update a values in an existing row of a table. Updating is helpful in situations where you need to change the status of a column or amend the initial dataset to a new value. Using update , you can specify the row id to update a value within that row. This value would generally be passed in by the user as a function parameter. ( update table-name id { value : new-value } For example, pretend you had the following table and wanted to update the assetPrice . Assets Table key assetName assetPrice status entity-1 My Asset 5.0 todo The amend-assetPrice function below updates the assetId column of an assets-table . It then reads the value of the updated column. ( defun amend-assetPrice ( assetPrice :decimal ) ( update assets-table assetPrice { assetPrice :assetPrice } ) ( read asset-table assetId ) ) This same pattern can be used in many different ways. For example, you may be creating an asset and want to track its progress throughout the creation process with fields like todo, in progress, or done. In this case, you could use the function below asset-update , to change the status of the asset as it progresses through the process. ( defun asset-update ( assetId :string new-status :string ) ( update assets-table assetId { status : new-status }) ( read asset-table assetId ) ) Select Select is used to read values from a table. This is similar to read but select includes more specificity allowing you greater flexibility in what information you choose to select. The syntax for selecting from tables closely resembles SQL statements. The simplest select statement you can create would be to select all values of an existing table. ( select table-name ) Similar to other built-in functions, you can run this from within another function. For example, here is the assets-table from earlier. Assets Table key assetName assetPrice status entity-1 My Asset 5.0 todo entity-2 Asset 2 6.0 in progress entity-3 Asset 3 7.0 done You can run the following select statement to return all values from this table. ( defun select-assets () ( select assets-table ( constantly true )) ) This query will return the following values from the assets-table . key assetName assetPrice status entity-1 My Asset 5.0 todo entity-2 Asset 2 6.0 in progress entity-3 Asset 3 7.0 done Along with select, you can also use a where statement to further refine your query as shown below. ( select assets-table [ assetName , assetPrice ] ( where assetName ( = Asset 2 ))) This query would return the following values from the assets-table . assetName assetPrice Asset 2 6.0 You can also specify operators such as greater than or less than from within the WHERE clause as shown below. ( select assets-table ( where assetPrice ( 6.0 ))) This query would return the following values from the assets-table . key assetName assetPrice status entity-3 Asset 3 7.0 done Keys Keys allows you to return all the key values in a table. Given the previously shown assets-table , you could return each of the keys using the code below. ( keys assets-table ) This can also be done within a function as shown below. ( defun get-keys ( table-name ) ( keys table-name ) ) Review That wraps up this tutorial on schemas and tables with Pact. By completing this tutorial, you\u2019ve mastered many of the core ideas surrounding schemas and tables. You\u2019ve also seen some of the basic functions that are useful for manipulating data from within a table. You can try building out your own database from scratch or by using existing database examples to work from. An excellent resource for finding existing schemas for well designed databases can be found here . If you\u2019re unfamiliar with database design, you can review most of what you need to know here . That website goes into a lots of detail, so if you\u2019d like to focus more on specifically what might be useful to you right now, you can find that here . Try finding a database you\u2019re interested in to practice recreating some of its functionality. And if you\u2019re not quite ready to try that, you can check out the next tutorial instead. You\u2019ll see many more examples of tables, schemas, and their related functions throughout the rest of this series.","title":"Schemas and Tables"},{"location":"beginner/pact-schemas-and-tables/#pact-schemas-and-tables","text":"Welcome to this introduction to Pact Schemas and Tables! Topics covered in this tutorial Introduction to Schemas and Tables Define Schemas Define Tables Create Tables Table built-in functions The goal of this tutorial is to get you familiar with what schemas and tables are, why they\u2019re useful, and to demonstrate how to implement these within a Pact smart contract. Key Takeaway Tables are one of the three core elements of Pact smart contracts. Tables are defined using deftable , which references a schema defined by defschema , and are later created using create-table . There are many ways to build functions that store, manipulate, and read data from smart contract tables.","title":"Pact Schemas and Tables"},{"location":"beginner/pact-schemas-and-tables/#introduction-to-tables-and-schemas","text":"Tables in Pact are responsible for holding all of the data for application. Data is stored in a key-row structure similar to other relational databases. Tables are defined by schemas that define both the field values and field types. Before completing this tutorial, it may be helpful to read through some of the existing materials on schemas, types, and tables. This material includes some of the prerequisites needed to understand the conceptual foundations behind what tables are and how they provide value to your Pact smart contracts. Pact Language Reference Table Creation Types and Schemas","title":"Introduction to Tables and Schemas"},{"location":"beginner/pact-schemas-and-tables/#define-schemas","text":"Before creating a table in Pact, you need to define its schema, which describes the structure of the table. Schemas specify the columns and data types that are meant to be in a table. Schemas are defined within Pact modules using defschema and consist of a series of field names and field types . Each field name specifies a column in the table, and each field type specifies the type of data held in that table. The example table below contains field names and field types. In this example, there are 3 fields; balance , amount , and ccy (currency), each with their own field type. Accounts Table field name field type balance decimal amount decimal ccy string You can create this schema in Pact using defschema as shown below. ( defschema accounts Schema for accounts table. balance :decimal amount :decimal ccy :string ) All table schemas you create will look similar to this but will contain different field names and types. Field names can include whatever works best for your application, and fields types can include any of the types supported by Pact. Note The data types supported by Pact can be found here .","title":"Define Schemas"},{"location":"beginner/pact-schemas-and-tables/#define-tables","text":"Tables hold data created by the smart contract. These are defined within Pact modules and there is no limit to the number of tables you can define. This data can be added, read, or changed using functions, and access to this data can be restricted using what is known as table guards . Tables are defined after the prerequisite schema is defined, using deftable followed by the table name and a reference to the table\u2019s schema. Accounts Example ( deftable table-name : { schema-name }) Given the schema from the earlier defined schema, you can define the table as shown below. ( deftable accounts-table : { accounts }) Notes on Syntax Notice that the table and schema are represented as a pair, separated by a \u201c:\u201d. The { } around the schema-name are there because the schema is an object. The schema name and table names must be different from one another. It\u2019s best practice to make names that resemble each other but are not identical. ( deftable cat-table : { cat }) ( deftable asset-tracker : { asset }) Keeping names similar helps you track your schemas and tables more effectively while avoiding confusion between their names.","title":"Define Tables"},{"location":"beginner/pact-schemas-and-tables/#create-tables","text":"Once tables are defined, they still need to be created. Though tables are defined within the module, creating tables in Pact is done outside of the module. This is done to ensure that the module may be redefined or updated later without having to re-create the table. The relationship of modules to tables is important, as described in table guards Tables are created outside of the module using create-table followed by the table name as defined within the module. ( deftable cat-table : { cat }) ( deftable asset-tracker : { asset }) This syntax for creating tables is simple. The main concern here is to make sure that you follow through with creating each of the tables that are defined within the module.","title":"Create Tables"},{"location":"beginner/pact-schemas-and-tables/#table-built-in-functions","text":"When working with tables, there are many built-in functions available for you to work with table data. function type purpose Insert Insert new rows into a table. Read Read values from a table. Update Update values within a table. Delete Not possible in Pact. Notice that these functions are similar to common options available in other databases (CRUD - create, read, update, delete). Note Delete is not available because, as you may know, you cannot delete data from a blockchain. Also, rather than create, the Pact built-in function is named insert.","title":"Table Built-in Functions"},{"location":"beginner/pact-schemas-and-tables/#insert","text":"Insert functions are used to add new data into a table. These are useful when creating new artifacts such as entities, loans, accounts, and in any other case where you may want to add data. For an example of an insert function, pretend you have the following empty table. entity-table key entityName To add a row to this table with an entityName of \u201cMy Entity\u201d at the key of entity-1 , you would write the following Pact code. ( insert entity-table \u201c entity-1 \u201d { entityName : My Entity }) Note It is required that the key be entered as a string. You can also place insert within a function and using the inputs to add new data to rows within a table. This will help you add rows more dynamically from within your application. Here is an example using insert from within a function. ( defun create-entity ( entityName ) ( insert entity-table entityId { entityName : entityName } ) ) In each of the previous cases, the final result would insert the data similar to the following into the entity-table . key entityName entity-1 My Entity","title":"Insert"},{"location":"beginner/pact-schemas-and-tables/#read","text":"Read allows you to read rows from a table for a given key. For this example, imagine you had the following table and you wanted to read the balance and currency at the key of entity-1 . Accounts Table key balance ccy entity-1 4.00 USD entity-2 3.00 USD Using read, you can specify the id and you\u2019ll get back the information you request. ( read accounts 1 [ balance ccy ]) Here is an example of how to get similar functionality by using read from within a function. ( defun read-accounts ( 1 ) ( read accounts id [ \u2018 balance \u2018 ccy ]) ) ) In each of the cases shown above, the functions would return the following values. balance ccy 4.00 USD","title":"Read"},{"location":"beginner/pact-schemas-and-tables/#update","text":"Update functions can be used to update a values in an existing row of a table. Updating is helpful in situations where you need to change the status of a column or amend the initial dataset to a new value. Using update , you can specify the row id to update a value within that row. This value would generally be passed in by the user as a function parameter. ( update table-name id { value : new-value } For example, pretend you had the following table and wanted to update the assetPrice . Assets Table key assetName assetPrice status entity-1 My Asset 5.0 todo The amend-assetPrice function below updates the assetId column of an assets-table . It then reads the value of the updated column. ( defun amend-assetPrice ( assetPrice :decimal ) ( update assets-table assetPrice { assetPrice :assetPrice } ) ( read asset-table assetId ) ) This same pattern can be used in many different ways. For example, you may be creating an asset and want to track its progress throughout the creation process with fields like todo, in progress, or done. In this case, you could use the function below asset-update , to change the status of the asset as it progresses through the process. ( defun asset-update ( assetId :string new-status :string ) ( update assets-table assetId { status : new-status }) ( read asset-table assetId ) )","title":"Update"},{"location":"beginner/pact-schemas-and-tables/#select","text":"Select is used to read values from a table. This is similar to read but select includes more specificity allowing you greater flexibility in what information you choose to select. The syntax for selecting from tables closely resembles SQL statements. The simplest select statement you can create would be to select all values of an existing table. ( select table-name ) Similar to other built-in functions, you can run this from within another function. For example, here is the assets-table from earlier. Assets Table key assetName assetPrice status entity-1 My Asset 5.0 todo entity-2 Asset 2 6.0 in progress entity-3 Asset 3 7.0 done You can run the following select statement to return all values from this table. ( defun select-assets () ( select assets-table ( constantly true )) ) This query will return the following values from the assets-table . key assetName assetPrice status entity-1 My Asset 5.0 todo entity-2 Asset 2 6.0 in progress entity-3 Asset 3 7.0 done Along with select, you can also use a where statement to further refine your query as shown below. ( select assets-table [ assetName , assetPrice ] ( where assetName ( = Asset 2 ))) This query would return the following values from the assets-table . assetName assetPrice Asset 2 6.0 You can also specify operators such as greater than or less than from within the WHERE clause as shown below. ( select assets-table ( where assetPrice ( 6.0 ))) This query would return the following values from the assets-table . key assetName assetPrice status entity-3 Asset 3 7.0 done","title":"Select"},{"location":"beginner/pact-schemas-and-tables/#keys","text":"Keys allows you to return all the key values in a table. Given the previously shown assets-table , you could return each of the keys using the code below. ( keys assets-table ) This can also be done within a function as shown below. ( defun get-keys ( table-name ) ( keys table-name ) )","title":"Keys"},{"location":"beginner/pact-schemas-and-tables/#review","text":"That wraps up this tutorial on schemas and tables with Pact. By completing this tutorial, you\u2019ve mastered many of the core ideas surrounding schemas and tables. You\u2019ve also seen some of the basic functions that are useful for manipulating data from within a table. You can try building out your own database from scratch or by using existing database examples to work from. An excellent resource for finding existing schemas for well designed databases can be found here . If you\u2019re unfamiliar with database design, you can review most of what you need to know here . That website goes into a lots of detail, so if you\u2019d like to focus more on specifically what might be useful to you right now, you can find that here . Try finding a database you\u2019re interested in to practice recreating some of its functionality. And if you\u2019re not quite ready to try that, you can check out the next tutorial instead. You\u2019ll see many more examples of tables, schemas, and their related functions throughout the rest of this series.","title":"Review"},{"location":"beginner/welcome-to-pact/","text":"Welcome to Pact Welcome to the Pact smart contract programming language! In this tutorial, you\u2019ll learn about Pact, get introduced to its core features, and take your first steps toward becoming a Pact smart contract developer. Topics covered in this tutorial Introduction to Pact Pact Key Features Learn More About Pact The goal is to familiarize you with what Pact is, how its used, and some critical decisions that influenced the design of this new language. Key Takeaway Pact is the safest, most user-friendly language for smart contracts. It\u2019s designed for security and performance. It is turing incomplete, human readable, supports upgradable contracts, and formal verification to make high performant and secure smart contracts. Welcome to Pact Tutorial Subscribe to our YouTube channel to access the latest Pact tutorials. Introduction to Pact Pact is an open-source programming language for writing smart contracts . It\u2019s designed from the ground up to support the unique challenges of developing solutions to run on a blockchain. Pact empowers developers to create robust and high-performance logic for transactions. It facilitates execution of mission-critical business operations quickly and effectively. Pact is designed with safety in mind. Its design is informed by existing approaches to smart contracts as well as stored procedure languages like SQL and LISP. Pact resembles a general-purpose, Turing-complete language. It includes LISP-like syntax, user functions, modules, and imperative style. Pact Smart Contracts Pact smart contracts contain three core elements: the code module, keysets, and tables. The table below briefly introduces each of these core elements. Module A module defines the logic of a smart contract. It contains functions, pact definitions, tables, and schemas. Keysets Includes relevant documentation links and allows you to load code into the REPL, refresh the repl, or deploy smart contract. Tables Tables store data generated by Pact modules. These tables have a \u201ckey-row\u201d structure and support schemas as well as a versioned, columnar history. Each of these elements support a wide range of functionality. This ensures that you have the tools you need to create robust solutions for real-world problems. Pact Key Features There are many valuable features make Pact such a safe and high-performance language. Here are a few that we\u2019ll focus on throughout this tutorial. Pact Key Features Turing Incomplete Human Readable Upgradable Contracts Formal Verification Type Inference Total Governance RDBMS Integration Pacts Turing Incomplete Pact contracts are Turing incomplete. A Turing complete language has the power to run any possible program. In some languages, Turing completeness is an extremely important feature. For smart contracts, it\u2019s an incredibly dangerous feature. For that reason, Pact is designed to be Turing incomplete which places deliberate constraints on its computational ability. This supports its design goal of \u201cjust enough\u201d power for transactional blockchain solutions and helps ensure the security of its smart contracts. The first restriction in Pact is that there is no unbounded looping or recursion. Pact detects recursion and fails immediately. Looping is also only supported in special circumstances. The key benefits of this are to reduce cost and improve performance. This feature makes some of the most infamous and costly bugs discovered in other platforms not even possible with Pact. For more information on this topic, see our blog post - Turing Completeness and Smart Contract Security . Human Readable Pact smart contracts are human readable. All Pact code gets stored as written in a human-readable form on the ledger. Pact smart contracts install directly onto the blockchain. This allows you to review the running code as it was written and be sure of exactly what it's doing. This is important because smart contracts solve business problems that require both technical and non-technical expertise. Building the best smart contract solution requires everyone to understand and contribute to the development of the smart contract. For that reason, Pact was built to be simple to read and write. This simplicity helps provide complete transparency for the logic within its smart contracts. This approach also encourages shorter programs. The code executes directly on the ledger where it can be read easily by anyone. As a result, Pact is easy to understand. For example, here\u2019s a \u201cHello World\u201d smart contract using Pact. ( module helloWorld admin-keyset ( defun hello ( name ) ( format Hello {}! [ name ])) ) ( hello world ) Without having learned anything about the Pact language, you can already start to see how it works. With these few simple lines of code, you see a fully functioning Pact \u201cHello World\u201d smart contract. Once written, smart contracts are deployed to a blockchain. In Pact, the code on the blockchain is the same as the code that was written. Maintaining this code means that no matter when you see the code it will always be as it was written. This allows you to understand the code so you can continue to moderate and improve your application over time. Upgradable Contracts Pact contracts are upgradable. Upgradable contracts allow you to revise and improve your smart contracts over time. This allows you to offer new features and fix bugs as you continue developing your smart contract. None of this is possible with other smart contract languages, and it\u2019s a powerful feature when building impactful applications for your business. Pact's tooling ecosystem further amplifies the simplicity of upgrading contracts. Compiler and runtime errors offer detailed information, with stack traces and function documentation to ensure you\u2019re making the best version of your smart contract. Pact\u2019s iterative development process is also supported by a feature-rich REPL helping you to improve and deploy new smart contracts rapidly. It includes features such as incremental transaction execution and environment and database inspection. Formal Verification Pact comes equipped with a powerful validation tool suite in the form of formal verification . Pact uses Z3, an open-source tool developed by Microsoft, to mathematically verify and test for bugs present in the code. This means that Pact allows smart contract authors to express, automatically check, and formally verify that their code does not contain any bugs. Formal verification is the same system used to protect mission-critical environments like nuclear power plants or air and space autopilot systems. You now have this same high level of security in every smart contract you write with Pact. Formal verification is a huge topic that\u2019s been covered well in the Kadena blog. See the blog post - Pact Formal Verification: Making Blockchain Smart Contracts Safer for more information on this topic. Type Inference Pact includes type inference. This feature makes it possible for code to be strongly-typed without declaring type information. It also has the added benefit of limiting run-time type enforcement. Developers can use a typecheck to add \u201cjust enough types\u201d. Typecheck eliminates warnings and only enforces types at runtime where needed. Total Governance Similar to RDBMS systems, Pact offers the benefit of total governance. This benefit allows changes to commit to the database only if the code runs successfully. Any errors roll back changes, abort execution, and avoid costly mistakes. RDBMS Integration Pact is also designed to allow direct integration with an industrial RDBMS. This design is helpful in cases that need efficient publication of historical data. Confidential Computing with \u201cPacts\u201d The Pact programming language comes from one of its key features, known as \u201cPacts\u201d. \u201cPacts\u201d solve a significant blockchain problem in privacy-preserving blockchains. To maintain privacy on a blockchain, participants can only run a subset of smart contracts. In these cases, the databases of each of the participants become disjointed. Pact solves this problem using coroutines. Coroutines are functions that can start and stop at critical points in a function\u2019s execution. These coroutines are called pacts. They define the steps to be executed by different entities as sequential transactions on the blockchain. Learn More The features described in this post are only a few of the crucial features that make Pact such a powerful language for writing smart contracts. There are many resources available to help you learn more about Pact. Here are a list of resources you can use to get started. Where to go next Join the Discord Channel for community discussion. Read The Pact Smart-Contract Language White Paper to learn more about the creation of Pact. Read the Pact documentation for a detailed look at everything the language offers. Follow the Pact GitHub page for the latest updates on Pact development. Ask questions on Stack Overflow using #pact-lang . Along with all of these resources, you can also continue this tutorial series. Throughout these tutorials, you\u2019ll learn all about Pact by walking through each of its features, building real-world applications, and exploring new ideas for yourself that take the language in directions no one has even thought of yet. Feel free to join the community and reach out if you have any questions. We\u2019re incredibly excited to help you start your journey as a Pact smart contract developer.","title":"Welcome to Pact"},{"location":"beginner/welcome-to-pact/#welcome-to-pact","text":"Welcome to the Pact smart contract programming language! In this tutorial, you\u2019ll learn about Pact, get introduced to its core features, and take your first steps toward becoming a Pact smart contract developer. Topics covered in this tutorial Introduction to Pact Pact Key Features Learn More About Pact The goal is to familiarize you with what Pact is, how its used, and some critical decisions that influenced the design of this new language. Key Takeaway Pact is the safest, most user-friendly language for smart contracts. It\u2019s designed for security and performance. It is turing incomplete, human readable, supports upgradable contracts, and formal verification to make high performant and secure smart contracts.","title":"Welcome to Pact"},{"location":"beginner/welcome-to-pact/#welcome-to-pact-tutorial","text":"Subscribe to our YouTube channel to access the latest Pact tutorials.","title":"Welcome to Pact Tutorial"},{"location":"beginner/welcome-to-pact/#introduction-to-pact","text":"Pact is an open-source programming language for writing smart contracts . It\u2019s designed from the ground up to support the unique challenges of developing solutions to run on a blockchain. Pact empowers developers to create robust and high-performance logic for transactions. It facilitates execution of mission-critical business operations quickly and effectively. Pact is designed with safety in mind. Its design is informed by existing approaches to smart contracts as well as stored procedure languages like SQL and LISP. Pact resembles a general-purpose, Turing-complete language. It includes LISP-like syntax, user functions, modules, and imperative style.","title":"Introduction to Pact"},{"location":"beginner/welcome-to-pact/#pact-smart-contracts","text":"Pact smart contracts contain three core elements: the code module, keysets, and tables. The table below briefly introduces each of these core elements. Module A module defines the logic of a smart contract. It contains functions, pact definitions, tables, and schemas. Keysets Includes relevant documentation links and allows you to load code into the REPL, refresh the repl, or deploy smart contract. Tables Tables store data generated by Pact modules. These tables have a \u201ckey-row\u201d structure and support schemas as well as a versioned, columnar history. Each of these elements support a wide range of functionality. This ensures that you have the tools you need to create robust solutions for real-world problems.","title":"Pact Smart Contracts"},{"location":"beginner/welcome-to-pact/#pact-key-features","text":"There are many valuable features make Pact such a safe and high-performance language. Here are a few that we\u2019ll focus on throughout this tutorial. Pact Key Features Turing Incomplete Human Readable Upgradable Contracts Formal Verification Type Inference Total Governance RDBMS Integration Pacts","title":"Pact Key Features"},{"location":"beginner/welcome-to-pact/#turing-incomplete","text":"Pact contracts are Turing incomplete. A Turing complete language has the power to run any possible program. In some languages, Turing completeness is an extremely important feature. For smart contracts, it\u2019s an incredibly dangerous feature. For that reason, Pact is designed to be Turing incomplete which places deliberate constraints on its computational ability. This supports its design goal of \u201cjust enough\u201d power for transactional blockchain solutions and helps ensure the security of its smart contracts. The first restriction in Pact is that there is no unbounded looping or recursion. Pact detects recursion and fails immediately. Looping is also only supported in special circumstances. The key benefits of this are to reduce cost and improve performance. This feature makes some of the most infamous and costly bugs discovered in other platforms not even possible with Pact. For more information on this topic, see our blog post - Turing Completeness and Smart Contract Security .","title":"Turing Incomplete"},{"location":"beginner/welcome-to-pact/#human-readable","text":"Pact smart contracts are human readable. All Pact code gets stored as written in a human-readable form on the ledger. Pact smart contracts install directly onto the blockchain. This allows you to review the running code as it was written and be sure of exactly what it's doing. This is important because smart contracts solve business problems that require both technical and non-technical expertise. Building the best smart contract solution requires everyone to understand and contribute to the development of the smart contract. For that reason, Pact was built to be simple to read and write. This simplicity helps provide complete transparency for the logic within its smart contracts. This approach also encourages shorter programs. The code executes directly on the ledger where it can be read easily by anyone. As a result, Pact is easy to understand. For example, here\u2019s a \u201cHello World\u201d smart contract using Pact. ( module helloWorld admin-keyset ( defun hello ( name ) ( format Hello {}! [ name ])) ) ( hello world ) Without having learned anything about the Pact language, you can already start to see how it works. With these few simple lines of code, you see a fully functioning Pact \u201cHello World\u201d smart contract. Once written, smart contracts are deployed to a blockchain. In Pact, the code on the blockchain is the same as the code that was written. Maintaining this code means that no matter when you see the code it will always be as it was written. This allows you to understand the code so you can continue to moderate and improve your application over time.","title":"Human Readable"},{"location":"beginner/welcome-to-pact/#upgradable-contracts","text":"Pact contracts are upgradable. Upgradable contracts allow you to revise and improve your smart contracts over time. This allows you to offer new features and fix bugs as you continue developing your smart contract. None of this is possible with other smart contract languages, and it\u2019s a powerful feature when building impactful applications for your business. Pact's tooling ecosystem further amplifies the simplicity of upgrading contracts. Compiler and runtime errors offer detailed information, with stack traces and function documentation to ensure you\u2019re making the best version of your smart contract. Pact\u2019s iterative development process is also supported by a feature-rich REPL helping you to improve and deploy new smart contracts rapidly. It includes features such as incremental transaction execution and environment and database inspection.","title":"Upgradable Contracts"},{"location":"beginner/welcome-to-pact/#formal-verification","text":"Pact comes equipped with a powerful validation tool suite in the form of formal verification . Pact uses Z3, an open-source tool developed by Microsoft, to mathematically verify and test for bugs present in the code. This means that Pact allows smart contract authors to express, automatically check, and formally verify that their code does not contain any bugs. Formal verification is the same system used to protect mission-critical environments like nuclear power plants or air and space autopilot systems. You now have this same high level of security in every smart contract you write with Pact. Formal verification is a huge topic that\u2019s been covered well in the Kadena blog. See the blog post - Pact Formal Verification: Making Blockchain Smart Contracts Safer for more information on this topic.","title":"Formal Verification"},{"location":"beginner/welcome-to-pact/#type-inference","text":"Pact includes type inference. This feature makes it possible for code to be strongly-typed without declaring type information. It also has the added benefit of limiting run-time type enforcement. Developers can use a typecheck to add \u201cjust enough types\u201d. Typecheck eliminates warnings and only enforces types at runtime where needed.","title":"Type Inference"},{"location":"beginner/welcome-to-pact/#total-governance","text":"Similar to RDBMS systems, Pact offers the benefit of total governance. This benefit allows changes to commit to the database only if the code runs successfully. Any errors roll back changes, abort execution, and avoid costly mistakes.","title":"Total Governance"},{"location":"beginner/welcome-to-pact/#rdbms-integration","text":"Pact is also designed to allow direct integration with an industrial RDBMS. This design is helpful in cases that need efficient publication of historical data.","title":"RDBMS Integration"},{"location":"beginner/welcome-to-pact/#confidential-computing-with-pacts","text":"The Pact programming language comes from one of its key features, known as \u201cPacts\u201d. \u201cPacts\u201d solve a significant blockchain problem in privacy-preserving blockchains. To maintain privacy on a blockchain, participants can only run a subset of smart contracts. In these cases, the databases of each of the participants become disjointed. Pact solves this problem using coroutines. Coroutines are functions that can start and stop at critical points in a function\u2019s execution. These coroutines are called pacts. They define the steps to be executed by different entities as sequential transactions on the blockchain.","title":"Confidential Computing with \u201cPacts\u201d"},{"location":"beginner/welcome-to-pact/#learn-more","text":"The features described in this post are only a few of the crucial features that make Pact such a powerful language for writing smart contracts. There are many resources available to help you learn more about Pact. Here are a list of resources you can use to get started. Where to go next Join the Discord Channel for community discussion. Read The Pact Smart-Contract Language White Paper to learn more about the creation of Pact. Read the Pact documentation for a detailed look at everything the language offers. Follow the Pact GitHub page for the latest updates on Pact development. Ask questions on Stack Overflow using #pact-lang . Along with all of these resources, you can also continue this tutorial series. Throughout these tutorials, you\u2019ll learn all about Pact by walking through each of its features, building real-world applications, and exploring new ideas for yourself that take the language in directions no one has even thought of yet. Feel free to join the community and reach out if you have any questions. We\u2019re incredibly excited to help you start your journey as a Pact smart contract developer.","title":"Learn More"},{"location":"intermediate/coming-soon/","text":"Coming Soon We're working hard to bring you more tutorials! These intermediate Pact Tutorials are currently under development. Stay in touch while you wait Subscribe to our YouTube channel to access the latest Pact tutorials. Join the Discord Channel for community discussion Follow the Pact GitHub page for the latest updates on Pact development Ask questions about Pact on Stack Overflow using #pact-lang Get the latest Kadena updates and workshop announcements from our Newsletter or on Twitter @kadena_io View our Pact Beginner Tutorials to get an overview of the Pact language basics.","title":"Coming Soon"},{"location":"intermediate/coming-soon/#coming-soon","text":"We're working hard to bring you more tutorials! These intermediate Pact Tutorials are currently under development.","title":"Coming Soon"},{"location":"intermediate/coming-soon/#stay-in-touch-while-you-wait","text":"Subscribe to our YouTube channel to access the latest Pact tutorials. Join the Discord Channel for community discussion Follow the Pact GitHub page for the latest updates on Pact development Ask questions about Pact on Stack Overflow using #pact-lang Get the latest Kadena updates and workshop announcements from our Newsletter or on Twitter @kadena_io View our Pact Beginner Tutorials to get an overview of the Pact language basics.","title":"Stay in touch while you wait"}]}